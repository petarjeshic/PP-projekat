
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jul 17 18:19:28 CEST 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.io.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.util.MyTab;
import rs.ac.bg.etf.pp1.util.MyStruct;
import rs.etf.pp1.symboltable.concepts.*;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jul 17 18:19:28 CEST 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\211\000\002\002\010\000\002\002\004\000\002\051" +
    "\003\000\002\047\004\000\002\047\004\000\002\047\004" +
    "\000\002\047\002\000\002\013\011\000\002\013\005\000" +
    "\002\015\007\000\002\015\002\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\032\011\000\002\032" +
    "\010\000\002\032\006\000\002\032\007\000\002\033\007" +
    "\000\002\033\005\000\002\033\002\000\002\006\005\000" +
    "\002\006\005\000\002\034\005\000\002\034\003\000\002" +
    "\016\003\000\002\016\005\000\002\026\004\000\002\026" +
    "\002\000\002\065\002\000\002\017\011\000\002\066\002" +
    "\000\002\017\013\000\002\046\005\000\002\046\002\000" +
    "\002\005\004\000\002\005\002\000\002\067\002\000\002" +
    "\003\014\000\002\070\002\000\002\003\015\000\002\050" +
    "\007\000\002\050\002\000\002\004\004\000\002\004\002" +
    "\000\002\063\010\000\002\063\006\000\002\063\003\000" +
    "\002\010\010\000\002\010\006\000\002\010\002\000\002" +
    "\053\003\000\002\053\003\000\002\011\003\000\002\011" +
    "\003\000\002\071\002\000\002\031\007\000\002\045\004" +
    "\000\002\045\006\000\002\044\004\000\002\044\007\000" +
    "\002\044\006\000\002\072\002\000\002\044\014\000\002" +
    "\044\004\000\002\044\004\000\002\073\002\000\002\044" +
    "\006\000\002\044\004\000\002\044\007\000\002\044\010" +
    "\000\002\044\005\000\002\007\004\000\002\007\002\000" +
    "\002\023\003\000\002\023\002\000\002\024\004\000\002" +
    "\024\002\000\002\022\003\000\002\022\002\000\002\020" +
    "\005\000\002\020\004\000\002\020\004\000\002\021\004" +
    "\000\002\025\005\000\002\025\002\000\002\042\004\000" +
    "\002\043\005\000\002\043\002\000\002\027\005\000\002" +
    "\027\003\000\002\055\004\000\002\055\003\000\002\056" +
    "\005\000\002\056\003\000\002\054\003\000\002\054\005" +
    "\000\002\052\005\000\002\052\003\000\002\074\002\000" +
    "\002\052\007\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\006\000\002\057\005\000\002\057" +
    "\005\000\002\057\003\000\002\030\005\000\002\030\002" +
    "\000\002\012\003\000\002\012\002\000\002\064\005\000" +
    "\002\064\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\061\003\000\002\061\003\000\002\036\003\000" +
    "\002\036\003\000\002\037\003\000\002\037\003\000\002" +
    "\062\003\000\002\062\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\004\004\005\001\002\000\004\002\u0105\001" +
    "\002\000\004\065\006\001\002\000\014\005\uffff\006\uffff" +
    "\026\uffff\030\uffff\065\uffff\001\002\000\014\005\ufffb\006" +
    "\ufffb\026\ufffb\030\ufffb\065\ufffb\001\002\000\014\005\014" +
    "\006\012\026\020\030\021\065\013\001\002\000\006\003" +
    "\373\065\374\001\002\000\012\005\uffdd\007\uffdd\037\uffdd" +
    "\065\uffdd\001\002\000\066\003\uffcd\010\uffcd\012\uffcd\013" +
    "\uffcd\016\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd" +
    "\055\uffcd\056\uffcd\065\uffcd\001\002\000\066\003\uffce\010" +
    "\uffce\012\uffce\013\uffce\016\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce" +
    "\053\uffce\054\uffce\055\uffce\056\uffce\065\uffce\001\002\000" +
    "\014\005\ufffd\006\ufffd\026\ufffd\030\ufffd\065\ufffd\001\002" +
    "\000\014\005\ufffc\006\ufffc\026\ufffc\030\ufffc\065\ufffc\001" +
    "\002\000\014\005\ufffe\006\ufffe\026\ufffe\030\ufffe\065\ufffe" +
    "\001\002\000\004\065\041\001\002\000\010\003\023\005" +
    "\014\065\013\001\002\000\004\065\025\001\002\000\004" +
    "\010\024\001\002\000\014\005\ufff9\006\ufff9\026\ufff9\030" +
    "\ufff9\065\ufff9\001\002\000\004\017\026\001\002\000\010" +
    "\062\027\063\032\064\030\001\002\000\006\010\ufff6\013" +
    "\ufff6\001\002\000\006\010\ufff4\013\ufff4\001\002\000\006" +
    "\010\ufff7\013\ufff7\001\002\000\006\010\ufff5\013\ufff5\001" +
    "\002\000\006\010\035\013\034\001\002\000\004\065\036" +
    "\001\002\000\014\005\ufffa\006\ufffa\026\ufffa\030\ufffa\065" +
    "\ufffa\001\002\000\004\017\037\001\002\000\010\062\027" +
    "\063\032\064\030\001\002\000\006\010\ufff8\013\ufff8\001" +
    "\002\000\006\006\uffe4\035\042\001\002\000\004\065\363" +
    "\001\002\000\004\006\044\001\002\000\014\005\uffe5\006" +
    "\uffe5\007\uffe5\037\uffe5\065\uffe5\001\002\000\014\005\014" +
    "\006\046\007\uffdf\037\051\065\013\001\002\000\012\005" +
    "\uffdd\007\uffdd\037\uffdd\065\uffdd\001\002\000\004\065\070" +
    "\001\002\000\004\007\067\001\002\000\006\005\014\065" +
    "\013\001\002\000\014\005\uffe6\006\uffe6\007\uffe6\037\uffe6" +
    "\065\uffe6\001\002\000\004\065\054\001\002\000\010\010" +
    "\uffed\013\uffed\020\055\001\002\000\004\021\064\001\002" +
    "\000\006\010\060\013\057\001\002\000\004\065\061\001" +
    "\002\000\014\005\ufff0\006\ufff0\007\ufff0\037\ufff0\065\ufff0" +
    "\001\002\000\010\010\uffee\013\uffee\020\062\001\002\000" +
    "\004\021\063\001\002\000\006\010\uffef\013\uffef\001\002" +
    "\000\006\010\uffed\013\uffed\001\002\000\006\010\066\013" +
    "\057\001\002\000\014\005\ufff3\006\ufff3\007\ufff3\037\ufff3" +
    "\065\ufff3\001\002\000\014\005\uffe3\006\uffe3\026\uffe3\030" +
    "\uffe3\065\uffe3\001\002\000\010\010\uffed\013\uffed\020\071" +
    "\001\002\000\004\021\074\001\002\000\006\010\073\013" +
    "\057\001\002\000\014\005\ufff1\006\ufff1\007\ufff1\037\ufff1" +
    "\065\ufff1\001\002\000\006\010\uffed\013\uffed\001\002\000" +
    "\006\010\076\013\057\001\002\000\014\005\ufff2\006\ufff2" +
    "\007\ufff2\037\ufff2\065\ufff2\001\002\000\012\005\014\007" +
    "\102\037\101\065\013\001\002\000\004\065\352\001\002" +
    "\000\006\005\014\065\013\001\002\000\004\007\uffe0\001" +
    "\002\000\012\005\uffde\007\uffde\037\uffde\065\uffde\001\002" +
    "\000\004\065\105\001\002\000\004\011\uffda\001\002\000" +
    "\004\011\107\001\002\000\010\005\014\012\uffd7\065\013" +
    "\001\002\000\006\022\332\065\331\001\002\000\004\012" +
    "\113\001\002\000\004\012\uffd2\001\002\000\010\005\uffd5" +
    "\006\uffd5\065\uffd5\001\002\000\010\005\014\006\115\065" +
    "\013\001\002\000\026\006\uffb8\007\uffb8\014\uffb8\015\uffb8" +
    "\025\uffb8\031\uffb8\033\uffb8\034\uffb8\036\uffb8\065\uffb8\001" +
    "\002\000\010\005\uffd6\006\uffd6\065\uffd6\001\002\000\026" +
    "\006\121\007\136\014\132\015\135\025\137\031\127\033" +
    "\120\034\124\036\134\065\122\001\002\000\004\011\325" +
    "\001\002\000\026\006\uffb8\007\uffb8\014\uffb8\015\uffb8\025" +
    "\uffb8\031\uffb8\033\uffb8\034\uffb8\036\uffb8\065\uffb8\001\002" +
    "\000\072\010\uff9f\011\uff9f\012\uff9f\013\uff9f\016\uff9f\017" +
    "\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\040\uff9f" +
    "\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047" +
    "\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\001\002\000\024\006\121\014" +
    "\132\015\135\025\137\031\127\033\120\034\124\036\134" +
    "\065\122\001\002\000\004\011\277\001\002\000\026\006" +
    "\uffcb\007\uffcb\014\uffcb\015\uffcb\025\uffcb\031\uffcb\033\uffcb" +
    "\034\uffcb\036\uffcb\065\uffcb\001\002\000\030\011\271\017" +
    "\270\020\201\022\203\052\171\053\173\054\161\055\162" +
    "\056\167\057\265\060\272\001\002\000\004\011\237\001" +
    "\002\000\004\010\236\001\002\000\026\006\uffb9\007\uffb9" +
    "\014\uffb9\015\uffb9\025\uffb9\031\uffb9\033\uffb9\034\uffb9\036" +
    "\uffb9\065\uffb9\001\002\000\004\011\227\001\002\000\026" +
    "\006\uffcc\007\uffcc\014\uffcc\015\uffcc\025\uffcc\031\uffcc\033" +
    "\uffcc\034\uffcc\036\uffcc\065\uffcc\001\002\000\004\010\226" +
    "\001\002\000\022\010\150\011\153\032\144\040\141\062" +
    "\146\063\154\064\142\065\122\001\002\000\012\005\uffd9" +
    "\007\uffd9\037\uffd9\065\uffd9\001\002\000\004\010\140\001" +
    "\002\000\030\006\uffc1\007\uffc1\014\uffc1\015\uffc1\025\uffc1" +
    "\027\uffc1\031\uffc1\033\uffc1\034\uffc1\036\uffc1\065\uffc1\001" +
    "\002\000\016\011\153\032\144\062\146\063\154\064\142" +
    "\065\122\001\002\000\056\010\uff9a\012\uff9a\013\uff9a\016" +
    "\uff9a\021\uff9a\023\uff9a\024\uff9a\040\uff9a\041\uff9a\042\uff9a" +
    "\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051" +
    "\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\001\002" +
    "\000\004\010\uffbf\001\002\000\006\005\014\065\013\001" +
    "\002\000\064\010\uff96\011\202\012\uff96\013\uff96\016\uff96" +
    "\020\201\021\uff96\022\203\023\uff96\024\uff96\040\uff96\041" +
    "\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96" +
    "\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056" +
    "\uff96\001\002\000\056\010\uff9c\012\uff9c\013\uff9c\016\uff9c" +
    "\021\uff9c\023\uff9c\024\uff9c\040\uff9c\041\uff9c\042\uff9c\043" +
    "\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\001\002\000" +
    "\042\010\uffa5\012\uffa5\013\uffa5\016\172\021\uffa5\023\uffa5" +
    "\024\uffa5\040\174\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050" +
    "\uffa5\051\uffa5\052\171\053\173\001\002\000\030\006\uffbd" +
    "\007\uffbd\014\uffbd\015\uffbd\025\uffbd\027\uffbd\031\uffbd\033" +
    "\uffbd\034\uffbd\036\uffbd\065\uffbd\001\002\000\056\010\uffa3" +
    "\012\uffa3\013\uffa3\016\uffa3\021\uffa3\023\uffa3\024\uffa3\040" +
    "\uffa3\041\165\042\157\043\163\044\uffa3\045\uffa3\046\uffa3" +
    "\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\161\055" +
    "\162\056\167\001\002\000\056\010\uffa2\012\uffa2\013\uffa2" +
    "\016\uffa2\021\uffa2\023\uffa2\024\uffa2\040\uffa2\041\uffa2\042" +
    "\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2" +
    "\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\001" +
    "\002\000\020\011\153\032\144\040\141\062\146\063\154" +
    "\064\142\065\122\001\002\000\056\010\uff9b\012\uff9b\013" +
    "\uff9b\016\uff9b\021\uff9b\023\uff9b\024\uff9b\040\uff9b\041\uff9b" +
    "\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050" +
    "\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b" +
    "\001\002\000\004\012\156\001\002\000\056\010\uff97\012" +
    "\uff97\013\uff97\016\uff97\021\uff97\023\uff97\024\uff97\040\uff97" +
    "\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047" +
    "\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97" +
    "\056\uff97\001\002\000\016\011\uff7d\032\uff7d\062\uff7d\063" +
    "\uff7d\064\uff7d\065\uff7d\001\002\000\016\011\uff7f\032\uff7f" +
    "\062\uff7f\063\uff7f\064\uff7f\065\uff7f\001\002\000\020\011" +
    "\uff7b\032\uff7b\040\uff7b\062\uff7b\063\uff7b\064\uff7b\065\uff7b" +
    "\001\002\000\020\011\uff7a\032\uff7a\040\uff7a\062\uff7a\063" +
    "\uff7a\064\uff7a\065\uff7a\001\002\000\016\011\uff7c\032\uff7c" +
    "\062\uff7c\063\uff7c\064\uff7c\065\uff7c\001\002\000\016\011" +
    "\153\032\144\062\146\063\154\064\142\065\122\001\002" +
    "\000\016\011\uff7e\032\uff7e\062\uff7e\063\uff7e\064\uff7e\065" +
    "\uff7e\001\002\000\016\011\uff80\032\uff80\062\uff80\063\uff80" +
    "\064\uff80\065\uff80\001\002\000\020\011\uff79\032\uff79\040" +
    "\uff79\062\uff79\063\uff79\064\uff79\065\uff79\001\002\000\056" +
    "\010\uffa1\012\uffa1\013\uffa1\016\uffa1\021\uffa1\023\uffa1\024" +
    "\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1" +
    "\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054" +
    "\uffa1\055\uffa1\056\uffa1\001\002\000\020\011\uff82\032\uff82" +
    "\040\uff82\062\uff82\063\uff82\064\uff82\065\uff82\001\002\000" +
    "\016\011\uff84\032\uff84\062\uff84\063\uff84\064\uff84\065\uff84" +
    "\001\002\000\020\011\uff81\032\uff81\040\uff81\062\uff81\063" +
    "\uff81\064\uff81\065\uff81\001\002\000\016\011\uff83\032\uff83" +
    "\062\uff83\063\uff83\064\uff83\065\uff83\001\002\000\016\011" +
    "\uff85\032\uff85\062\uff85\063\uff85\064\uff85\065\uff85\001\002" +
    "\000\016\011\153\032\144\062\146\063\154\064\142\065" +
    "\122\001\002\000\016\011\uff86\032\uff86\062\uff86\063\uff86" +
    "\064\uff86\065\uff86\001\002\000\056\010\uffa4\012\uffa4\013" +
    "\uffa4\016\uffa4\021\uffa4\023\uffa4\024\uffa4\040\uffa4\041\165" +
    "\042\157\043\163\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050" +
    "\uffa4\051\uffa4\052\uffa4\053\uffa4\054\161\055\162\056\167" +
    "\001\002\000\020\011\uff9e\032\uff9e\040\uff9e\062\uff9e\063" +
    "\uff9e\064\uff9e\065\uff9e\001\002\000\022\011\153\012\uff92" +
    "\032\144\040\141\062\146\063\154\064\142\065\122\001" +
    "\002\000\004\065\204\001\002\000\072\010\uffa0\011\uffa0" +
    "\012\uffa0\013\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022" +
    "\uffa0\023\uffa0\024\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052" +
    "\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0" +
    "\001\002\000\004\012\212\001\002\000\006\012\uff90\013" +
    "\210\001\002\000\004\012\uff93\001\002\000\020\011\153" +
    "\032\144\040\141\062\146\063\154\064\142\065\122\001" +
    "\002\000\004\012\uff91\001\002\000\056\010\uff99\012\uff99" +
    "\013\uff99\016\uff99\021\uff99\023\uff99\024\uff99\040\uff99\041" +
    "\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99" +
    "\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056" +
    "\uff99\001\002\000\020\011\153\032\144\040\141\062\146" +
    "\063\154\064\142\065\122\001\002\000\004\021\215\001" +
    "\002\000\072\010\uff9d\011\uff9d\012\uff9d\013\uff9d\016\uff9d" +
    "\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\040" +
    "\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d" +
    "\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055" +
    "\uff9d\056\uff9d\057\uff9d\060\uff9d\001\002\000\060\010\uff94" +
    "\012\uff94\013\uff94\016\uff94\020\217\021\uff94\023\uff94\024" +
    "\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94" +
    "\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054" +
    "\uff94\055\uff94\056\uff94\001\002\000\020\011\153\032\144" +
    "\040\141\062\146\063\154\064\142\065\122\001\002\000" +
    "\056\010\uff98\012\uff98\013\uff98\016\uff98\021\uff98\023\uff98" +
    "\024\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045" +
    "\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053\uff98" +
    "\054\uff98\055\uff98\056\uff98\001\002\000\004\021\222\001" +
    "\002\000\056\010\uff95\012\uff95\013\uff95\016\uff95\021\uff95" +
    "\023\uff95\024\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044" +
    "\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95" +
    "\053\uff95\054\uff95\055\uff95\056\uff95\001\002\000\004\010" +
    "\224\001\002\000\030\006\uffbe\007\uffbe\014\uffbe\015\uffbe" +
    "\025\uffbe\027\uffbe\031\uffbe\033\uffbe\034\uffbe\036\uffbe\065" +
    "\uffbe\001\002\000\042\010\uffa6\012\uffa6\013\uffa6\016\172" +
    "\021\uffa6\023\uffa6\024\uffa6\040\174\044\uffa6\045\uffa6\046" +
    "\uffa6\047\uffa6\050\uffa6\051\uffa6\052\171\053\173\001\002" +
    "\000\030\006\uffc0\007\uffc0\014\uffc0\015\uffc0\025\uffc0\027" +
    "\uffc0\031\uffc0\033\uffc0\034\uffc0\036\uffc0\065\uffc0\001\002" +
    "\000\020\011\153\032\144\040\141\062\146\063\154\064" +
    "\142\065\122\001\002\000\006\012\uffb4\013\231\001\002" +
    "\000\004\062\235\001\002\000\004\012\233\001\002\000" +
    "\004\010\234\001\002\000\030\006\uffbb\007\uffbb\014\uffbb" +
    "\015\uffbb\025\uffbb\027\uffbb\031\uffbb\033\uffbb\034\uffbb\036" +
    "\uffbb\065\uffbb\001\002\000\004\012\uffb5\001\002\000\030" +
    "\006\uffc6\007\uffc6\014\uffc6\015\uffc6\025\uffc6\027\uffc6\031" +
    "\uffc6\033\uffc6\034\uffc6\036\uffc6\065\uffc6\001\002\000\020" +
    "\011\153\032\144\040\141\062\146\063\154\064\142\065" +
    "\122\001\002\000\026\010\uffa7\012\uffa7\023\255\024\254" +
    "\044\262\045\260\046\257\047\256\050\uffa7\051\uffa7\001" +
    "\002\000\004\012\uffca\001\002\000\012\010\uffa9\012\uffa9" +
    "\050\uffa9\051\uffa9\001\002\000\010\010\uffac\012\uffac\051" +
    "\uffac\001\002\000\010\010\uffae\012\uffae\051\245\001\002" +
    "\000\020\011\153\032\144\040\141\062\146\063\154\064" +
    "\142\065\122\001\002\000\010\010\uffad\012\uffad\051\uffad" +
    "\001\002\000\012\010\uffab\012\uffab\050\250\051\uffab\001" +
    "\002\000\020\011\153\032\144\040\141\062\146\063\154" +
    "\064\142\065\122\001\002\000\012\010\uffaa\012\uffaa\050" +
    "\uffaa\051\uffaa\001\002\000\004\012\253\001\002\000\024" +
    "\006\uffc9\014\uffc9\015\uffc9\025\uffc9\031\uffc9\033\uffc9\034" +
    "\uffc9\036\uffc9\065\uffc9\001\002\000\020\011\uff88\032\uff88" +
    "\040\uff88\062\uff88\063\uff88\064\uff88\065\uff88\001\002\000" +
    "\020\011\uff8a\032\uff8a\040\uff8a\062\uff8a\063\uff8a\064\uff8a" +
    "\065\uff8a\001\002\000\020\011\uff87\032\uff87\040\uff87\062" +
    "\uff87\063\uff87\064\uff87\065\uff87\001\002\000\020\011\uff89" +
    "\032\uff89\040\uff89\062\uff89\063\uff89\064\uff89\065\uff89\001" +
    "\002\000\020\011\uff8b\032\uff8b\040\uff8b\062\uff8b\063\uff8b" +
    "\064\uff8b\065\uff8b\001\002\000\020\011\153\032\144\040" +
    "\141\062\146\063\154\064\142\065\122\001\002\000\020" +
    "\011\uff8c\032\uff8c\040\uff8c\062\uff8c\063\uff8c\064\uff8c\065" +
    "\uff8c\001\002\000\012\010\uffa8\012\uffa8\050\uffa8\051\uffa8" +
    "\001\002\000\020\011\uff8d\032\uff8d\040\uff8d\062\uff8d\063" +
    "\uff8d\064\uff8d\065\uff8d\001\002\000\006\010\uffb0\012\uffb0" +
    "\001\002\000\020\011\uff8e\032\uff8e\040\uff8e\062\uff8e\063" +
    "\uff8e\064\uff8e\065\uff8e\001\002\000\020\011\153\032\144" +
    "\040\141\062\146\063\154\064\142\065\122\001\002\000" +
    "\020\011\uff8f\032\uff8f\040\uff8f\062\uff8f\063\uff8f\064\uff8f" +
    "\065\uff8f\001\002\000\022\011\153\012\uff92\032\144\040" +
    "\141\062\146\063\154\064\142\065\122\001\002\000\006" +
    "\010\uffaf\012\uffaf\001\002\000\004\012\274\001\002\000" +
    "\004\010\275\001\002\000\030\006\uffc5\007\uffc5\014\uffc5" +
    "\015\uffc5\025\uffc5\027\uffc5\031\uffc5\033\uffc5\034\uffc5\036" +
    "\uffc5\065\uffc5\001\002\000\006\010\uffb1\012\uffb1\001\002" +
    "\000\006\010\uffb2\065\122\001\002\000\026\017\270\020" +
    "\201\022\203\052\171\053\173\054\161\055\162\056\167" +
    "\057\265\060\272\001\002\000\006\010\uffb3\012\uffb3\001" +
    "\002\000\004\010\303\001\002\000\022\010\uffb6\011\153" +
    "\032\144\040\141\062\146\063\154\064\142\065\122\001" +
    "\002\000\004\010\306\001\002\000\004\010\uffb7\001\002" +
    "\000\006\012\uffb2\065\122\001\002\000\004\012\310\001" +
    "\002\000\024\006\uffc3\014\uffc3\015\uffc3\025\uffc3\031\uffc3" +
    "\033\uffc3\034\uffc3\036\uffc3\065\uffc3\001\002\000\024\006" +
    "\121\014\132\015\135\025\137\031\127\033\120\034\124" +
    "\036\134\065\122\001\002\000\024\006\121\014\132\015" +
    "\135\025\137\031\127\033\120\034\124\036\134\065\122" +
    "\001\002\000\030\006\uffc2\007\uffc2\014\uffc2\015\uffc2\025" +
    "\uffc2\027\uffc2\031\uffc2\033\uffc2\034\uffc2\036\uffc2\065\uffc2" +
    "\001\002\000\004\027\315\001\002\000\024\006\121\014" +
    "\132\015\135\025\137\031\127\033\120\034\124\036\134" +
    "\065\122\001\002\000\030\006\uffc4\007\uffc4\014\uffc4\015" +
    "\uffc4\025\uffc4\027\uffc4\031\uffc4\033\uffc4\034\uffc4\036\uffc4" +
    "\065\uffc4\001\002\000\026\006\uffc8\007\uffc8\014\uffc8\015" +
    "\uffc8\025\uffc8\031\uffc8\033\uffc8\034\uffc8\036\uffc8\065\uffc8" +
    "\001\002\000\030\006\uffcc\007\uffcc\014\uffcc\015\uffcc\025" +
    "\uffcc\027\321\031\uffcc\033\uffcc\034\uffcc\036\uffcc\065\uffcc" +
    "\001\002\000\024\006\121\014\132\015\135\025\137\031" +
    "\127\033\120\034\124\036\134\065\122\001\002\000\026" +
    "\006\uffc7\007\uffc7\014\uffc7\015\uffc7\025\uffc7\031\uffc7\033" +
    "\uffc7\034\uffc7\036\uffc7\065\uffc7\001\002\000\026\006\121" +
    "\007\324\014\132\015\135\025\137\031\127\033\120\034" +
    "\124\036\134\065\122\001\002\000\030\006\uffba\007\uffba" +
    "\014\uffba\015\uffba\025\uffba\027\uffba\031\uffba\033\uffba\034" +
    "\uffba\036\uffba\065\uffba\001\002\000\004\065\122\001\002" +
    "\000\010\012\327\020\201\022\203\001\002\000\004\010" +
    "\330\001\002\000\030\006\uffbc\007\uffbc\014\uffbc\015\uffbc" +
    "\025\uffbc\027\uffbc\031\uffbc\033\uffbc\034\uffbc\036\uffbc\065" +
    "\uffbc\001\002\000\014\005\uffcf\012\uffcf\013\uffcf\020\336" +
    "\065\uffcf\001\002\000\004\022\333\001\002\000\004\022" +
    "\334\001\002\000\004\065\335\001\002\000\004\012\uffd8" +
    "\001\002\000\004\021\347\001\002\000\012\005\014\012" +
    "\uffd7\013\340\065\013\001\002\000\006\005\014\065\013" +
    "\001\002\000\004\022\332\001\002\000\004\012\uffd3\001" +
    "\002\000\004\065\344\001\002\000\014\005\uffd0\012\uffd0" +
    "\013\uffd0\020\345\065\uffd0\001\002\000\004\021\346\001" +
    "\002\000\012\005\uffd1\012\uffd1\013\uffd1\065\uffd1\001\002" +
    "\000\012\005\uffcf\012\uffcf\013\uffcf\065\uffcf\001\002\000" +
    "\012\005\014\012\uffd7\013\340\065\013\001\002\000\004" +
    "\012\uffd4\001\002\000\004\011\uffdc\001\002\000\004\011" +
    "\354\001\002\000\010\005\014\012\uffd7\065\013\001\002" +
    "\000\004\012\356\001\002\000\010\005\uffd5\006\uffd5\065" +
    "\uffd5\001\002\000\010\005\014\006\360\065\013\001\002" +
    "\000\026\006\uffb8\007\uffb8\014\uffb8\015\uffb8\025\uffb8\031" +
    "\uffb8\033\uffb8\034\uffb8\036\uffb8\065\uffb8\001\002\000\026" +
    "\006\121\007\362\014\132\015\135\025\137\031\127\033" +
    "\120\034\124\036\134\065\122\001\002\000\012\005\uffdb" +
    "\007\uffdb\037\uffdb\065\uffdb\001\002\000\004\006\uffe2\001" +
    "\002\000\004\006\365\001\002\000\014\005\uffe5\006\uffe5" +
    "\007\uffe5\037\uffe5\065\uffe5\001\002\000\014\005\014\006" +
    "\046\007\uffdf\037\051\065\013\001\002\000\004\007\370" +
    "\001\002\000\014\005\uffe1\006\uffe1\026\uffe1\030\uffe1\065" +
    "\uffe1\001\002\000\012\005\014\007\372\037\101\065\013" +
    "\001\002\000\004\002\001\001\002\000\004\010\u0104\001" +
    "\002\000\010\010\uffe8\013\uffe8\020\u0102\001\002\000\006" +
    "\010\uffe9\013\uffe9\001\002\000\006\010\u0100\013\377\001" +
    "\002\000\004\065\374\001\002\000\014\005\uffec\006\uffec" +
    "\026\uffec\030\uffec\065\uffec\001\002\000\006\010\uffea\013" +
    "\uffea\001\002\000\004\021\u0103\001\002\000\006\010\uffe7" +
    "\013\uffe7\001\002\000\014\005\uffeb\006\uffeb\026\uffeb\030" +
    "\uffeb\065\uffeb\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\051\006\001\001\000\002\001\001\000\004\047\007" +
    "\001\001\000\012\006\014\013\016\017\015\053\010\001" +
    "\001\000\006\016\374\034\375\001\001\000\004\005\370" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\037\001\001\000\002\001\001\000\004\065\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\044\001" +
    "\001\000\010\032\051\046\047\053\046\001\001\000\004" +
    "\005\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\102\053\077\001" +
    "\001\000\002\001\001\000\004\053\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\070" +
    "\105\001\001\000\002\001\001\000\010\050\111\053\107" +
    "\063\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\113\001\001\000\006\006\115" +
    "\053\010\001\001\000\004\007\116\001\001\000\002\001" +
    "\001\000\016\011\130\020\127\031\122\044\132\045\124" +
    "\052\125\001\001\000\002\001\001\000\004\007\322\001" +
    "\001\000\002\001\001\000\016\011\316\020\127\031\122" +
    "\044\317\045\124\052\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\035\266\037\265\040\263\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\052\144\054\150\055\142\056\146\057\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\052\144\054\150\056\224\057\151\001\001\000\002\001" +
    "\001\000\004\073\222\001\001\000\004\053\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\036\176\037" +
    "\174\061\175\001\001\000\002\001\001\000\010\040\157" +
    "\041\165\062\163\001\001\000\002\001\001\000\014\052" +
    "\144\054\150\055\154\056\146\057\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\052\144\057\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\052\144" +
    "\054\177\057\151\001\001\000\002\001\001\000\010\040" +
    "\157\041\165\062\163\001\001\000\004\074\212\001\001" +
    "\000\020\012\204\052\144\054\150\055\205\056\146\057" +
    "\151\064\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\052\144\054\150\055\205\056\146\057\151\064\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\052" +
    "\144\054\150\055\213\056\146\057\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\217\001\001\000" +
    "\014\052\144\054\150\055\220\056\146\057\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\036\176\037\174" +
    "\061\175\001\001\000\002\001\001\000\014\052\144\054" +
    "\150\055\227\056\146\057\151\001\001\000\004\024\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\021\240\027\241\042\242\052\144\054\150\055" +
    "\237\056\146\057\151\001\001\000\004\060\260\001\001" +
    "\000\004\071\251\001\001\000\004\043\246\001\001\000" +
    "\004\025\243\001\001\000\002\001\001\000\020\027\241" +
    "\042\245\052\144\054\150\055\237\056\146\057\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\027\250" +
    "\052\144\054\150\055\237\056\146\057\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\052\144\054\150\055\262" +
    "\056\146\057\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\052\144\054\150\055\275\056\146\057\151\001" +
    "\001\000\002\001\001\000\020\012\272\052\144\054\150" +
    "\055\205\056\146\057\151\064\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\300\022\301\052\277\001" +
    "\001\000\010\035\266\037\265\040\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\021\304\023\303\027" +
    "\241\042\242\052\144\054\150\055\237\056\146\057\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\300\022\306\052\277\001\001\000\002\001\001\000\004" +
    "\072\310\001\001\000\012\020\127\031\311\044\312\052" +
    "\125\001\001\000\012\020\127\031\311\044\313\052\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\127\031\311\044\315\052\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\127\031" +
    "\122\044\315\045\321\052\125\001\001\000\002\001\001" +
    "\000\016\011\130\020\127\031\122\044\132\045\124\052" +
    "\125\001\001\000\002\001\001\000\004\052\325\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\336\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\050\341\053\340\001\001\000\004\053\342\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\347\001\001\000\006\050\350\053\340\001\001\000" +
    "\002\001\001\000\004\067\352\001\001\000\002\001\001" +
    "\000\010\050\111\053\107\063\354\001\001\000\002\001" +
    "\001\000\004\004\356\001\001\000\006\006\115\053\010" +
    "\001\001\000\004\007\360\001\001\000\016\011\130\020" +
    "\127\031\122\044\132\045\124\052\125\001\001\000\002" +
    "\001\001\000\004\066\363\001\001\000\002\001\001\000" +
    "\004\026\365\001\001\000\010\032\051\046\366\053\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\102\053\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\u0100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	MyTab.init(); //Universe obseg

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s=this.getScanner().next_token();
	if(s!=null && s.value!=null)
		log.info(s.toString()+" "+s.value.toString());
	return s;

    }


	int printCallCount;
	boolean errorDetected=false;
	Logger log=Logger.getLogger(getClass());
	public void report_fatal_error(String message,Object info)throws java.lang.Exception{
		done_parsing();
		report_error(message,info);
	}
	public void syntax_error(Symbol cur_token){
		report_error("\nSintaksna greska",cur_token);
	}
	public void unrecovered_syntax_error(Symbol cur_token)throws java.lang.Exception{
		report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti",cur_token);
	}
	public void report_error(String message,Object info){
		errorDetected=true;
		StringBuilder msg=new StringBuilder(message);
		if(info instanceof Symbol)
			msg.append(" na liniji ").append(((Symbol)info).left);
		log.error(msg.toString());
	}
	public void report_info(String message,Object info){
		StringBuilder msg=new StringBuilder(message);
		if(info instanceof Symbol)
			msg.append(" na liniji ").append(((Symbol)info).left);
		log.info(msg.toString());
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	Obj currentMethod = null;
	Struct currentType, currentMethType;
	boolean main=false;
	boolean returnFound=false;
	boolean in_class = false; 
	boolean in_method = false;
	boolean in_for=false;
	Obj _this;
	int mainDeclarations = 0;
	Obj currentClass;

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // MulopRight ::= MODEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // MulopRight ::= DIVEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // MulopRight ::= MULEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // MulopLeft ::= MODI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // MulopLeft ::= DIVI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // MulopLeft ::= MULI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Mulop ::= MulopRight 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Mulop ::= MulopLeft 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // AddopRight ::= MINUSEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // AddopRight ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // AddopLeft ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // AddopLeft ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Addop ::= AddopRight 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Addop ::= AddopLeft 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Relop ::= LOWEQ 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Relop ::= LOWER 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Relop ::= GREATEQ 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Relop ::= GREATER 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Relop ::= NOTEQ 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Relop ::= EQEQ 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Assignop ::= MulopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Assignop ::= AddopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Assignop ::= EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ActPars ::= Expr 
            {
              Stack<MyStruct> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		    	RESULT = new Stack<MyStruct>();  
		    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ActPars ::= Expr COMMA ActPars 
            {
              Stack<MyStruct> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Stack<MyStruct> ap = (Stack<MyStruct>)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		    	RESULT = ap;  
		    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ActualPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ActualPars ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // BraceExprList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BraceExprList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // BraceExprList ::= LMEDBRACE Expr RMEDBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BraceExprList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Factor ::= Designator 
            {
              Struct RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	RESULT=d.getType();
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Factor ::= LPAREN Expr RPAREN 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		 	RESULT=t;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Factor ::= NEW Type BraceExprList 
            {
              Struct RESULT =null;
		
		 	RESULT = MyTab.referenceType;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Factor ::= Designator LPAREN ActualPars RPAREN 
            {
              Struct RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
			if(Obj.Meth == func.getKind()) {
				parser.report_info("Pronadjen poziv funkcije "+func.getName()+" na liniji: "+funcleft,null);
				RESULT=func.getType();
				}
			else
				parser.report_error("Greska na liniji: "+funcleft+" ime: "+func.getName()+" nije funkcija.",null);
				RESULT=MyTab.noType;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Factor ::= BOOL 
            {
              Struct RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			
		 	RESULT = MyTab.boolType;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Factor ::= CHAR 
            {
              Struct RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		 	RESULT=MyTab.charType;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Factor ::= NUMBER 
            {
              Struct RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
		 	 
			 parser.report_info("PREPOZNAT JE BROJ: "+n,null);
			 RESULT=MyTab.intType;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Designator ::= Designator LMEDBRACE NT$7 Expr RMEDBRACE 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$7 ::= 
            {
              Obj RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

			   	   	Obj ime=MyTab.find(o.getName());
			   	    if (ime.equals(MyStruct.Class)) { 
				   		RESULT = new Obj(Obj.Elem, "", o.getType().getElemType());
			   		} else {
			   			parser.report_error("Greska na liniji "  + oleft + ":tip nije niz",null);
			   		}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		   
	   		   		String s = name;
	   		   		int try_no=0;
	   		   		do {
	   		   			RESULT = MyTab.find(s);
	   		   			s = "super." + s;
	   		   		} while(RESULT  == MyTab.noObj && try_no++<10);
	   		   		
	   		   		
	   		   		parser.report_info("Koriscenje identifikatora " +  RESULT.getKind() + " " + name + " na liniji " +  nameleft,null);
	   		   		
	   		   		if(RESULT == MyTab.noObj)
	   		   			parser.report_error("Greska na liniji "  + nameleft + ":promenjiva " + name + " nije deklarisana",null);
	   		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Designator ::= Designator DOT IDENT 
            {
              Obj RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			
			  		for(Obj fld : o.getLocalSymbols())
			  			if(fld.getName().equals(id)) {
			  				RESULT = o;
			  				break;
			  			}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Term ::= Term Mulop Factor 
            {
              Struct RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 if(!t1.compatibleWith(t2)) {
		 					parser.report_error("Greska na liniji: "+t1left+" nekompatibilni tipovi u izrazu.",null);
		 				}
		 				RESULT = t1;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Term ::= Factor 
            {
              Struct RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct f1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		parser.report_info("^^^^" + MyTab.intType.getKind(), null);
		
		if(!f1.equals(MyTab.intType))
			parser.report_error("Greska na liniji: "+f1left+". Factor izraz mora biti tipa int umesto tipa: "+f1.getKind()+".",null);
		 RESULT=f1; 
		 
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // AddopTermList ::= Term 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(t.getKind()!=MyStruct.Int)
						parser.report_error("Greska na liniji: "+tleft+". Izraz mora biti tipa int.",null);
					RESULT=t;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermList",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // AddopTermList ::= AddopTermList Addop Term 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(!te.compatibleWith(t)){
						parser.report_error("Greska na liniji: "+tleft+" nekompatibilni tipovi u izrazu.",null);
						RESULT =MyTab.noType;
						}
					 if(!te.equals(MyTab.intType))
						parser.report_error("Greska na liniji: "+teleft+". Izraz pre operacije mora biti tipa int.",null);
					 if(!t.equals(MyTab.intType))
					 	parser.report_error("Greska na liniji: "+teleft+". Izraz posle operacije mora biti tipa int.",null);
					RESULT=te;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermList",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= AddopTermList 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		RESULT=te; 
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= MINUS AddopTermList 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			RESULT=te;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct e1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			 	if(!e1.compatibleWith(e2)) {
		 			parser.report_error("Nekompatibilni tipovi na liniji " + e1left,null);
		 		}
		 		RESULT=MyTab.boolType;
		 	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CondFactList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CondFactList ::= CondFactList AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CondTerm ::= CondFact CondFactList 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				RESULT=cond;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CondTermList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CondTermList ::= CondTermList OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Condition ::= CondTerm CondTermList 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			 	RESULT=cond;
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DesignatorStatement ::= Designator MINUSMINUS 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
							if(dest!=null) {
							if(!dest.equals(MyTab.intType)) 
		 						parser.report_error("Promenljiva: "+dest+" mora biti tipa int. - Greska na liniji " + destleft,null);
							}
							else {
								parser.report_error("Ne postoji izraz koji se umanjuje. - Greska na liniji " + destleft,null);
							}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DesignatorStatement ::= Designator PLUSPLUS 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
							if(dest!=null) {
							if(!dest.equals(MyTab.intType)) 
		 						parser.report_error("Promenljiva: "+dest+" mora biti tipa int. - Greska na liniji " + destleft,null);
							}
							else {
								parser.report_error("Ne postoji izraz koji se uvecava. - Greska na liniji " + destleft,null);
							}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DesignatorStatement ::= Designator Assignop Expr 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							if(!e.equals(MyTab.noObj)) {
							if(dest.equals(MyTab.noObj)) 
		 						parser.report_error("Promenljiva nije deklarisana. - Greska na liniji " + destleft,null);
		 					
							else if (!e.assignableTo(dest.getType())) 
		 						parser.report_error( "Ovaj tip se ne moze dodeliti promenjivoj tipa: " + dest.getType().getKind() + " - Greska na liniji " + destleft,null);
		 					
							}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DesignatorStatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DesignatorStatementList ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NumConstList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumConstList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NumConstList ::= COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumConstList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ConditionList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ConditionList ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Matched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Matched ::= PRINT LPAREN Expr NumConstList RPAREN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				if (!e.equals(MyTab.boolType)&&!e.equals(MyTab.intType)&&!e.equals(MyTab.charType))
					parser.report_error("Greska na liniji "+ eleft + ". Izraz mora biti integer, boolean ili char.",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				if (!des.getType().equals(MyTab.boolType)&&!des.getType().equals(MyTab.intType)&&!des.getType().equals(MyTab.charType))
					parser.report_error("Greska na liniji "+ desleft + ". Izraz mora biti integer, boolean ili char.",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Matched ::= RETURN SEMI 
            {
              Object RESULT =null;
		int linijaleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int linijaright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object linija = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if (currentMethType != MyTab.noType)
					parser.report_error("Greska na liniji "+ linijaleft + ":metod ne sme imati return bez izraza jer nije void!",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Matched ::= RETURN Expr NT$6 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$6 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
	
				returnFound=true;
				if(currentMethType==MyTab.noType){
					parser.report_error("Greska na liniji: "+tleft+". Povratni tip funkcije je VOID i ne moze imati vrednost u return iskazu.",null);
				}
				if(!currentMethType.compatibleWith(t)){
					parser.report_error("Greska na liniji: "+tleft+". Tip izraza u return naredbi se ne slaze sa tipom povratne vrednosti funkcije.",null);
				
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Matched ::= CONTINUE SEMI 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(in_for==false)
					parser.report_error("Greska na liniji: "+cleft+". Continue mora biti unutar for petlje.",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Matched ::= BREAK SEMI 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(in_for==false)
					parser.report_error("Greska na liniji: "+bleft+". Break mora biti unutar for petlje.",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Matched ::= FOR LPAREN DesignatorStatementList SEMI ConditionList SEMI DesignatorStatementList RPAREN NT$5 Matched 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				in_for=false;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$5 ::= 
            {
              Object RESULT =null;

				in_for=true;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Matched ::= If Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Matched ::= Designator LPAREN ActualPars RPAREN SEMI 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
			if(Obj.Meth == func.getKind()){
				parser.report_info("Pronadjen poziv funkcije "+func.getName()+" na liniji: "+funcleft,null);
				RESULT=func.getType();
				}
			else {
				parser.report_error("Greska na liniji: "+funcleft+" ime: "+func.getName()+" nije funkcija.",null);
				RESULT=MyTab.noType;
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Matched ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Unmatched ::= If Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Unmatched ::= If Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // If ::= IF LPAREN Condition NT$4 RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("If",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$4 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

				if(!cond.equals(MyTab.boolType)){
					parser.report_error("Greska na liniji: "+condleft+". Uslov mora biti boolean tipa.",null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			Obj typeNode = MyTab.find(typeName);
				if(typeNode==MyTab.noObj){
					parser.report_error("Greska na liniji: "+typeNameleft+" .Nije pronadjen tip "+typeName+" u tabeli simbola",null);
					currentType=MyTab.noType;
					RESULT = MyTab.noType;
					}
				else{
					if(Obj.Type == typeNode.getKind()){
						currentType=typeNode.getType();
						RESULT = typeNode.getType();
				
					}
				else{
						parser.report_error("Greska na liniji "+typeNameleft+"Ime: "+typeName+" ne predstavlja tip.",typeNode);
						currentType=MyTab.noType;
						RESULT = MyTab.noType;
					}
				}
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Type ::= VOID 
            {
              Struct RESULT =null;
		
			RESULT=MyTab.noType;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormParamList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormParamList ::= FormParamList COMMA Type IDENT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					parser.report_info("Parametar funkcije: "+name+" na liniji "+nameleft,null);
					if(MyTab.currentScope.findSymbol(name)!=null)
						{
							parser.report_error("Vec postoji promenljiva sa imenom: " + name,null);
						}
					else {
						Obj temp = MyTab.insert(Obj.Var, name, currentType);
						RESULT=f;
						}
			
				  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FormParamList ::= FormParamList COMMA Type IDENT LMEDBRACE RMEDBRACE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					parser.report_info("Parametar funkcije: "+name+" na liniji "+nameleft,null);
					if(MyTab.currentScope.findSymbol(name)!=null)
						{
							parser.report_error("Vec postoji promenljiva sa imenom: " + name,null);
						}
					else {
						Obj temp = MyTab.insert(Obj.Var, name, MyTab.referenceType);
						RESULT=f;
						}
			
				  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FormPars ::= VarArgs 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FormPars ::= Type IDENT FormParamList VarArgs 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				parser.report_info("Parametar funkcije: "+name+" na liniji "+nameleft,null);
				if(MyTab.currentScope.findSymbol(name)!=null)
					{
						parser.report_error("Vec postoji promenljiva sa imenom: " + name,null);
					}
				else {
					Obj temp = MyTab.insert(Obj.Var, name, currentType);
					}
			
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FormPars ::= Type IDENT LMEDBRACE RMEDBRACE FormParamList VarArgs 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
				parser.report_info("Parametar funkcije: "+name+" na liniji "+nameleft,null);
				if(MyTab.currentScope.findSymbol(name)!=null)
					{
						parser.report_error("Vec postoji promenljiva sa imenom: " + name,null);
					}
				else {
					Obj temp = MyTab.insert(Obj.Var, name, MyTab.referenceType);
					}
			
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VarArgs ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarArgs",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VarArgs ::= Type DOT DOT DOT IDENT 
            {
              Object RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct typeName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarArgs",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodDecl ::= STATIC Type IDENT NT$3 LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		 
				if(!returnFound && retType != MyTab.noType)
					parser.report_error("Semanticka greska na liniji: "+methNameleft+". Funkcija: "+methName+" nema return iskaz.",null);
				MyTab.chainLocalSymbols(currentMethod);
				returnFound=false;
				currentMethod=null;	
				currentMethType=null;
				MyTab.closeScope();
				in_method=false;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$3 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
  
				if(!in_class==true)
					parser.report_error("Greska na liniji: "+retTypeleft+". Staticka funkcija: "+methName+" mora biti unutar klase.",null);
				in_method=true;
				currentMethod=MyTab.insert(Obj.Meth,methName,retType);
				currentMethType=retType;
				MyTab.openScope();
				parser.report_info("Obradjuje se metoda: "+methName+" na liniji "+methNameleft,null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodDecl ::= Type IDENT NT$2 LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		 
				if(in_class) 
					  		_this = MyTab.insert(Obj.Var, "this", MyTab.noType);
				if(!returnFound && retType != MyTab.noType)
					parser.report_error("Semanticka greska na liniji: "+methNameleft+". Funkcija: "+methName+" nema return iskaz.",null);
				MyTab.chainLocalSymbols(currentMethod);
				returnFound=false;
				currentMethod=null;	
				currentMethType=null;
				MyTab.closeScope();
				in_method=false;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$2 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

				in_method=true;
				currentMethod=MyTab.insert(Obj.Meth,methName,retType);
				currentMethType=retType;
				MyTab.openScope();
				parser.report_info("Obradjuje se metoda: "+methName+" na liniji "+methNameleft,null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				   RESULT=m;
				  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AnotherList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AnotherList",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AnotherList ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AnotherList",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassDecl ::= CLASS IDENT EXTENDS IDENT NT$1 LBRACE ClassVarDeclList AnotherList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
			 	MyTab.chainLocalSymbols(currentClass.getType());
				in_class = false;
			 	MyTab.closeScope();
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$1 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

			 	
			 	currentClass=MyTab.insert(Obj.Type, name, new MyStruct(MyStruct.Class));
			 	MyTab.openScope();
			 	parser.report_info("Deklarisana klasa " + name + " na liniji " + nameleft,null);
			 	in_class = true;
			 	Obj temp=MyTab.find(tip);
			 	if(temp.equals(!temp.equals(MyStruct.Class))||temp.equals(MyTab.noObj)){
			 		parser.report_error("Greska na liniji: " + nameleft+ " . Tip iz koga se izvodi nije definisan.",null);
			 	}
			 	RESULT=currentClass;
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassDecl ::= CLASS IDENT NT$0 LBRACE ClassVarDeclList AnotherList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
			 	MyTab.chainLocalSymbols(currentClass.getType());
				in_class = false;
			 	MyTab.closeScope();
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$0 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
	
			 	currentClass= MyTab.insert(Obj.Type, name, new MyStruct(MyStruct.Class));
			 	MyTab.openScope();
			 	parser.report_info("Deklarisana klasa " + name + " na liniji " + nameleft,null);
			  	in_class = true;
			  	RESULT=currentClass;
			 
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassVarDeclList ::= ClassVarDeclList ClassVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ExtIdentList ::= IDENT LMEDBRACE RMEDBRACE 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			MyTab.insert(in_class && !in_method ? Obj.Fld : Obj.Var, name, new Struct(Struct.Array, currentType));  
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtIdentList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ExtIdentList ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			MyTab.insert(in_class && !in_method ? Obj.Fld : Obj.Var, name, currentType);  
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtIdentList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarList ::= ExtIdentList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarList ::= VarList COMMA ExtIdentList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		  		parser.report_info("Uspesan oporavak od greske na liniji " + sleft,null); 
	  	   	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDecl ::= Type VarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IdentIdentList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentIdentList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IdentIdentList ::= IdentIdentList COMMA IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					parser.report_info(" Deklarisana promenljiva "+varName+" tipa: "+currentType.getKind()+" na liniji "+varNameleft,null);
					if(MyTab.currentScope.findSymbol(varName)!=null)
						{
							parser.report_error("Greska na liniji: "+varNameleft+".Vec postoji promenljiva sa imenom: " + varName,null);
						}
					else {
						Obj temp = MyTab.insert(in_class && !in_method ? Obj.Fld : Obj.Var, varName, currentType);
						}
					
			      
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentIdentList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdentIdentList ::= IdentIdentList COMMA IDENT LMEDBRACE RMEDBRACE 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					parser.report_info(" Deklarisana promenljiva "+varName+" na liniji "+varNameleft,null);
					if(MyTab.currentScope.findSymbol(varName)!=null)
						{
							parser.report_error("Greska na liniji: "+varNameleft+".Vec postoji promenljiva sa imenom: " + varName,null);
						}
					else {
						Obj temp = MyTab.insert(in_class && !in_method ? Obj.Fld : Obj.Var, varName, MyTab.referenceType);
						}
				  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentIdentList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ClassVarDecl ::= STATIC Type IDENT IdentIdentList SEMI 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					parser.report_info(varType.getKind() + " Deklarisana promenljiva "+varName+" na liniji "+varNameleft,null);
					if(MyTab.currentScope.findSymbol(varName)!=null)
						{
							parser.report_error("Greska na liniji: "+varNameleft+".Vec postoji promenljiva sa imenom: " + varName,null);
						}
					else {
						Obj temp = MyTab.insert(in_class && !in_method ? Obj.Fld : Obj.Var, varName, varType);
						}
					
			    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ClassVarDecl ::= Type IDENT IdentIdentList SEMI 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					parser.report_info(varType.getKind() + " Deklarisana promenljiva "+varName+" na liniji "+varNameleft,null);
					if(MyTab.currentScope.findSymbol(varName)!=null)
						{
							parser.report_error("Greska na liniji: "+varNameleft+".Vec postoji promenljiva sa imenom: " + varName,null);
						}
					else {
						Obj temp = MyTab.insert(in_class && !in_method ? Obj.Fld : Obj.Var, varName, varType);
						}
					
			    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ClassVarDecl ::= Type IDENT LMEDBRACE RMEDBRACE IdentIdentList SEMI 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
					parser.report_info(varType.getKind() + " Deklarisana promenljiva "+varName+" na liniji "+varNameleft,null);
					if(MyTab.currentScope.findSymbol(varName)!=null)
						{
							parser.report_error("Greska na liniji: "+varNameleft+".Vec postoji promenljiva sa imenom: " + varName,null);
						}
					else {
						Obj temp = MyTab.insert(in_class && !in_method ? Obj.Fld : Obj.Var, varName, MyTab.referenceType);
						}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ClassVarDecl ::= STATIC Type IDENT LMEDBRACE RMEDBRACE IdentIdentList SEMI 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
					parser.report_info(varType.getKind() + " Deklarisana promenljiva "+varName+" na liniji "+varNameleft,null);
					if(MyTab.currentScope.findSymbol(varName)!=null)
						{
							parser.report_error("Greska na liniji: "+varNameleft+".Vec postoji promenljiva sa imenom: " + varName,null);
						}
					else {
						Obj temp = MyTab.insert(in_class && !in_method ? Obj.Fld : Obj.Var, varName, MyTab.referenceType);
						}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstList ::= BOOL 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = new Obj(Obj.Con, "", MyTab.boolType); 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstList ::= CHAR 
            {
              Object RESULT =null;
		int chrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int chrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character chr = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = new Obj(Obj.Con, "", MyTab.charType); 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstList ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = new Obj(Obj.Con, "", MyTab.intType);  
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IdentList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IdentList ::= IdentList COMMA IDENT EQUAL ConstList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstDecl ::= CONST error SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			  	parser.report_info("Uspesan oporavak od greske na liniji " + sleft + " pri definisanju konstante.",null); 
		  	  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ConstDecl ::= CONST Type IDENT EQUAL ConstList IdentList SEMI 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				  	if(MyTab.currentScope.findSymbol(name) != null)
				  		parser.report_error("Greska na liniji: "+nameleft+". Vec postoji identifikator sa imenom: " + name,null);
				  	else {
				  		Obj temp = MyTab.insert(Obj.Con, name, currentType);
				  		if(!o.equals(currentType))
				  			parser.report_error("Greska na liniji: " + nameleft+" . Tip koji se dodeljuje ne odgovara tipu kome se dodeljuje. ",null);
				  	}
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SomeDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SomeDeclList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SomeDeclList ::= SomeDeclList ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SomeDeclList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SomeDeclList ::= SomeDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SomeDeclList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SomeDeclList ::= SomeDeclList ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SomeDeclList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			RESULT= MyTab.insert(Obj.Prog,pName,MyTab.noType);
			
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgName SomeDeclList LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
				MyTab.openScope();
				MyTab.chainLocalSymbols(p);
				MyTab.closeScope();
				
				int array_count = 0;
				int var_count = 0;
				int con_count = 0;
				
				for(Obj s : p.getLocalSymbols())
					if(s.getKind() == Obj.Var)
						if(s.getType().getKind() == Struct.Array)
							array_count++;
						else
							var_count++;
					else if(s.getKind() == Obj.Con)
						con_count++;
									
				parser.report_info("Broj globalnih prostih promenjivih:" + var_count,null);
				parser.report_info("Broj globalnih nizova:" + array_count,null);
				parser.report_info("Broj globalnih konstanti:" + con_count,null);
				parser.report_info("Broj deklaracija promenljivih u main-u:" + mainDeclarations,null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

