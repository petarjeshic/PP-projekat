
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 15 22:00:41 CEST 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.io.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.util.MyTab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.structure.SymbolDataStructure;
import java.util.Stack;
import java.util.Collection;
import java.util.Iterator;
import java.util.HashMap;
import java.util.Map;
import rs.etf.pp1.mj.runtime.Code;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 15 22:00:41 CEST 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\222\000\002\066\002\000\002\002\011\000\002\002" +
    "\004\000\002\050\003\000\002\047\004\000\002\047\004" +
    "\000\002\047\004\000\002\047\002\000\002\016\010\000" +
    "\002\016\005\000\002\020\007\000\002\020\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\006" +
    "\005\000\002\006\004\000\002\022\005\000\002\022\003" +
    "\000\002\022\005\000\002\021\003\000\002\021\005\000" +
    "\002\067\002\000\002\023\012\000\002\015\005\000\002" +
    "\015\002\000\002\013\003\000\002\014\004\000\002\014" +
    "\004\000\002\014\002\000\002\031\004\000\002\031\002" +
    "\000\002\034\005\000\002\034\005\000\002\034\003\000" +
    "\002\034\004\000\002\055\005\000\002\055\003\000\002" +
    "\056\003\000\002\056\005\000\002\005\004\000\002\005" +
    "\002\000\002\070\002\000\002\071\002\000\002\003\015" +
    "\000\002\072\002\000\002\073\002\000\002\003\016\000" +
    "\002\004\004\000\002\004\002\000\002\035\003\000\002" +
    "\035\002\000\002\036\005\000\002\036\003\000\002\065" +
    "\006\000\002\065\004\000\002\065\007\000\002\057\003" +
    "\000\002\057\003\000\002\010\003\000\002\010\003\000" +
    "\002\074\002\000\002\033\007\000\002\046\004\000\002" +
    "\046\006\000\002\045\004\000\002\075\002\000\002\045" +
    "\010\000\002\045\006\000\002\076\002\000\002\045\014" +
    "\000\002\045\004\000\002\045\004\000\002\077\002\000" +
    "\002\045\006\000\002\045\004\000\002\045\007\000\002" +
    "\045\010\000\002\045\005\000\002\007\004\000\002\007" +
    "\002\000\002\027\003\000\002\027\002\000\002\061\004" +
    "\000\002\061\002\000\002\026\003\000\002\026\002\000" +
    "\002\024\005\000\002\024\004\000\002\024\004\000\002" +
    "\025\004\000\002\030\005\000\002\030\002\000\002\043" +
    "\004\000\002\044\005\000\002\044\002\000\002\032\005" +
    "\000\002\032\003\000\002\052\005\000\002\052\004\000" +
    "\002\052\003\000\002\053\003\000\002\053\005\000\002" +
    "\053\007\000\002\054\005\000\002\054\003\000\002\100" +
    "\002\000\002\101\002\000\002\054\010\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\102\002\000" +
    "\002\051\007\000\002\051\007\000\002\051\004\000\002" +
    "\051\005\000\002\051\003\000\002\012\003\000\002\012" +
    "\002\000\002\011\005\000\002\011\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\063\003\000\002\063" +
    "\003\000\002\037\003\000\002\037\003\000\002\040\003" +
    "\000\002\040\003\000\002\064\003\000\002\064\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\004\004\005\001\002\000\004\002\376\001" +
    "\002\000\004\067\006\001\002\000\014\005\ufffe\006\ufffe" +
    "\026\ufffe\030\ufffe\067\ufffe\001\002\000\014\005\001\006" +
    "\001\026\001\030\001\067\001\001\002\000\014\005\ufffa" +
    "\006\ufffa\026\ufffa\030\ufffa\067\ufffa\001\002\000\014\005" +
    "\015\006\013\026\021\030\022\067\014\001\002\000\006" +
    "\003\362\067\363\001\002\000\012\005\uffd8\007\uffd8\037" +
    "\uffd8\067\uffd8\001\002\000\076\003\uffc7\006\uffc7\010\uffc7" +
    "\012\uffc7\013\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\023" +
    "\uffc7\024\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053" +
    "\uffc7\054\uffc7\055\uffc7\056\uffc7\061\uffc7\062\uffc7\063\uffc7" +
    "\067\uffc7\001\002\000\076\003\uffc8\006\uffc8\010\uffc8\012" +
    "\uffc8\013\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\023\uffc8" +
    "\024\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\061\uffc8\062\uffc8\063\uffc8\067" +
    "\uffc8\001\002\000\014\005\ufffc\006\ufffc\026\ufffc\030\ufffc" +
    "\067\ufffc\001\002\000\014\005\ufffb\006\ufffb\026\ufffb\030" +
    "\ufffb\067\ufffb\001\002\000\014\005\ufffd\006\ufffd\026\ufffd" +
    "\030\ufffd\067\ufffd\001\002\000\004\067\043\001\002\000" +
    "\010\003\024\005\015\067\014\001\002\000\004\067\026" +
    "\001\002\000\004\010\025\001\002\000\014\005\ufff8\006" +
    "\ufff8\026\ufff8\030\ufff8\067\ufff8\001\002\000\004\022\027" +
    "\001\002\000\010\064\030\065\034\066\032\001\002\000" +
    "\006\010\ufff5\013\ufff5\001\002\000\006\010\ufff6\013\ufff6" +
    "\001\002\000\006\010\ufff3\013\ufff3\001\002\000\006\010" +
    "\036\013\035\001\002\000\006\010\ufff4\013\ufff4\001\002" +
    "\000\004\067\037\001\002\000\014\005\ufff9\006\ufff9\026" +
    "\ufff9\030\ufff9\067\ufff9\001\002\000\004\022\040\001\002" +
    "\000\010\064\030\065\034\066\032\001\002\000\006\010" +
    "\ufff7\013\ufff7\001\002\000\006\006\uffe4\035\044\001\002" +
    "\000\006\006\uffe7\035\uffe7\001\002\000\010\003\357\005" +
    "\015\067\014\001\002\000\004\006\uffeb\001\002\000\004" +
    "\006\047\001\002\000\014\003\uffe2\005\uffe2\006\uffe2\007" +
    "\uffe2\067\uffe2\001\002\000\014\003\053\005\015\006\051" +
    "\007\uffe8\067\014\001\002\000\012\005\uffd8\007\uffd8\037" +
    "\uffd8\067\uffd8\001\002\000\006\003\060\067\062\001\002" +
    "\000\014\003\uffdf\005\uffdf\006\uffdf\007\uffdf\067\uffdf\001" +
    "\002\000\014\003\uffe3\005\uffe3\006\uffe3\007\uffe3\067\uffe3" +
    "\001\002\000\004\007\056\001\002\000\014\005\uffea\006" +
    "\uffea\026\uffea\030\uffea\067\uffea\001\002\000\006\010\uffdc" +
    "\013\uffdc\001\002\000\016\003\uffde\005\uffde\006\uffde\007" +
    "\uffde\010\070\067\uffde\001\002\000\006\010\066\013\065" +
    "\001\002\000\010\010\uffdb\013\uffdb\017\063\001\002\000" +
    "\004\020\064\001\002\000\006\010\uffda\013\uffda\001\002" +
    "\000\004\067\062\001\002\000\014\003\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\067\uffe1\001\002\000\006\010\uffdd\013\uffdd" +
    "\001\002\000\014\003\uffe0\005\uffe0\006\uffe0\007\uffe0\067" +
    "\uffe0\001\002\000\012\005\015\007\074\037\073\067\014" +
    "\001\002\000\004\067\344\001\002\000\006\005\015\067" +
    "\014\001\002\000\004\007\uffe9\001\002\000\012\005\uffd9" +
    "\007\uffd9\037\uffd9\067\uffd9\001\002\000\004\067\077\001" +
    "\002\000\004\011\uffd4\001\002\000\004\011\101\001\002" +
    "\000\010\005\015\012\uffce\067\014\001\002\000\004\012" +
    "\117\001\002\000\006\021\111\067\110\001\002\000\004" +
    "\012\uffcf\001\002\000\006\012\uffcc\013\106\001\002\000" +
    "\006\005\015\067\014\001\002\000\004\012\uffcd\001\002" +
    "\000\010\012\uffca\013\uffca\017\115\001\002\000\004\021" +
    "\112\001\002\000\004\021\113\001\002\000\004\067\114" +
    "\001\002\000\006\012\uffc9\013\uffc9\001\002\000\004\020" +
    "\116\001\002\000\006\012\uffcb\013\uffcb\001\002\000\010" +
    "\005\uffd0\006\uffd0\067\uffd0\001\002\000\010\005\015\006" +
    "\121\067\014\001\002\000\026\006\uffd3\007\uffd3\014\uffd3" +
    "\015\uffd3\025\uffd3\031\uffd3\033\uffd3\034\uffd3\036\uffd3\067" +
    "\uffd3\001\002\000\010\005\uffd1\006\uffd1\067\uffd1\001\002" +
    "\000\026\006\uffb1\007\uffb1\014\uffb1\015\uffb1\025\uffb1\031" +
    "\uffb1\033\uffb1\034\uffb1\036\uffb1\067\uffb1\001\002\000\026" +
    "\006\126\007\143\014\137\015\142\025\144\031\134\033" +
    "\125\034\131\036\141\067\127\001\002\000\004\011\340" +
    "\001\002\000\026\006\uffb1\007\uffb1\014\uffb1\015\uffb1\025" +
    "\uffb1\031\uffb1\033\uffb1\034\uffb1\036\uffb1\067\uffb1\001\002" +
    "\000\100\010\uff98\011\uff98\012\uff98\013\uff98\016\uff98\017" +
    "\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\040\uff98" +
    "\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047" +
    "\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98" +
    "\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063\uff98\001" +
    "\002\000\024\006\126\014\137\015\142\025\144\031\134" +
    "\033\125\034\131\036\141\067\127\001\002\000\004\011" +
    "\312\001\002\000\030\011\uffbf\017\212\021\214\022\302" +
    "\052\202\053\200\054\204\055\167\056\173\057\277\060" +
    "\303\001\002\000\026\006\uffc5\007\uffc5\014\uffc5\015\uffc5" +
    "\025\uffc5\031\uffc5\033\uffc5\034\uffc5\036\uffc5\067\uffc5\001" +
    "\002\000\004\011\251\001\002\000\026\006\uffb2\007\uffb2" +
    "\014\uffb2\015\uffb2\025\uffb2\031\uffb2\033\uffb2\034\uffb2\036" +
    "\uffb2\067\uffb2\001\002\000\004\010\250\001\002\000\004" +
    "\011\241\001\002\000\026\006\uffc6\007\uffc6\014\uffc6\015" +
    "\uffc6\025\uffc6\031\uffc6\033\uffc6\034\uffc6\036\uffc6\067\uffc6" +
    "\001\002\000\004\010\240\001\002\000\022\010\154\011" +
    "\157\032\151\040\146\064\153\065\160\066\150\067\127" +
    "\001\002\000\012\005\uffd2\007\uffd2\037\uffd2\067\uffd2\001" +
    "\002\000\004\010\145\001\002\000\030\006\uffba\007\uffba" +
    "\014\uffba\015\uffba\025\uffba\027\uffba\031\uffba\033\uffba\034" +
    "\uffba\036\uffba\067\uffba\001\002\000\016\011\157\032\151" +
    "\064\153\065\160\066\150\067\127\001\002\000\004\010" +
    "\uffb8\001\002\000\064\010\uff92\012\uff92\013\uff92\016\uff92" +
    "\020\uff92\023\uff92\024\uff92\040\uff92\041\uff92\042\uff92\043" +
    "\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92" +
    "\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92\061\uff92\062" +
    "\uff92\063\uff92\001\002\000\006\005\015\067\014\001\002" +
    "\000\072\010\uff8c\011\uff91\012\uff8c\013\uff8c\016\uff8c\017" +
    "\212\020\uff8c\021\214\023\uff8c\024\uff8c\040\uff8c\041\uff8c" +
    "\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050" +
    "\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c" +
    "\061\uff8c\062\uff8c\063\uff8c\001\002\000\064\010\uff94\012" +
    "\uff94\013\uff94\016\uff94\020\uff94\023\uff94\024\uff94\040\uff94" +
    "\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047" +
    "\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94" +
    "\056\uff94\061\uff94\062\uff94\063\uff94\001\002\000\030\006" +
    "\uffb6\007\uffb6\014\uffb6\015\uffb6\025\uffb6\027\uffb6\031\uffb6" +
    "\033\uffb6\034\uffb6\036\uffb6\067\uffb6\001\002\000\062\010" +
    "\uff9d\012\uff9d\013\uff9d\016\164\020\uff9d\023\uff9d\024\uff9d" +
    "\040\174\041\177\042\170\043\176\044\uff9d\045\uff9d\046" +
    "\uff9d\047\uff9d\050\uff9d\051\uff9d\052\202\053\200\054\204" +
    "\055\167\056\173\061\166\063\172\001\002\000\062\010" +
    "\uff9c\012\uff9c\013\uff9c\016\uff9c\020\uff9c\023\uff9c\024\uff9c" +
    "\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046" +
    "\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c" +
    "\055\uff9c\056\uff9c\061\uff9c\063\uff9c\001\002\000\020\011" +
    "\157\032\151\040\146\064\153\065\160\066\150\067\127" +
    "\001\002\000\064\010\uff93\012\uff93\013\uff93\016\uff93\020" +
    "\uff93\023\uff93\024\uff93\040\uff93\041\uff93\042\uff93\043\uff93" +
    "\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93\052" +
    "\uff93\053\uff93\054\uff93\055\uff93\056\uff93\061\uff93\062\uff93" +
    "\063\uff93\001\002\000\004\012\162\001\002\000\064\010" +
    "\uff8d\012\uff8d\013\uff8d\016\uff8d\020\uff8d\023\uff8d\024\uff8d" +
    "\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046" +
    "\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d" +
    "\055\uff8d\056\uff8d\061\uff8d\062\uff8d\063\uff8d\001\002\000" +
    "\016\011\157\032\151\064\153\065\160\066\150\067\127" +
    "\001\002\000\016\011\uff7c\032\uff7c\064\uff7c\065\uff7c\066" +
    "\uff7c\067\uff7c\001\002\000\016\011\uff78\032\uff78\064\uff78" +
    "\065\uff78\066\uff78\067\uff78\001\002\000\016\011\uff73\032" +
    "\uff73\064\uff73\065\uff73\066\uff73\067\uff73\001\002\000\020" +
    "\011\uff71\032\uff71\040\uff71\064\uff71\065\uff71\066\uff71\067" +
    "\uff71\001\002\000\016\011\uff75\032\uff75\064\uff75\065\uff75" +
    "\066\uff75\067\uff75\001\002\000\016\011\uff7e\032\uff7e\064" +
    "\uff7e\065\uff7e\066\uff7e\067\uff7e\001\002\000\016\011\157" +
    "\032\151\064\153\065\160\066\150\067\127\001\002\000" +
    "\020\011\uff70\032\uff70\040\uff70\064\uff70\065\uff70\066\uff70" +
    "\067\uff70\001\002\000\016\011\uff7b\032\uff7b\064\uff7b\065" +
    "\uff7b\066\uff7b\067\uff7b\001\002\000\016\011\157\032\151" +
    "\064\153\065\160\066\150\067\127\001\002\000\016\011" +
    "\uff74\032\uff74\064\uff74\065\uff74\066\uff74\067\uff74\001\002" +
    "\000\016\011\uff76\032\uff76\064\uff76\065\uff76\066\uff76\067" +
    "\uff76\001\002\000\020\011\uff79\032\uff79\040\uff79\064\uff79" +
    "\065\uff79\066\uff79\067\uff79\001\002\000\016\011\uff7d\032" +
    "\uff7d\064\uff7d\065\uff7d\066\uff7d\067\uff7d\001\002\000\020" +
    "\011\uff7a\032\uff7a\040\uff7a\064\uff7a\065\uff7a\066\uff7a\067" +
    "\uff7a\001\002\000\016\011\uff77\032\uff77\064\uff77\065\uff77" +
    "\066\uff77\067\uff77\001\002\000\020\011\uff72\032\uff72\040" +
    "\uff72\064\uff72\065\uff72\066\uff72\067\uff72\001\002\000\052" +
    "\010\uff9f\012\uff9f\013\uff9f\020\uff9f\023\uff9f\024\uff9f\041" +
    "\177\042\170\043\176\044\uff9f\045\uff9f\046\uff9f\047\uff9f" +
    "\050\uff9f\051\uff9f\054\204\055\167\056\173\061\166\063" +
    "\172\001\002\000\004\062\207\001\002\000\016\011\157" +
    "\032\151\064\153\065\160\066\150\067\127\001\002\000" +
    "\062\010\uff9a\012\uff9a\013\uff9a\016\uff9a\020\uff9a\023\uff9a" +
    "\024\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045" +
    "\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a" +
    "\054\uff9a\055\uff9a\056\uff9a\061\uff9a\063\uff9a\001\002\000" +
    "\062\010\uff9b\012\uff9b\013\uff9b\016\uff9b\020\uff9b\023\uff9b" +
    "\024\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045" +
    "\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\055\uff9b\056\uff9b\061\uff9b\063\uff9b\001\002\000" +
    "\020\011\uff97\032\uff97\040\uff97\064\uff97\065\uff97\066\uff97" +
    "\067\uff97\001\002\000\004\011\216\001\002\000\004\067" +
    "\215\001\002\000\100\010\uff99\011\uff99\012\uff99\013\uff99" +
    "\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024" +
    "\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99" +
    "\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054" +
    "\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062\uff99" +
    "\063\uff99\001\002\000\022\011\157\012\uff8a\032\151\040" +
    "\146\064\153\065\160\066\150\067\127\001\002\000\004" +
    "\012\224\001\002\000\006\012\uff88\013\uff88\001\002\000" +
    "\006\012\uff8b\013\222\001\002\000\020\011\157\032\151" +
    "\040\146\064\153\065\160\066\150\067\127\001\002\000" +
    "\006\012\uff89\013\uff89\001\002\000\064\010\uff90\012\uff90" +
    "\013\uff90\016\uff90\020\uff90\023\uff90\024\uff90\040\uff90\041" +
    "\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90" +
    "\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056" +
    "\uff90\061\uff90\062\uff90\063\uff90\001\002\000\020\011\157" +
    "\032\151\040\146\064\153\065\160\066\150\067\127\001" +
    "\002\000\004\020\uff96\001\002\000\004\020\230\001\002" +
    "\000\100\010\uff95\011\uff95\012\uff95\013\uff95\016\uff95\017" +
    "\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95\040\uff95" +
    "\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047" +
    "\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95" +
    "\056\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95\001" +
    "\002\000\066\010\uff8e\012\uff8e\013\uff8e\016\uff8e\017\232" +
    "\020\uff8e\023\uff8e\024\uff8e\040\uff8e\041\uff8e\042\uff8e\043" +
    "\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e" +
    "\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\061\uff8e\062" +
    "\uff8e\063\uff8e\001\002\000\020\011\157\032\151\040\146" +
    "\064\153\065\160\066\150\067\127\001\002\000\004\020" +
    "\234\001\002\000\064\010\uff8f\012\uff8f\013\uff8f\016\uff8f" +
    "\020\uff8f\023\uff8f\024\uff8f\040\uff8f\041\uff8f\042\uff8f\043" +
    "\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f" +
    "\052\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\061\uff8f\062" +
    "\uff8f\063\uff8f\001\002\000\004\010\236\001\002\000\030" +
    "\006\uffb7\007\uffb7\014\uffb7\015\uffb7\025\uffb7\027\uffb7\031" +
    "\uffb7\033\uffb7\034\uffb7\036\uffb7\067\uffb7\001\002\000\052" +
    "\010\uff9e\012\uff9e\013\uff9e\020\uff9e\023\uff9e\024\uff9e\041" +
    "\177\042\170\043\176\044\uff9e\045\uff9e\046\uff9e\047\uff9e" +
    "\050\uff9e\051\uff9e\054\204\055\167\056\173\061\166\063" +
    "\172\001\002\000\030\006\uffb9\007\uffb9\014\uffb9\015\uffb9" +
    "\025\uffb9\027\uffb9\031\uffb9\033\uffb9\034\uffb9\036\uffb9\067" +
    "\uffb9\001\002\000\020\011\157\032\151\040\146\064\153" +
    "\065\160\066\150\067\127\001\002\000\006\012\uffad\013" +
    "\243\001\002\000\004\064\247\001\002\000\004\012\245" +
    "\001\002\000\004\010\246\001\002\000\030\006\uffb4\007" +
    "\uffb4\014\uffb4\015\uffb4\025\uffb4\027\uffb4\031\uffb4\033\uffb4" +
    "\034\uffb4\036\uffb4\067\uffb4\001\002\000\004\012\uffae\001" +
    "\002\000\030\006\uffc0\007\uffc0\014\uffc0\015\uffc0\025\uffc0" +
    "\027\uffc0\031\uffc0\033\uffc0\034\uffc0\036\uffc0\067\uffc0\001" +
    "\002\000\020\011\157\032\151\040\146\064\153\065\160" +
    "\066\150\067\127\001\002\000\026\010\uffa0\012\uffa0\023" +
    "\266\024\267\044\274\045\272\046\271\047\270\050\uffa0" +
    "\051\uffa0\001\002\000\004\012\uffc4\001\002\000\012\010" +
    "\uffa2\012\uffa2\050\uffa2\051\uffa2\001\002\000\010\010\uffa5" +
    "\012\uffa5\051\uffa5\001\002\000\010\010\uffa7\012\uffa7\051" +
    "\257\001\002\000\020\011\157\032\151\040\146\064\153" +
    "\065\160\066\150\067\127\001\002\000\010\010\uffa6\012" +
    "\uffa6\051\uffa6\001\002\000\012\010\uffa4\012\uffa4\050\262" +
    "\051\uffa4\001\002\000\020\011\157\032\151\040\146\064" +
    "\153\065\160\066\150\067\127\001\002\000\012\010\uffa3" +
    "\012\uffa3\050\uffa3\051\uffa3\001\002\000\004\012\265\001" +
    "\002\000\024\006\uffc3\014\uffc3\015\uffc3\025\uffc3\031\uffc3" +
    "\033\uffc3\034\uffc3\036\uffc3\067\uffc3\001\002\000\020\011" +
    "\uff82\032\uff82\040\uff82\064\uff82\065\uff82\066\uff82\067\uff82" +
    "\001\002\000\020\011\uff80\032\uff80\040\uff80\064\uff80\065" +
    "\uff80\066\uff80\067\uff80\001\002\000\020\011\uff7f\032\uff7f" +
    "\040\uff7f\064\uff7f\065\uff7f\066\uff7f\067\uff7f\001\002\000" +
    "\020\011\uff81\032\uff81\040\uff81\064\uff81\065\uff81\066\uff81" +
    "\067\uff81\001\002\000\020\011\uff83\032\uff83\040\uff83\064" +
    "\uff83\065\uff83\066\uff83\067\uff83\001\002\000\020\011\157" +
    "\032\151\040\146\064\153\065\160\066\150\067\127\001" +
    "\002\000\020\011\uff84\032\uff84\040\uff84\064\uff84\065\uff84" +
    "\066\uff84\067\uff84\001\002\000\012\010\uffa1\012\uffa1\050" +
    "\uffa1\051\uffa1\001\002\000\020\011\uff85\032\uff85\040\uff85" +
    "\064\uff85\065\uff85\066\uff85\067\uff85\001\002\000\006\010" +
    "\uffa9\012\uffa9\001\002\000\020\011\uff86\032\uff86\040\uff86" +
    "\064\uff86\065\uff86\066\uff86\067\uff86\001\002\000\020\011" +
    "\157\032\151\040\146\064\153\065\160\066\150\067\127" +
    "\001\002\000\020\011\uff87\032\uff87\040\uff87\064\uff87\065" +
    "\uff87\066\uff87\067\uff87\001\002\000\006\010\uffa8\012\uffa8" +
    "\001\002\000\004\011\305\001\002\000\022\011\157\012" +
    "\uff8a\032\151\040\146\064\153\065\160\066\150\067\127" +
    "\001\002\000\004\012\307\001\002\000\004\010\310\001" +
    "\002\000\030\006\uffbe\007\uffbe\014\uffbe\015\uffbe\025\uffbe" +
    "\027\uffbe\031\uffbe\033\uffbe\034\uffbe\036\uffbe\067\uffbe\001" +
    "\002\000\006\010\uffaa\012\uffaa\001\002\000\006\010\uffab" +
    "\067\127\001\002\000\026\017\212\021\214\022\302\052" +
    "\202\053\200\054\204\055\167\056\173\057\277\060\303" +
    "\001\002\000\006\010\uffac\012\uffac\001\002\000\004\010" +
    "\316\001\002\000\022\010\uffaf\011\157\032\151\040\146" +
    "\064\153\065\160\066\150\067\127\001\002\000\004\010" +
    "\321\001\002\000\004\010\uffb0\001\002\000\006\012\uffab" +
    "\067\127\001\002\000\004\012\323\001\002\000\024\006" +
    "\uffbc\014\uffbc\015\uffbc\025\uffbc\031\uffbc\033\uffbc\034\uffbc" +
    "\036\uffbc\067\uffbc\001\002\000\024\006\126\014\137\015" +
    "\142\025\144\031\134\033\125\034\131\036\141\067\127" +
    "\001\002\000\024\006\126\014\137\015\142\025\144\031" +
    "\134\033\125\034\131\036\141\067\127\001\002\000\030" +
    "\006\uffbb\007\uffbb\014\uffbb\015\uffbb\025\uffbb\027\uffbb\031" +
    "\uffbb\033\uffbb\034\uffbb\036\uffbb\067\uffbb\001\002\000\004" +
    "\027\330\001\002\000\024\006\126\014\137\015\142\025" +
    "\144\031\134\033\125\034\131\036\141\067\127\001\002" +
    "\000\030\006\uffbd\007\uffbd\014\uffbd\015\uffbd\025\uffbd\027" +
    "\uffbd\031\uffbd\033\uffbd\034\uffbd\036\uffbd\067\uffbd\001\002" +
    "\000\026\006\uffc2\007\uffc2\014\uffc2\015\uffc2\025\uffc2\031" +
    "\uffc2\033\uffc2\034\uffc2\036\uffc2\067\uffc2\001\002\000\030" +
    "\006\uffc6\007\uffc6\014\uffc6\015\uffc6\025\uffc6\027\334\031" +
    "\uffc6\033\uffc6\034\uffc6\036\uffc6\067\uffc6\001\002\000\024" +
    "\006\126\014\137\015\142\025\144\031\134\033\125\034" +
    "\131\036\141\067\127\001\002\000\026\006\uffc1\007\uffc1" +
    "\014\uffc1\015\uffc1\025\uffc1\031\uffc1\033\uffc1\034\uffc1\036" +
    "\uffc1\067\uffc1\001\002\000\026\006\126\007\337\014\137" +
    "\015\142\025\144\031\134\033\125\034\131\036\141\067" +
    "\127\001\002\000\030\006\uffb3\007\uffb3\014\uffb3\015\uffb3" +
    "\025\uffb3\027\uffb3\031\uffb3\033\uffb3\034\uffb3\036\uffb3\067" +
    "\uffb3\001\002\000\004\067\127\001\002\000\010\012\342" +
    "\017\212\021\214\001\002\000\004\010\343\001\002\000" +
    "\030\006\uffb5\007\uffb5\014\uffb5\015\uffb5\025\uffb5\027\uffb5" +
    "\031\uffb5\033\uffb5\034\uffb5\036\uffb5\067\uffb5\001\002\000" +
    "\004\011\uffd7\001\002\000\004\011\346\001\002\000\010" +
    "\005\015\012\uffce\067\014\001\002\000\004\012\350\001" +
    "\002\000\010\005\uffd0\006\uffd0\067\uffd0\001\002\000\010" +
    "\005\015\006\352\067\014\001\002\000\026\006\uffd6\007" +
    "\uffd6\014\uffd6\015\uffd6\025\uffd6\031\uffd6\033\uffd6\034\uffd6" +
    "\036\uffd6\067\uffd6\001\002\000\026\006\uffb1\007\uffb1\014" +
    "\uffb1\015\uffb1\025\uffb1\031\uffb1\033\uffb1\034\uffb1\036\uffb1" +
    "\067\uffb1\001\002\000\026\006\126\007\355\014\137\015" +
    "\142\025\144\031\134\033\125\034\131\036\141\067\127" +
    "\001\002\000\012\005\uffd5\007\uffd5\037\uffd5\067\uffd5\001" +
    "\002\000\004\006\uffe6\001\002\000\004\006\uffe5\001\002" +
    "\000\012\005\015\007\361\037\073\067\014\001\002\000" +
    "\004\002\000\001\002\000\016\005\ufff1\006\ufff1\013\371" +
    "\026\ufff1\030\ufff1\067\ufff1\001\002\000\010\010\uffed\013" +
    "\uffed\017\374\001\002\000\004\010\373\001\002\000\006" +
    "\010\uffef\013\366\001\002\000\006\003\367\067\363\001" +
    "\002\000\004\013\371\001\002\000\004\010\ufff0\001\002" +
    "\000\006\003\367\067\363\001\002\000\004\010\uffee\001" +
    "\002\000\014\005\ufff2\006\ufff2\026\ufff2\030\ufff2\067\ufff2" +
    "\001\002\000\004\020\375\001\002\000\006\010\uffec\013" +
    "\uffec\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\050\006\001\001\000\002\001\001\000\004\066\007" +
    "\001\001\000\004\047\010\001\001\000\012\006\015\016" +
    "\017\023\016\057\011\001\001\000\006\021\364\022\363" +
    "\001\001\000\004\005\357\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\041\001\001\000\004\057\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\030\020\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\040\001\001\000\002" +
    "\001\001\000\004\014\044\001\001\000\002\001\001\000" +
    "\004\057\355\001\001\000\004\067\045\001\001\000\002" +
    "\001\001\000\004\031\047\001\001\000\010\015\054\034" +
    "\053\057\051\001\001\000\004\005\070\001\001\000\006" +
    "\055\060\056\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\074\057\071\001\001\000\002\001\001\000\004" +
    "\057\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\072\077\001\001\000\002\001\001" +
    "\000\012\035\101\036\103\057\102\065\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\036\106\057\102\065\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\117\001\001\000\006" +
    "\006\121\057\011\001\001\000\004\073\122\001\001\000" +
    "\002\001\001\000\004\007\123\001\001\000\016\010\134" +
    "\024\135\033\127\045\137\046\132\054\131\001\001\000" +
    "\002\001\001\000\004\007\335\001\001\000\002\001\001" +
    "\000\016\010\331\024\135\033\127\045\332\046\132\054" +
    "\131\001\001\000\002\001\001\000\012\040\277\041\275" +
    "\060\300\075\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\051\155\052" +
    "\146\053\154\054\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\051\155\053\236\054" +
    "\151\001\001\000\004\077\234\001\001\000\002\001\001" +
    "\000\004\057\230\001\001\000\004\102\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\037\170\040\200" +
    "\041\202\042\164\063\174\064\162\001\001\000\002\001" +
    "\001\000\012\051\155\052\160\053\154\054\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\051\210\054\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\051\205\054\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\051\155\053" +
    "\204\054\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\041\202\042\164" +
    "\064\162\001\001\000\002\001\001\000\006\051\207\054" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\100\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\011\220\012\216\051\155\052\217" +
    "\053\154\054\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\051\155\052\222\053\154" +
    "\054\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\051\155\052\225\053\154\054\151\001\001\000\004" +
    "\101\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\051\155\052\232\053\154\054\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\041\202\042\164\064\162" +
    "\001\001\000\002\001\001\000\012\051\155\052\241\053" +
    "\154\054\151\001\001\000\004\061\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\025\252" +
    "\032\253\043\254\051\155\052\251\053\154\054\151\001" +
    "\001\000\004\062\272\001\001\000\004\074\263\001\001" +
    "\000\004\044\260\001\001\000\004\030\255\001\001\000" +
    "\002\001\001\000\016\032\253\043\257\051\155\052\251" +
    "\053\154\054\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\032\262\051\155\052\251\053\154\054\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\051\155\052" +
    "\274\053\154\054\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\051\155\052\310\053\154\054\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\011\220\012\305\051\155\052\217\053\154\054\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\313\026\314\054\312" +
    "\001\001\000\010\040\277\041\275\060\300\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\025\317\027\316" +
    "\032\253\043\254\051\155\052\251\053\154\054\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\024\313" +
    "\026\321\054\312\001\001\000\002\001\001\000\004\076" +
    "\323\001\001\000\012\024\135\033\324\045\325\054\131" +
    "\001\001\000\012\024\135\033\324\045\326\054\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\135" +
    "\033\324\045\330\054\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\024\135\033\127" +
    "\045\330\046\334\054\131\001\001\000\002\001\001\000" +
    "\016\010\134\024\135\033\127\045\137\046\132\054\131" +
    "\001\001\000\002\001\001\000\004\054\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\070\344\001\001\000\002\001\001\000\012\035\346\036" +
    "\103\057\102\065\104\001\001\000\002\001\001\000\004" +
    "\004\350\001\001\000\006\006\121\057\011\001\001\000" +
    "\004\071\352\001\001\000\004\007\353\001\001\000\016" +
    "\010\134\024\135\033\127\045\137\046\132\054\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\074\057\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\364\022\367\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\364\022\371\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	MyTab.init(); 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s=this.getScanner().next_token();
	if(s!=null && s.value!=null)
		log.info(s.toString()+" "+s.value.toString());
	return s;

    }


	
	boolean errorDetected=false;
	Logger log=Logger.getLogger(getClass());
	public void report_fatal_error(String message,Object info)throws java.lang.Exception{
		done_parsing();
		report_error(message,info);
	}
	public void syntax_error(Symbol cur_token){
		report_error("\nSintaksna greska",cur_token);
	}
	public void unrecovered_syntax_error(Symbol cur_token)throws java.lang.Exception{
		report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti",cur_token);
	}
	public void report_error(String message,Object info){
		errorDetected=true;
		StringBuilder msg=new StringBuilder(message);
		if(info instanceof Symbol)
			msg.append(" na liniji ").append(((Symbol)info).left);
		log.error(msg.toString());
	}
	public void report_info(String message,Object info){
		StringBuilder msg=new StringBuilder(message);
		if(info instanceof Symbol)
			msg.append(" na liniji ").append(((Symbol)info).left);
		log.info(msg.toString());
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	Obj currentMethod = null;
	Obj _this;
	Obj currentClass;
	
	Struct currentType, currentMethType;
	Struct varType = null;
	Struct newClass=null;
	
	boolean main=false;
	boolean returnFound=false;
	boolean in_class = false; 
	boolean in_method = false;
	boolean in_for=false;
	boolean left=false;
	boolean ok=true;
	
	int printCallCount;
	int array_count = 0;	
	int var_count = 0;
	int con_count = 0;
	int const_value=0;
	int mainDeclarations = 0;
	int formParsNum=0;
	
	
	Map<String, Obj> redefiningMap = new HashMap<String, Obj>(); 
	SymbolDataStructure extendsSymbols = null;
	
	Scope globalScope = null;
	Scope functionScope=null;
	Scope classScope=null;
	int global_scope=0;
	
	Stack<Obj> callingStack = new Stack<Obj>();
	Stack<Integer> actParsStack = new Stack<Integer>();
			

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // MulopRight ::= MODEQ 
            {
              Object RESULT =null;
		RESULT=Code.rem; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // MulopRight ::= DIVEQ 
            {
              Object RESULT =null;
		RESULT=Code.div; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // MulopRight ::= MULEQ 
            {
              Object RESULT =null;
		RESULT=Code.mul; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // MulopLeft ::= DOLAR 
            {
              Object RESULT =null;
		RESULT=1; left=true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // MulopLeft ::= MODI 
            {
              Object RESULT =null;
		RESULT=Code.rem; left=true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // MulopLeft ::= DIVI 
            {
              Object RESULT =null;
		RESULT=Code.div; left=true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // MulopLeft ::= MULI 
            {
              Object RESULT =null;
		RESULT=Code.mul; left=true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Mulop ::= MulopRight 
            {
              Integer RESULT =null;
		int mrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object mr = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT=(Integer)mr; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Mulop ::= MulopLeft 
            {
              Integer RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object ml = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT=(Integer)ml; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // AddopRight ::= MINUSEQ 
            {
              Object RESULT =null;
		RESULT=Code.sub; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // AddopRight ::= PLUSEQ 
            {
              Object RESULT =null;
		RESULT=Code.add; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // AddopLeft ::= MINUS 
            {
              Object RESULT =null;
		RESULT=Code.sub; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // AddopLeft ::= PLUS 
            {
              Object RESULT =null;
		RESULT=Code.add; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Addop ::= AddopRight 
            {
              Integer RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT=(Integer)ar; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Addop ::= AddopLeft 
            {
              Integer RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT=(Integer)al; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Relop ::= LOWEQ 
            {
              Integer RESULT =null;
		RESULT=Code.le; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Relop ::= LOWER 
            {
              Integer RESULT =null;
		RESULT=Code.lt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Relop ::= GREATEQ 
            {
              Integer RESULT =null;
		RESULT=Code.ge; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Relop ::= GREATER 
            {
              Integer RESULT =null;
		RESULT=Code.gt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Relop ::= NOTEQ 
            {
              Integer RESULT =null;
		RESULT=Code.ne; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Relop ::= EQEQ 
            {
              Integer RESULT =null;
		RESULT=Code.eq; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Assignop ::= MulopRight 
            {
              Integer RESULT =null;
		int mrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object mr = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		RESULT=(Integer)mr; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Assignop ::= AddopRight 
            {
              Integer RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		RESULT=(Integer)ar; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Assignop ::= EQUAL 
            {
              Integer RESULT =null;
		RESULT=new Integer(Code.eq); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ActPars ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		    	int ap = actParsStack.pop();
				ap++;
				actParsStack.push(ap);
				if(!callingStack.isEmpty() && callingStack.peek().getKind() == Obj.Meth) {
					if(actParsStack.peek() > callingStack.peek().getLevel()) {
						parser.report_error("Semanticka greska na liniji " + eleft + ": broj formalnih i stvarnih parametara funkcije mora biti isti!", null);
					}	
				}		
		    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ActPars ::= ActPars COMMA Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		    	int ap = actParsStack.pop();
				ap++;
				actParsStack.push(ap);
				if(!callingStack.isEmpty() && callingStack.peek().getKind() == Obj.Meth) {
					if(actParsStack.peek() > callingStack.peek().getLevel()) {
						parser.report_error("Semanticka greska na liniji " + eleft + ": broj formalnih i stvarnih parametara funkcije mora biti isti!", null);
					}	
				}		
		    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ActualPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ActualPars ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Factor ::= Designator 
            {
              Obj RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	Code.load(d);
		 	RESULT=d;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Factor ::= LPAREN Expr RPAREN 
            {
              Obj RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		 	RESULT=t;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Factor ::= NEW Type 
            {
              Obj RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		  	Obj obj=new Obj(Obj.Var, "t", t);
		  	RESULT = obj;
		  	if(t.getKind() != Struct.Class) {
			   		parser.report_error("Semanticka greska na liniji " + tleft + ": Tip mora biti klasa!", null);
			   		RESULT = MyTab.noObj;
			}
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Factor ::= NEW Type LMEDBRACE Expr RMEDBRACE 
            {
              Obj RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		 	Struct arrayType = new Struct(Struct.Array);
			arrayType.setElementType(t);
			Obj obj=new Obj(Obj.Var, "t", arrayType);
		 	RESULT =obj;
		 	if(e.getType().getKind()!=Struct.Int){
		 	parser.report_error("Greska na liniji: "+eleft+". Tip promenljive u nizu mora biti Int.",null);
		 	RESULT=MyTab.noObj;
		 	}
		 	else{
		 			Code.put(Code.newarray);
				   	
				   	if(t.getKind() == Struct.Char)
				   		Code.put(0);
				   	else
				   		Code.put(1);
		 	}
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Factor ::= Designator NT$12 LPAREN ActualPars RPAREN 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			
			if(Obj.Meth == func.getKind()) {
				parser.report_info("Pronadjen poziv funkcije "+func.getName()+" na liniji: "+funcleft,null);
				int formalPars = func.getLevel();
				if(formalPars > actParsStack.peek()) {
					parser.report_error("Semanticka greska na liniji " + funcleft + ": broj stvarnih i formalnih parametara mora biti isti!", null);
					RESULT=MyTab.noObj;
				}
				else {
					int destAdr = func.getAdr() - Code.pc;
					Code.put(Code.call);
					Code.put2(destAdr);
				}
			}
			else {
				parser.report_error("Greska na liniji: "+funcleft+" ime: "+func.getName()+" nije funkcija.",null);
				RESULT=MyTab.noObj;
			}
			actParsStack.pop();
			callingStack.pop();
			RESULT = func;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$12 ::= 
            {
              Obj RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

		 	callingStack.push(func);
			actParsStack.push(0);
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$12",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Factor ::= BOOL 
            {
              Obj RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			
		 	Obj c = new Obj(Obj.Con, "", MyTab.boolType);
		   	if(b==true)
		   		c.setAdr(1);
		   	else 
		   		c.setAdr(0);
		   	Code.load(c);
		 	RESULT=c;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Factor ::= CHAR 
            {
              Obj RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		 	Obj c = new Obj(Obj.Con, "", MyTab.charType);
		   	c.setAdr(ch);
		   	Code.load(c);
		 	RESULT=c;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Factor ::= NUMBER 
            {
              Obj RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
		 	 Obj c=new Obj(Obj.Con,"",MyTab.intType);
		 	 c.setAdr(n.intValue());
		 	 Code.load(c);
			 RESULT=c;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Designator ::= Designator LMEDBRACE NT$10 Expr NT$11 RMEDBRACE 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			   	RESULT = new Obj(Obj.Elem, "elem", o.getType().getElemType());
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$11 ::= 
            {
              Obj RESULT =(Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

			   	if(e.getType().getKind()!=Struct.Int) {
				  		parser.report_error("Semanticka greska na liniji " + eleft + " izraz u uglastim zagradama mora biti tipa int!", null);
				  		RESULT=MyTab.noObj;
				  	}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$10 ::= 
            {
              Obj RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

			   	   	Obj ime=MyTab.find(o.getName());
			   	   	if(ime==MyTab.noObj)
			   	   	{
			   	   		parser.report_error("Greska na liniji "  + oleft + ":niz nije deklarisan.",null);
			   	   		RESULT=MyTab.noObj;
			   	   	}
			   	    if (o.getType().getKind()==Struct.Array) { 
				   		RESULT = new Obj(Obj.Elem, "", o.getType().getElemType());
				   		Code.load(o);
				   		if(MyTab.currentScope() == functionScope) {
			   					if( functionScope.findSymbol(o.getName()) != null ) {
			   						parser.report_info("Koriscenje lokalnog niza " + o.getName() + " na liniji " + oleft, null);
			   					}
			   					else {
			   						parser.report_info("Koriscenje globalnog niza " + o.getName() + " na liniji " + oleft, null);
			   					}
			   				}
			   		} else {
			   			parser.report_error("Greska na liniji "  + oleft + ":tip nije niz",null);
			   			RESULT=MyTab.noObj;
			   		}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		   
	   		   		Obj simbol = MyTab.find(name);
			   		
			   		if(simbol == MyTab.noObj) 
			   			parser.report_error("Semanticka greska na liniji: " + nameleft + ", simbol " + name + " ne postoji u tabeli simbola!", null);
			   			
			   		else if(simbol.getKind() == Obj.Con) {
			   			parser.report_info("Koriscenje konstante " + name + " na liniji: " + nameleft, null);
			   		}
			   		else if(simbol.getKind() == Obj.Var||(simbol.getKind() == Obj.Type && simbol.getType().getKind() == Struct.Class)) {
			   			if(functionScope==MyTab.currentScope()) {
			   					if( functionScope.findSymbol(name) != null ) {
			   						parser.report_info("Koriscenje lokalne promenljive " + name + " na liniji " + nameleft, null);
			   					}
			   					else {
			   						parser.report_info("Koriscenje globalne promenljive " + name + " na liniji " + nameleft, null);
			   					}
			   				}
			   		}
			   		else if(simbol.getKind() == Obj.Meth) {
			   			if(MyTab.currentScope() == functionScope) {
			   				parser.report_info("Koriscenje globalne funkcije " + name + " na liniji " + nameleft, null);
						   	/*if(func.getName().equalsIgnoreCase("chr")){
								if(a.equals(Struct.Int)){
									parser.report_error("Greska na liniji: "+funcleft+". Funkcija chr mora da ima Int kao parametar.",null);
									RESULT=MyTab.noType;
								}
							}
							if(func.getName().equalsIgnoreCase("ord")){
								if(a.equals(Struct.Char)){
									parser.report_error("Greska na liniji: "+funcleft+". Funkcija ord mora da ima Char kao parametar.",null);
									RESULT=MyTab.noType;
								}
							}
							if(func.getName().equalsIgnoreCase("len")){
								if(a.equals(Struct.Array)){
									parser.report_error("Greska na liniji: "+funcleft+". Funkcija len mora da ima niz kao parametar.",null);
									RESULT=MyTab.noType;
								}
							
			   				}*/
			   				
			   			}
			   		}
			   		RESULT = simbol;
	   		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Designator ::= Designator DOT IDENT 
            {
              Obj RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			
			  		if(d.getType().getKind() != Struct.Class) {
			   			parser.report_error("Semanticka greska na liniji " + dleft + ": ime " + d.getName() + " nije klasa!", null);
			   			RESULT = MyTab.noObj;
			   		}
			   		else {
			   			Obj ident = d.getType().getMembersTable().searchKey(i);
			   			if(ident == null) {
			   				parser.report_error("Semanticka greska na liniji " + ileft + ": ime " + i + " ne pripada klasi " + d.getName() + " !", null);
			   				RESULT = MyTab.noObj;
			   			}
			   			else {
			   				if(ident.getKind() == Obj.Fld) {
			   					parser.report_info("Koriscenje polja " + i + " na liniji " + ileft, null);
			   				}
			   				else if(ident.getKind() == Obj.Meth) { 
			   					parser.report_info(ident.getLevel()+"Koriscenje metode " + i + " na liniji " + ileft, null);
			   					
			   				}
			   				RESULT = ident;
			   			}
			   		}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Term ::= Term TARABA Factor DVOTACKA Factor 
            {
              Obj RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj t1 = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj t2 = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t3 = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 if(t1.getType().getKind()!=t2.getType().getKind()||t1.getType().getKind()!=t3.getType().getKind()) {
			parser.report_error("Greska na liniji: "+t1left+" nekompatibilni tipovi u izrazu.",null);
			RESULT=MyTab.noObj;
		 }
		 if(t1.getType().getKind()!=Struct.Int||t2.getType().getKind()!=Struct.Int||t3.getType().getKind()!=Struct.Int){
		 	parser.report_error("Greska na liniji: "+t1left+". Tip promenljive u izrazu mora biti Int.",null);
		 	RESULT=MyTab.noObj;
		 }
		 Code.put(Code.dup_x2);
		 Code.put(Code.pop);
		 Code.put(Code.dup_x2);
		 Code.put(Code.pop);
		 Code.put(Code.dup_x2);
		 Code.put(Code.add);
		 Code.put(Code.dup_x2);
		 Code.put(Code.pop);
		 Code.put(Code.sub);
		 Code.put(Code.mul);
		 RESULT = t1;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Term ::= Term Mulop Factor 
            {
              Obj RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj t1 = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t2 = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 if(t1.getType().getKind()!=t2.getType().getKind()) {
			parser.report_error("Greska na liniji: "+t1left+" nekompatibilni tipovi u izrazu.",null);
			RESULT=MyTab.noObj;
		 }
		 if(t1.getType().getKind()!=Struct.Int||t2.getType().getKind()!=Struct.Int){
		 	parser.report_error("Greska na liniji: "+t1left+". Tip promenljive u izrazu mora biti Int.",null);
		 	RESULT=MyTab.noObj;
		 }
		 if(left==false){
		 	Obj term=MyTab.find(t1.getName());
		 	if(term==MyTab.noObj){
		 		parser.report_error("Greska na liniji: "+t1left+". Korisceni simbol ne postoji u tabeli simbola.",null);
		 		RESULT=MyTab.noObj;
		 	}
		 	if(term.getKind()!=Struct.Int&&term.getKind()!=Struct.Bool&&term.getKind()!=Struct.Char){
		 		parser.report_error("Greska na liniji: "+t1left+". Tip mora biti promenljiva, element niza ili polje unutar objekta.",null);
		 		RESULT=MyTab.noObj;
		 	}
		 }
		 if(op.intValue()!=1)
		 	Code.put(op.intValue());
		 else {
		 	Code.put(Code.dup);
		 	Code.put(Code.mul);
		 	Code.put(Code.neg);
		 	Code.put(Code.dup_x1);
		 	Code.put(Code.pop);
		 	Code.put(Code.dup);
		 	Code.put(Code.dup);
		 	Code.put(Code.mul);
		 	Code.put(Code.mul);
		 	Code.put(Code.add);
		 }	
		 left=false;
		 RESULT = t1;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Term ::= Factor 
            {
              Obj RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj f1 = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 RESULT=f1; 
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= Term 
            {
              Obj RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		RESULT=t;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= MINUS Term 
            {
              Obj RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		if(t.getType().getKind()!=Struct.Int){
			parser.report_error("Greska na liniji:"+tleft+". Promenljiva u izrazu mora biti tipa Int.",null);
			RESULT=MyTab.noObj;
		}
		else{
			Code.put(Code.neg);
			RESULT=t;
		}
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= Term Addop Term 
            {
              Obj RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			if(e.getType().getKind()!=t.getType().getKind()){
				parser.report_error("Greska na liniji: "+tleft+" nekompatibilni tipovi u izrazu.",null);
				RESULT =MyTab.noObj;
			}
			if(e.getType().getKind()!=Struct.Int){
				parser.report_error("Greska na liniji: "+eleft+". Izraz pre operacije mora biti tipa int.",null);
				RESULT=MyTab.noObj;
			}
			if(t.getType().getKind()!=Struct.Int){
				parser.report_error("Greska na liniji: "+tleft+". Izraz mora biti tipa int.",null);
				RESULT=MyTab.noObj;
			}
			Code.put(op.intValue());
			RESULT=e;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CondFact ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(e.getType().getKind() != Struct.Bool) {
			 		parser.report_error("Semanticka greska na liniji " + eleft + ": Izraz nije tipa bool! ", null);
			 	}
			 	else {
			 		Code.loadConst(1);
			 		
			 		RESULT = Code.eq;
			 	}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj e1 = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj e2 = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			 	if(e1.getType().getKind()!=e2.getType().getKind()) {
		 			parser.report_error("Nekompatibilni tipovi na liniji " + e1left,null);
		 		}
		 		RESULT=op;
		 	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CondFactList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CondFactList ::= CondFactList AND CondFact 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					RESULT=li;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CondTerm ::= CondFact CondFactList 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				RESULT=0;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CondTermList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CondTermList ::= CondTermList OR CondTerm 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					RESULT=c;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Condition ::= CondTerm CondTermList 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			 	RESULT=0;
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DesignatorStatement ::= Designator MINUSMINUS 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
								if(dest.getKind() == Obj.Elem) {
									Code.put(Code.dup2);
								}
								if(dest.getKind()==Struct.Int) {
									Code.load(dest);
									Code.loadConst(1);
									Code.put(Code.sub); 
									Code.store(dest);
								}
								else
		 							parser.report_error("Promenljiva: "+dest+" mora biti tipa int. - Greska na liniji " + destleft,null);
								RESULT=dest;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DesignatorStatement ::= Designator PLUSPLUS 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							if(dest.getType().getKind()!=Struct.Array&&dest.getType().getKind()!=Struct.Int&&dest.getType().getKind()!=Struct.Char&&dest.getType().getKind()!=Struct.Bool&&dest.getType().getKind()!=Struct.Class){
								parser.report_error( "Tip kome se dodeljuje mora biti promenljiva, element niza ili polje unutar objekta. Greska na liniji " + destleft,null);
		 						RESULT=MyTab.noType;
							}
							if(dest.getKind() == Obj.Elem) {
									Code.put(Code.dup2);
								}
								if(dest.getKind()==Struct.Int) {
									Code.load(dest);
									Code.loadConst(1);
									Code.put(Code.add); 
									Code.store(dest);
								}
								else
		 							parser.report_error("Promenljiva: "+dest+" mora biti tipa int. - Greska na liniji " + destleft,null);
								RESULT=dest;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DesignatorStatement ::= Designator Assignop Expr 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer oper = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							Obj ex=MyTab.find(e.toString());
							if(dest.getType().getKind()!=Struct.Array&&dest.getType().getKind()!=Struct.Int&&dest.getType().getKind()!=Struct.Char&&dest.getType().getKind()!=Struct.Bool&&dest.getType().getKind()!=Struct.Class){
								parser.report_error( "Tip kome se dodeljuje mora biti promenljiva, element niza ili polje unutar objekta. Greska na liniji " + destleft,null);
		 						RESULT=MyTab.noType;
							}
							else
							if (e.getType().getKind()!=dest.getType().getKind()) {
		 						parser.report_error( "Ovaj tip se ne moze dodeliti promenjivoj tipa: " + dest.getType().getKind() + " - Greska na liniji " + destleft,null);
		 						RESULT=MyTab.noType;
		 						}
		 					if(oper.intValue()!=Code.eq){
		 					Code.load(dest);
		 					Code.put(oper.intValue());
		 					if(oper.intValue()==Code.sub)
		 					Code.put(Code.neg);
		 					}
		 					Code.store(dest);
							RESULT=dest;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DesignatorStatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DesignatorStatementList ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NumConstList ::= 
            {
              Integer RESULT =null;
		RESULT=1;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumConstList",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NumConstList ::= COMMA NUMBER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		RESULT=n;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumConstList",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ConditionList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ConditionList ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Matched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Matched ::= PRINT LPAREN Expr NumConstList RPAREN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int numCleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int numCright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer numC = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				if (e.getType().getKind()!=Struct.Int&&e.getType().getKind()!=Struct.Char&&e.getType().getKind()!=Struct.Bool)
					parser.report_error("Greska na liniji "+ eleft + ". Izraz mora biti integer, boolean ili char.",null);
				if(e.getType().getKind()==Struct.Int){
					Code.loadConst(numC.intValue());
					Code.put(Code.print);
				}
				if(e.getType().getKind()==Struct.Char){
					Code.loadConst(numC.intValue());
					Code.put(Code.bprint);
				}
				if(e.getType().getKind()==Struct.Bool){
					Code.loadConst(numC.intValue());
					Code.put(Code.print);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				if (des.getKind()!=Struct.Int&&des.getKind()!=Struct.Char&&des.getKind()!=Struct.Bool)
					parser.report_error("Greska na liniji "+ desleft + ". Izraz mora biti integer, boolean ili char.",null);
				else{	
					if(des.getKind() == Struct.Int) {
								Code.put(Code.read);	
								Code.store(des); 			
					}
					else if(des.getKind() == Struct.Char) {
								Code.put(Code.bread);
								Code.store(des);
					}
					else if(des.getKind() == Struct.Bool) {
								Code.put(Code.read);
								Code.store(des);
					}
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Matched ::= RETURN SEMI 
            {
              Object RESULT =null;
		int linijaleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int linijaright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object linija = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if (currentMethType != MyTab.noType)
					parser.report_error("Greska na liniji "+ linijaleft + ":metod ne sme imati return bez izraza jer nije void!",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Matched ::= RETURN Expr NT$9 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$9 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
	
				returnFound=true;
				if(in_method=false){
					parser.report_error("Greska na liniji: "+tleft+". Iskaz RETURN se moze koristiti samo unutar metoda i funkcija.",null);
				}
				if(currentMethType==MyTab.noType){
					parser.report_error("Greska na liniji: "+tleft+". Povratni tip funkcije je VOID i ne moze imati vrednost u return iskazu.",null);
				}
				if(currentMethType.getKind()!=t.getType().getKind()){
					parser.report_error("Greska na liniji: "+tleft+". Tip izraza u return naredbi se ne slaze sa tipom povratne vrednosti funkcije.",null);
				
				}
				Code.put(Code.exit);
				Code.put(Code.return_);
				
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Matched ::= CONTINUE SEMI 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(in_for==false)
					parser.report_error("Greska na liniji: "+cleft+". Continue mora biti unutar for petlje.",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Matched ::= BREAK SEMI 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(in_for==false)
					parser.report_error("Greska na liniji: "+bleft+". Break mora biti unutar for petlje.",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Matched ::= FOR LPAREN DesignatorStatementList SEMI ConditionList SEMI DesignatorStatementList RPAREN NT$8 Matched 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				in_for=false;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$8 ::= 
            {
              Object RESULT =null;

				in_for=true;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Matched ::= If Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Matched ::= Designator NT$7 LPAREN ActualPars RPAREN SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
			
			if(Obj.Meth == func.getKind()){
				parser.report_info("Pronadjen poziv funkcije "+func.getName()+" na liniji: "+funcleft,null);
				int formalPars = func.getLevel();
				if(formalPars > actParsStack.peek()) {	
					parser.report_error("Semanticka greska na liniji " + funcleft + ": broj stvarnih i formalnih parametara mora biti isti!", null);
				}
				else {	
				
							int destAdr = func.getAdr() - Code.pc;	//adresa prve instrukcije u funkciji minus pc.
							Code.put(Code.call);
							Code.put2(destAdr);	//put2 stavlja relativan skok.
							if(func.getType()!=null) {
								Code.put(Code.pop);
							}
							
				}
				}
			else {
				parser.report_error("Greska na liniji: "+funcleft+" ime: "+func.getName()+" nije funkcija.",null);
				RESULT=MyTab.noType;
				}
			callingStack.pop();
			actParsStack.pop();
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$7 ::= 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

				callingStack.push(func); 
				actParsStack.push(0);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Matched ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Unmatched ::= If Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Unmatched ::= If Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // If ::= IF LPAREN Condition NT$6 RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("If",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$6 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

				if(cond.equals(Struct.Bool)){
					parser.report_error("Greska na liniji: "+condleft+". Uslov mora biti boolean tipa.",null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int vTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String vType = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			Obj typeNode = MyTab.find(vType);
			if(typeNode != MyTab.noObj) {
				if(typeNode.getKind() == Obj.Type) {
					currentType = typeNode.getType();
					
					if(currentType.getKind() == Struct.Class)
						parser.report_info("Koriscenje klase " + vType + " kao tipa na liniji " + vTypeleft, null);
					
					RESULT = currentType;
				}
				else {
					parser.report_error("Ime " + vType + " nije tip!" , null);
					RESULT = MyTab.noType;
				}
			}
			else {
				parser.report_error("Semanticka greska na liniji " + vTypeleft + ":" + " Nije pronadjen tip " + vType + "!" , null);
				RESULT = MyTab.noType;
			}
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Type ::= VOID 
            {
              Struct RESULT =null;
		
			RESULT=MyTab.noType;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FormPars ::= Type DOT DOT DOT IDENT 
            {
              Integer RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct typeName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FormPars ::= Type IDENT 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				parser.report_info("Parametar funkcije: "+name+" na liniji "+nameleft,null);
				if(MyTab.currentScope.findSymbol(name)!=null)
					{
						parser.report_error("Vec postoji promenljiva sa imenom: " + name,null);
					}
				else {
					Obj temp = MyTab.insert(Obj.Var, name, currentType);
					}
			
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FormPars ::= Type IDENT LMEDBRACE RMEDBRACE 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				parser.report_info("Parametar funkcije: "+name+" na liniji "+nameleft,null);
				if(MyTab.currentScope.findSymbol(name)!=null)
					{
						parser.report_error("Vec postoji promenljiva sa imenom: " + name,null);
					}
				else {
					Struct arrayType=new Struct(Struct.Array);
					arrayType.setElementType(currentType);
					Obj temp = MyTab.insert(Obj.Var, name, arrayType);
					}
			
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormParsList ::= FormPars 
            {
              Object RESULT =null;
		
				 	formParsNum++;
				 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormParsList ::= FormPars COMMA FormParsList 
            {
              Object RESULT =null;
		
				 	formParsNum++;
				 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormParsList2 ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsList2",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormParsList2 ::= FormParsList 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				  	if(main) {
				  		parser.report_error("Semanticka greska na liniji " + fleft + ": main metoda ne sme da ima parametre!", null);
				  	}
				  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsList2",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MethodDecl ::= STATIC Type IDENT NT$4 LPAREN FormParsList2 RPAREN VarDeclList LBRACE NT$5 StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		 
				if(in_class) 
					  		_this = MyTab.insert(Obj.Var, "this", MyTab.noType);
				if(!returnFound && retType != MyTab.noType)
					parser.report_error("Semanticka greska na liniji: "+methNameleft+". Funkcija: "+methName+" nema return iskaz.",null);
				MyTab.chainLocalSymbols(currentMethod);
				currentMethod.setLocals(MyTab.currentScope.getLocals());
				MyTab.closeScope();
				Code.put(Code.exit);
				Code.put(Code.return_);
				if(currentMethType!=MyTab.noType && returnFound==false){
					Code.put(Code.trap);
					Code.put(1);
				}
				global_scope--;
				functionScope=null;
				returnFound=false;
				in_method=false;
				currentMethType=null;
				formParsNum=0;
				currentMethod=null;	
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
  
				if(!in_class==true)
					//parser.report_error("Greska na liniji: "+retTypeleft+". Staticka funkcija: "+methName+" mora biti unutar klase.",null);
				currentMethod.setLevel(formParsNum);
				Code.put(Code.enter);
				Code.put(formParsNum);
				Code.put(functionScope.getnVars()); 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$4 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

			global_scope++;
			Obj funkcija=MyTab.find(methName);
					if(funkcija==MyTab.noObj){
						parser.report_info("Obradjuje se staticka funkcija: "+methName+" na liniji "+methNameleft,null);
						currentMethod=MyTab.insert(Obj.Meth,methName,retType);
						currentMethType=currentType;
						MyTab.openScope();
						functionScope=MyTab.currentScope();
						in_method=true;
						}
					else {
						parser.report_error("Semanticka greska na liniji " + methNameleft + " : Ime funkcije vec postoji!", null);
					}
			
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDecl ::= Type IDENT NT$2 LPAREN FormParsList2 RPAREN VarDeclList LBRACE NT$3 StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		 
				if(in_class) 
					  		_this = MyTab.insert(Obj.Var, "this", MyTab.noType);
				if(!returnFound && retType != MyTab.noType)
					parser.report_error("Semanticka greska na liniji: "+methNameleft+". Funkcija: "+methName+" nema return iskaz.",null);
				MyTab.chainLocalSymbols(currentMethod);
				currentMethod.setLocals(MyTab.currentScope.getLocals());
				MyTab.closeScope();
				Code.put(Code.exit);
				Code.put(Code.return_);
				if(currentMethType!=MyTab.noType && returnFound==false){
					Code.put(Code.trap);
					Code.put(1);
				}
				global_scope--;
				functionScope=null;
				main=false;
				returnFound=false;
				in_method=false;
				currentMethType=null;
				formParsNum=0;
				currentMethod=null;	
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;

				currentMethod.setLevel(formParsNum);
				Code.put(Code.enter);
				Code.put(formParsNum);
				Code.put(functionScope.getnVars()); 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$2 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					Obj funkcija=MyTab.find(methName);
					global_scope++;
					if(funkcija==MyTab.noObj){
						parser.report_info("Obradjuje se funkcija: "+methName+" na liniji "+methNameleft,null);
						currentMethod=MyTab.insert(Obj.Meth,methName,retType);
						if(methName.equalsIgnoreCase("main")){
							Code.mainPc=Code.pc;
							main=true;
							}
						currentMethType=currentType;
						MyTab.openScope();
						functionScope=MyTab.currentScope();
						in_method=true;
						}
					else {
						parser.report_error("Semanticka greska na liniji " + methNameleft + " : Ime funkcije vec postoji!", null);
					}
					
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				   RESULT=m;
				  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Field ::= IDENT LMEDBRACE RMEDBRACE 
            {
              Obj RESULT =null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
			
			Obj var = MyTab.currentScope().findSymbol(vName);
			if(var != null) {
				if(newClass.getElemType() !=null && newClass.getElemType().getMembersTable().searchKey(vName) == null)
					
					parser.report_error("Semanticka greska na liniji " + vNameleft + " : Ime promenljive vec postoji!", null);
				
				else {
					MyTab.currentScope().getLocals().deleteKey(vName);
					
					Struct arrayType = new Struct(Struct.Array);
					arrayType.setElementType(currentType);
					MyTab.insert(Obj.Fld, vName, arrayType);
					
					MyTab.chainLocalSymbols(newClass);
					
					parser.report_info("Deklarisan niz kao polje " + vName + " na liniji " + vNameleft, null);
				}
			}
			else if(currentType != null) {
				Struct arrayType = new Struct(Struct.Array);
				arrayType.setElementType(currentType);
				MyTab.insert(Obj.Fld, vName, arrayType);
				
				MyTab.chainLocalSymbols(newClass);
				
				parser.report_info("Deklarisan niz kao polje " + vName + " na liniji " + vNameleft, null);
			}
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Field",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Field ::= IDENT 
            {
              Obj RESULT =null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 

			Obj var = MyTab.currentScope().findSymbol(vName);
			
			if(var != null) {
			
				if(newClass.getElemType() !=null && newClass.getElemType().getMembersTable().searchKey(vName) == null)
					
					parser.report_error("Semanticka greska na liniji " + vNameleft + " : Ime promenljive vec postoji!", null);
				
				else {
					MyTab.currentScope().getLocals().deleteKey(vName);
					
					MyTab.insert(Obj.Fld, vName, currentType);
				
					MyTab.chainLocalSymbols(newClass);
					
					parser.report_info("Deklarisano polje " + vName + " tipa " + currentType + " na liniji " + vNameleft, null);
				}
			}
			else if(currentType != null) {
				MyTab.insert(Obj.Fld, vName, currentType);
				
				MyTab.chainLocalSymbols(newClass);
				
				parser.report_info("Deklarisano polje " + vName + " tipa " + currentType + " na liniji " + vNameleft, null);
			}
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Field",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FieldDeclList ::= Field 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FieldDeclList ::= FieldDeclList COMMA Field 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassVarDecl ::= Type error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassVarDecl ::= error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassVarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
				 parser.report_error("Uspesan oporavak od greske na liniji: "+eleft+".",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassVarDecl ::= Type FieldDeclList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassVarDeclList ::= ClassVarDeclList ClassVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Extends ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Extends",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Extends ::= EXTENDS error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Extends",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Extends ::= EXTENDS Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(t.getKind() != Struct.Class) {
					parser.report_error("Semanticka greska na liniji " + tleft + ": Tip za extends mora biti klasa! ", null);
				}
				else {
					
					newClass.setElementType(t);	
					
					extendsSymbols = t.getMembersTable();
					
					
					MyTab.chainLocalSymbols(newClass);
					RESULT=t;
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Extends",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassName ::= IDENT 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			  	Obj classNode = MyTab.find(className);
			  	if(classNode != MyTab.noObj) {
			  		parser.report_error("Semanticka greska na liniji " + classNameleft + " : Ime klase se vec koristi! ", null);
			  		RESULT = MyTab.noObj;
			  		ok = false;
			  	}
			  	else {				
			  		newClass = new Struct(Struct.Class);
				  	
				  	Obj obj = MyTab.insert(Obj.Type, className, newClass);				  	
				  	
				  	RESULT=className;
				  	MyTab.openScope();
				  	global_scope++;
				  	classScope = MyTab.currentScope();
				  	
				  	Obj vtPtr = MyTab.insert(Obj.Fld, "vtPtr", MyTab.intType);
				  					  	
				  	MyTab.chainLocalSymbols(newClass);
				  	
				  	parser.report_info("Obradjuje se klasa " + className + " na liniji " + classNameleft, null);
				  	ok = true;
					
				}
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassName",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OptionalMethods ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalMethods",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OptionalMethods ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalMethods",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ClassDecl ::= CLASS ClassName Extends NT$1 LBRACE ClassVarDeclList OptionalMethods RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		 
					
				MyTab.chainLocalSymbols(newClass);
				
			  	if(true) {									  
			  		Obj obj = new Obj(Obj.Var, "#vt_finish" + globalScope.getnVars(), MyTab.intType);
			  		globalScope.addToLocals(obj);
			  		obj.setLevel(0);
			  		global_scope--;
			  		MyTab.closeScope();
			  		parser.report_info("Definisana klasa " + c + " na liniji " + cleft, null);
			  	}
			  	
			  	classScope = null;
			  	newClass = null;
			  	extendsSymbols = null;
			  	
			  	redefiningMap.clear();
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$1 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		  	
			  	if(extendsSymbols!=null) {
				  	for(Obj symbol: extendsSymbols.symbols()) {
				  			if(symbol.getKind() == Obj.Fld) {	
				  				if(MyTab.currentScope().findSymbol(symbol.getName()) == null) {
				  					Obj obj = MyTab.insert(symbol.getKind(), symbol.getName(), symbol.getType());
				  				}
				  			}
				  			else if(symbol.getKind() == Obj.Meth) {
				  				if(MyTab.currentScope().findSymbol(symbol.getName()) == null) {
				
									Obj currentMeth = MyTab.insert(symbol.getKind(), symbol.getName(), symbol.getType());
										
									currentMeth.setLevel(symbol.getLevel());
									currentMeth.setAdr(symbol.getAdr());
										
									MyTab.openScope();
									newClass = new Struct(Struct.Class);
									Obj obj = MyTab.insert(Obj.Var, "this", newClass);
									global_scope++;	
									Collection<Obj> locals = symbol.getLocalSymbols();
									Iterator it = locals.iterator();
										
									for(int i=0; i<symbol.getLevel(); i++) {
										if(it.hasNext()) {
											MyTab.currentScope().addToLocals((Obj)it.next());
										}
									}
									MyTab.chainLocalSymbols(currentMeth);
									global_scope--;
									MyTab.closeScope();
								}
				  			}
				  	}
					
					MyTab.chainLocalSymbols(newClass);
				}
				
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Var ::= IDENT LMEDBRACE RMEDBRACE 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
			Obj var = MyTab.find(name);
			if(var != MyTab.noObj) {
				if(global_scope==0)
					parser.report_error("Semanticka greska na liniji " + nameleft + " : Ime promenljive vec postoji!", null);
				else if(currentType != null) 
					MyTab.insert(Obj.Var, name, currentType);
			}
			else if(currentType != null) {
				Struct arrayType = new Struct(Struct.Array);
				arrayType.setElementType(currentType);
				MyTab.insert(Obj.Var, name, arrayType);
				parser.report_info("Deklarisan niz " + name + " na liniji " + nameleft, null);
			}
			if(global_scope==0)
			array_count++;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Var ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			
			Obj var = MyTab.find(name);
			if(var != MyTab.noObj) {
				if(global_scope==0)
					parser.report_error("Semanticka greska na liniji " + nameleft + " : Ime promenljive vec postoji!", null);
				else if(currentType != null) 
					MyTab.insert(Obj.Var, name, currentType);
					
			}
			else if(currentType != null) {
				MyTab.insert(Obj.Var, name, currentType);
				parser.report_info("Deklarisana promenljiva " + name + " na liniji " + nameleft, null);
			}
			if(global_scope==0)
			var_count++;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarList ::= error COMMA VarList 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			parser.report_info("Uspesan oporavak od greske pri definisanju globalne promenljive na liniji " + cleft,null); 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarList ::= Var 
            {
              Object RESULT =null;
		
			if(main)
			mainDeclarations++;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarList ::= Var COMMA VarList 
            {
              Object RESULT =null;
		
			if(main)
			mainDeclarations++;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDecl ::= Type error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		   		currentType=null;
		  		parser.report_info("Uspesan oporavak od greske pri definisanju globalne promenljive na liniji " + eleft,null); 
	  	   	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDecl ::= Type VarList SEMI 
            {
              Object RESULT =null;
		
				currentType=null;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Const ::= BOOL 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(bool==true)
				const_value = 1;
				else 
				const_value = 0;
				RESULT = MyTab.boolType; 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Const ::= CHAR 
            {
              Object RESULT =null;
		int chrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int chrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character chr = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				const_value=(int)chr;
				RESULT = MyTab.charType; 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Const ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				const_value=num;
				RESULT = MyTab.intType;  
				
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IdentList ::= Const 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT=o;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IdentList ::= IdentList COMMA IDENT EQUAL Const 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(MyTab.currentScope.findSymbol(name) != null)
				  		parser.report_error("Greska na liniji: "+nameleft+". Vec postoji identifikator sa imenom: " + name,null);
				  	else {
				  		Obj temp = MyTab.insert(Obj.Con, name, currentType);
				  		temp.setAdr(const_value);
				  		if(!o.equals(currentType))
				  			parser.report_error("Greska na liniji: " + nameleft+" . Tip koji se dodeljuje ne odgovara tipu kome se dodeljuje. ",null);
				  		parser.report_info("Deklarisana globalna konstanta " +name + " na liniji " + nameleft, null);
				  	}
				  if(global_scope==0)
				  con_count++;
				  RESULT=o;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST error SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			  	parser.report_info("Uspesan oporavak od greske na liniji " + sleft + " pri definisanju konstante.",null); 
		  	  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstDecl ::= CONST Type IDENT EQUAL IdentList SEMI 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				  	if(MyTab.currentScope.findSymbol(name) != null)
				  		parser.report_error("Greska na liniji: "+nameleft+". Vec postoji identifikator sa imenom: " + name,null);
				  	else {
				  		Obj temp = MyTab.insert(Obj.Con, name, currentType);
				  		temp.setAdr(const_value);
				  		if(!o.equals(currentType))
				  			parser.report_error("Greska na liniji: " + nameleft+" . Tip koji se dodeljuje ne odgovara tipu kome se dodeljuje. ",null);
				  		parser.report_info("Deklarisana globalna konstanta " + name + " na liniji " + nameleft, null);
				  	}
				  	if(global_scope==0)
					con_count++;
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SomeDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SomeDeclList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SomeDeclList ::= SomeDeclList ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SomeDeclList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SomeDeclList ::= SomeDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SomeDeclList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SomeDeclList ::= SomeDeclList ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SomeDeclList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			
			globalScope=MyTab.currentScope();
			
			Obj len = MyTab.find("len");
			len.setAdr(Code.pc);
			Code.put(Code.enter);
			Code.put(1);
			Code.put(1);
			Code.put(Code.load);
			Code.put(0);
			Code.put(Code.arraylength);
			Code.put(Code.exit);
			Code.put(Code.return_);
			 
			Obj chr = MyTab.find("chr");
			chr.setAdr(Code.pc);
			Code.put(Code.enter);
			Code.put(1);
			Code.put(1);
			Code.put(Code.load);
			Code.put(0);
			Code.put(Code.exit);
			Code.put(Code.return_);
			  
			Obj ord = MyTab.find("ord");
			ord.setAdr(Code.pc);
			Code.put(Code.enter);
			Code.put(1);
			Code.put(1);
			Code.put(Code.load);
			Code.put(0);
			Code.put(Code.exit);
			Code.put(Code.return_);
			RESULT= MyTab.insert(Obj.Prog,pName,MyTab.noType);
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROG ProgName NT$0 SomeDeclList LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
				Code.dataSize=MyTab.currentScope().getnVars();	
				MyTab.chainLocalSymbols(p);
				MyTab.closeScope();
				
				
				
				parser.report_info("Broj globalnih prostih promenjivih:" +var_count,null);
				parser.report_info("Broj globalnih nizova:" + array_count,null);
				parser.report_info("Broj globalnih konstanti:" + con_count,null);
				parser.report_info("Broj deklaracija promenljivih u main-u:" + mainDeclarations,null);	
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

				MyTab.openScope();
				
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

