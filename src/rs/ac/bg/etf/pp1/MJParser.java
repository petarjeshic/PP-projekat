
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Aug 27 21:29:25 CEST 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.io.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.util.MyTab;
import rs.ac.bg.etf.pp1.util.MyStruct;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.structure.SymbolDataStructure;
import java.util.Stack;
import java.util.Collection;
import java.util.Iterator;
import java.util.HashMap;
import java.util.Map;
import rs.etf.pp1.mj.runtime.Code;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Aug 27 21:29:25 CEST 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\221\000\002\066\002\000\002\002\011\000\002\002" +
    "\004\000\002\052\003\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\002\000\002\017\010\000" +
    "\002\017\005\000\002\021\007\000\002\021\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\006" +
    "\005\000\002\006\005\000\002\023\005\000\002\023\003" +
    "\000\002\023\005\000\002\022\003\000\002\022\005\000" +
    "\002\067\002\000\002\024\012\000\002\016\005\000\002" +
    "\016\002\000\002\014\003\000\002\015\004\000\002\015" +
    "\003\000\002\015\004\000\002\015\002\000\002\033\004" +
    "\000\002\033\002\000\002\036\005\000\002\036\005\000" +
    "\002\036\003\000\002\036\004\000\002\054\005\000\002" +
    "\054\003\000\002\055\003\000\002\055\005\000\002\005" +
    "\004\000\002\005\002\000\002\070\002\000\002\071\002" +
    "\000\002\003\015\000\002\072\002\000\002\003\015\000" +
    "\002\051\007\000\002\051\002\000\002\004\004\000\002" +
    "\004\002\000\002\065\010\000\002\065\006\000\002\065" +
    "\003\000\002\010\010\000\002\010\006\000\002\010\002" +
    "\000\002\056\003\000\002\056\003\000\002\011\003\000" +
    "\002\011\003\000\002\073\002\000\002\035\007\000\002" +
    "\047\004\000\002\047\006\000\002\046\004\000\002\074" +
    "\002\000\002\046\010\000\002\046\006\000\002\075\002" +
    "\000\002\046\014\000\002\046\004\000\002\046\004\000" +
    "\002\076\002\000\002\046\006\000\002\046\004\000\002" +
    "\046\007\000\002\046\010\000\002\046\005\000\002\007" +
    "\004\000\002\007\002\000\002\030\003\000\002\030\002" +
    "\000\002\031\004\000\002\031\002\000\002\027\003\000" +
    "\002\027\002\000\002\025\005\000\002\025\004\000\002" +
    "\025\004\000\002\026\004\000\002\032\005\000\002\032" +
    "\002\000\002\044\004\000\002\045\005\000\002\045\002" +
    "\000\002\034\005\000\002\034\003\000\002\060\005\000" +
    "\002\060\004\000\002\060\003\000\002\057\003\000\002" +
    "\057\005\000\002\053\005\000\002\053\003\000\002\077" +
    "\002\000\002\100\002\000\002\053\010\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\101\002\000" +
    "\002\061\007\000\002\061\007\000\002\061\004\000\002" +
    "\061\005\000\002\061\003\000\002\013\003\000\002\013" +
    "\002\000\002\012\005\000\002\012\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\063\003\000\002\063" +
    "\003\000\002\040\003\000\002\040\003\000\002\041\003" +
    "\000\002\041\003\000\002\064\003\000\002\064\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\004\004\005\001\002\000\004\002\u0101\001" +
    "\002\000\004\065\006\001\002\000\014\005\ufffe\006\ufffe" +
    "\026\ufffe\030\ufffe\065\ufffe\001\002\000\014\005\001\006" +
    "\001\026\001\030\001\065\001\001\002\000\014\005\ufffa" +
    "\006\ufffa\026\ufffa\030\ufffa\065\ufffa\001\002\000\014\005" +
    "\015\006\013\026\021\030\022\065\014\001\002\000\006" +
    "\003\364\065\365\001\002\000\012\005\uffd7\007\uffd7\037" +
    "\uffd7\065\uffd7\001\002\000\070\003\uffc6\006\uffc6\010\uffc6" +
    "\012\uffc6\013\uffc6\016\uffc6\020\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\065\uffc6\001\002\000\070" +
    "\003\uffc7\006\uffc7\010\uffc7\012\uffc7\013\uffc7\016\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\040\uffc7\041\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\065\uffc7\001\002\000\014\005\ufffc\006\ufffc\026\ufffc\030" +
    "\ufffc\065\ufffc\001\002\000\014\005\ufffb\006\ufffb\026\ufffb" +
    "\030\ufffb\065\ufffb\001\002\000\014\005\ufffd\006\ufffd\026" +
    "\ufffd\030\ufffd\065\ufffd\001\002\000\004\065\043\001\002" +
    "\000\010\003\024\005\015\065\014\001\002\000\004\065" +
    "\026\001\002\000\004\010\025\001\002\000\014\005\ufff8" +
    "\006\ufff8\026\ufff8\030\ufff8\065\ufff8\001\002\000\004\017" +
    "\027\001\002\000\010\062\030\063\034\064\032\001\002" +
    "\000\006\010\ufff5\013\ufff5\001\002\000\006\010\ufff6\013" +
    "\ufff6\001\002\000\006\010\ufff3\013\ufff3\001\002\000\006" +
    "\010\036\013\035\001\002\000\006\010\ufff4\013\ufff4\001" +
    "\002\000\004\065\037\001\002\000\014\005\ufff9\006\ufff9" +
    "\026\ufff9\030\ufff9\065\ufff9\001\002\000\004\017\040\001" +
    "\002\000\010\062\030\063\034\064\032\001\002\000\006" +
    "\010\ufff7\013\ufff7\001\002\000\010\003\045\006\uffe3\035" +
    "\044\001\002\000\010\003\uffe7\006\uffe7\035\uffe7\001\002" +
    "\000\010\003\361\005\015\065\014\001\002\000\004\006" +
    "\uffe5\001\002\000\004\006\uffeb\001\002\000\004\006\050" +
    "\001\002\000\014\003\uffe1\005\uffe1\006\uffe1\007\uffe1\065" +
    "\uffe1\001\002\000\014\003\054\005\015\006\052\007\uffe8" +
    "\065\014\001\002\000\012\005\uffd7\007\uffd7\037\uffd7\065" +
    "\uffd7\001\002\000\006\003\060\065\063\001\002\000\014" +
    "\003\uffde\005\uffde\006\uffde\007\uffde\065\uffde\001\002\000" +
    "\014\003\uffe2\005\uffe2\006\uffe2\007\uffe2\065\uffe2\001\002" +
    "\000\004\007\057\001\002\000\014\005\uffea\006\uffea\026" +
    "\uffea\030\uffea\065\uffea\001\002\000\016\003\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\010\071\065\uffdd\001\002\000\006\010" +
    "\uffdb\013\uffdb\001\002\000\006\010\067\013\066\001\002" +
    "\000\010\010\uffda\013\uffda\020\064\001\002\000\004\021" +
    "\065\001\002\000\006\010\uffd9\013\uffd9\001\002\000\004" +
    "\065\063\001\002\000\014\003\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\065\uffe0\001\002\000\006\010\uffdc\013\uffdc\001\002" +
    "\000\014\003\uffdf\005\uffdf\006\uffdf\007\uffdf\065\uffdf\001" +
    "\002\000\012\005\015\007\075\037\074\065\014\001\002" +
    "\000\004\065\346\001\002\000\006\005\015\065\014\001" +
    "\002\000\004\007\uffe9\001\002\000\012\005\uffd8\007\uffd8" +
    "\037\uffd8\065\uffd8\001\002\000\004\065\100\001\002\000" +
    "\004\011\101\001\002\000\010\005\015\012\uffd0\065\014" +
    "\001\002\000\006\022\326\065\325\001\002\000\004\012" +
    "\105\001\002\000\004\012\uffcb\001\002\000\010\005\uffce" +
    "\006\uffce\065\uffce\001\002\000\010\005\015\006\107\065" +
    "\014\001\002\000\026\006\uffd3\007\uffd3\014\uffd3\015\uffd3" +
    "\025\uffd3\031\uffd3\033\uffd3\034\uffd3\036\uffd3\065\uffd3\001" +
    "\002\000\010\005\uffcf\006\uffcf\065\uffcf\001\002\000\026" +
    "\006\uffb0\007\uffb0\014\uffb0\015\uffb0\025\uffb0\031\uffb0\033" +
    "\uffb0\034\uffb0\036\uffb0\065\uffb0\001\002\000\026\006\114" +
    "\007\131\014\125\015\130\025\132\031\122\033\113\034" +
    "\116\036\127\065\115\001\002\000\004\011\321\001\002" +
    "\000\026\006\uffb0\007\uffb0\014\uffb0\015\uffb0\025\uffb0\031" +
    "\uffb0\033\uffb0\034\uffb0\036\uffb0\065\uffb0\001\002\000\072" +
    "\010\uff98\011\uff98\012\uff98\013\uff98\016\uff98\017\uff98\020" +
    "\uff98\021\uff98\022\uff98\023\uff98\024\uff98\040\uff98\041\uff98" +
    "\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050" +
    "\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98" +
    "\057\uff98\060\uff98\001\002\000\004\011\300\001\002\000" +
    "\024\006\114\014\125\015\130\025\132\031\122\033\113" +
    "\034\116\036\127\065\115\001\002\000\026\006\uffc4\007" +
    "\uffc4\014\uffc4\015\uffc4\025\uffc4\031\uffc4\033\uffc4\034\uffc4" +
    "\036\uffc4\065\uffc4\001\002\000\030\011\uffbe\017\264\020" +
    "\173\022\175\052\150\053\153\054\163\055\164\056\171" +
    "\057\261\060\265\001\002\000\004\011\232\001\002\000" +
    "\004\010\231\001\002\000\026\006\uffb1\007\uffb1\014\uffb1" +
    "\015\uffb1\025\uffb1\031\uffb1\033\uffb1\034\uffb1\036\uffb1\065" +
    "\uffb1\001\002\000\004\011\222\001\002\000\026\006\uffc5" +
    "\007\uffc5\014\uffc5\015\uffc5\025\uffc5\031\uffc5\033\uffc5\034" +
    "\uffc5\036\uffc5\065\uffc5\001\002\000\004\010\221\001\002" +
    "\000\022\010\142\011\145\032\137\040\134\062\141\063" +
    "\146\064\135\065\115\001\002\000\012\005\uffd2\007\uffd2" +
    "\037\uffd2\065\uffd2\001\002\000\004\010\133\001\002\000" +
    "\030\006\uffb9\007\uffb9\014\uffb9\015\uffb9\025\uffb9\027\uffb9" +
    "\031\uffb9\033\uffb9\034\uffb9\036\uffb9\065\uffb9\001\002\000" +
    "\016\011\145\032\137\062\141\063\146\064\135\065\115" +
    "\001\002\000\056\010\uff92\012\uff92\013\uff92\016\uff92\021" +
    "\uff92\023\uff92\024\uff92\040\uff92\041\uff92\042\uff92\043\uff92" +
    "\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052" +
    "\uff92\053\uff92\054\uff92\055\uff92\056\uff92\001\002\000\014" +
    "\010\uffb7\016\152\040\154\052\150\053\153\001\002\000" +
    "\006\005\015\065\014\001\002\000\064\010\uff8c\011\uff91" +
    "\012\uff8c\013\uff8c\016\uff8c\020\173\021\uff8c\022\175\023" +
    "\uff8c\024\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c" +
    "\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053" +
    "\uff8c\054\uff8c\055\uff8c\056\uff8c\001\002\000\056\010\uff94" +
    "\012\uff94\013\uff94\016\uff94\021\uff94\023\uff94\024\uff94\040" +
    "\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94" +
    "\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055" +
    "\uff94\056\uff94\001\002\000\030\006\uffb5\007\uffb5\014\uffb5" +
    "\015\uffb5\025\uffb5\027\uffb5\031\uffb5\033\uffb5\034\uffb5\036" +
    "\uffb5\065\uffb5\001\002\000\056\010\uff9c\012\uff9c\013\uff9c" +
    "\016\uff9c\021\uff9c\023\uff9c\024\uff9c\040\uff9c\041\167\042" +
    "\161\043\165\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c" +
    "\051\uff9c\052\uff9c\053\uff9c\054\163\055\164\056\171\001" +
    "\002\000\056\010\uff9b\012\uff9b\013\uff9b\016\uff9b\021\uff9b" +
    "\023\uff9b\024\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044" +
    "\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b" +
    "\053\uff9b\054\uff9b\055\uff9b\056\uff9b\001\002\000\020\011" +
    "\145\032\137\040\134\062\141\063\146\064\135\065\115" +
    "\001\002\000\056\010\uff93\012\uff93\013\uff93\016\uff93\021" +
    "\uff93\023\uff93\024\uff93\040\uff93\041\uff93\042\uff93\043\uff93" +
    "\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93\052" +
    "\uff93\053\uff93\054\uff93\055\uff93\056\uff93\001\002\000\014" +
    "\012\151\016\152\040\154\052\150\053\153\001\002\000" +
    "\020\011\uff7a\032\uff7a\040\uff7a\062\uff7a\063\uff7a\064\uff7a" +
    "\065\uff7a\001\002\000\056\010\uff8d\012\uff8d\013\uff8d\016" +
    "\uff8d\021\uff8d\023\uff8d\024\uff8d\040\uff8d\041\uff8d\042\uff8d" +
    "\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051" +
    "\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\001\002" +
    "\000\016\011\uff7c\032\uff7c\062\uff7c\063\uff7c\064\uff7c\065" +
    "\uff7c\001\002\000\020\011\uff79\032\uff79\040\uff79\062\uff79" +
    "\063\uff79\064\uff79\065\uff79\001\002\000\016\011\uff7b\032" +
    "\uff7b\062\uff7b\063\uff7b\064\uff7b\065\uff7b\001\002\000\016" +
    "\011\uff7d\032\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d\001" +
    "\002\000\016\011\145\032\137\062\141\063\146\064\135" +
    "\065\115\001\002\000\016\011\uff7e\032\uff7e\062\uff7e\063" +
    "\uff7e\064\uff7e\065\uff7e\001\002\000\056\010\uff9e\012\uff9e" +
    "\013\uff9e\016\uff9e\021\uff9e\023\uff9e\024\uff9e\040\uff9e\041" +
    "\167\042\161\043\165\044\uff9e\045\uff9e\046\uff9e\047\uff9e" +
    "\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\163\055\164\056" +
    "\171\001\002\000\016\011\uff75\032\uff75\062\uff75\063\uff75" +
    "\064\uff75\065\uff75\001\002\000\016\011\uff77\032\uff77\062" +
    "\uff77\063\uff77\064\uff77\065\uff77\001\002\000\020\011\uff73" +
    "\032\uff73\040\uff73\062\uff73\063\uff73\064\uff73\065\uff73\001" +
    "\002\000\020\011\uff72\032\uff72\040\uff72\062\uff72\063\uff72" +
    "\064\uff72\065\uff72\001\002\000\016\011\uff74\032\uff74\062" +
    "\uff74\063\uff74\064\uff74\065\uff74\001\002\000\016\011\145" +
    "\032\137\062\141\063\146\064\135\065\115\001\002\000" +
    "\016\011\uff76\032\uff76\062\uff76\063\uff76\064\uff76\065\uff76" +
    "\001\002\000\016\011\uff78\032\uff78\062\uff78\063\uff78\064" +
    "\uff78\065\uff78\001\002\000\020\011\uff71\032\uff71\040\uff71" +
    "\062\uff71\063\uff71\064\uff71\065\uff71\001\002\000\056\010" +
    "\uff9a\012\uff9a\013\uff9a\016\uff9a\021\uff9a\023\uff9a\024\uff9a" +
    "\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046" +
    "\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a" +
    "\055\uff9a\056\uff9a\001\002\000\020\011\uff97\032\uff97\040" +
    "\uff97\062\uff97\063\uff97\064\uff97\065\uff97\001\002\000\004" +
    "\011\177\001\002\000\004\065\176\001\002\000\072\010" +
    "\uff99\011\uff99\012\uff99\013\uff99\016\uff99\017\uff99\020\uff99" +
    "\021\uff99\022\uff99\023\uff99\024\uff99\040\uff99\041\uff99\042" +
    "\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99" +
    "\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057" +
    "\uff99\060\uff99\001\002\000\022\011\145\012\uff8a\032\137" +
    "\040\134\062\141\063\146\064\135\065\115\001\002\000" +
    "\004\012\205\001\002\000\006\012\uff8b\013\203\001\002" +
    "\000\016\012\uff88\013\uff88\016\152\040\154\052\150\053" +
    "\153\001\002\000\020\011\145\032\137\040\134\062\141" +
    "\063\146\064\135\065\115\001\002\000\016\012\uff89\013" +
    "\uff89\016\152\040\154\052\150\053\153\001\002\000\056" +
    "\010\uff90\012\uff90\013\uff90\016\uff90\021\uff90\023\uff90\024" +
    "\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90" +
    "\046\uff90\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054" +
    "\uff90\055\uff90\056\uff90\001\002\000\020\011\145\032\137" +
    "\040\134\062\141\063\146\064\135\065\115\001\002\000" +
    "\014\016\152\021\uff96\040\154\052\150\053\153\001\002" +
    "\000\004\021\211\001\002\000\072\010\uff95\011\uff95\012" +
    "\uff95\013\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95" +
    "\023\uff95\024\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044" +
    "\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95" +
    "\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\060\uff95\001" +
    "\002\000\060\010\uff8e\012\uff8e\013\uff8e\016\uff8e\020\213" +
    "\021\uff8e\023\uff8e\024\uff8e\040\uff8e\041\uff8e\042\uff8e\043" +
    "\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e" +
    "\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\001\002\000" +
    "\020\011\145\032\137\040\134\062\141\063\146\064\135" +
    "\065\115\001\002\000\014\016\152\021\215\040\154\052" +
    "\150\053\153\001\002\000\056\010\uff8f\012\uff8f\013\uff8f" +
    "\016\uff8f\021\uff8f\023\uff8f\024\uff8f\040\uff8f\041\uff8f\042" +
    "\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f" +
    "\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\001" +
    "\002\000\004\010\217\001\002\000\030\006\uffb6\007\uffb6" +
    "\014\uffb6\015\uffb6\025\uffb6\027\uffb6\031\uffb6\033\uffb6\034" +
    "\uffb6\036\uffb6\065\uffb6\001\002\000\056\010\uff9d\012\uff9d" +
    "\013\uff9d\016\uff9d\021\uff9d\023\uff9d\024\uff9d\040\uff9d\041" +
    "\167\042\161\043\165\044\uff9d\045\uff9d\046\uff9d\047\uff9d" +
    "\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\163\055\164\056" +
    "\171\001\002\000\030\006\uffb8\007\uffb8\014\uffb8\015\uffb8" +
    "\025\uffb8\027\uffb8\031\uffb8\033\uffb8\034\uffb8\036\uffb8\065" +
    "\uffb8\001\002\000\020\011\145\032\137\040\134\062\141" +
    "\063\146\064\135\065\115\001\002\000\016\012\uffac\013" +
    "\225\016\152\040\154\052\150\053\153\001\002\000\004" +
    "\012\227\001\002\000\004\062\226\001\002\000\004\012" +
    "\uffad\001\002\000\004\010\230\001\002\000\030\006\uffb3" +
    "\007\uffb3\014\uffb3\015\uffb3\025\uffb3\027\uffb3\031\uffb3\033" +
    "\uffb3\034\uffb3\036\uffb3\065\uffb3\001\002\000\030\006\uffbf" +
    "\007\uffbf\014\uffbf\015\uffbf\025\uffbf\027\uffbf\031\uffbf\033" +
    "\uffbf\034\uffbf\036\uffbf\065\uffbf\001\002\000\020\011\145" +
    "\032\137\040\134\062\141\063\146\064\135\065\115\001" +
    "\002\000\036\010\uff9f\012\uff9f\016\152\023\253\024\250" +
    "\040\154\044\247\045\252\046\254\047\251\050\uff9f\051" +
    "\uff9f\052\150\053\153\001\002\000\004\012\uffc3\001\002" +
    "\000\012\010\uffa1\012\uffa1\050\uffa1\051\uffa1\001\002\000" +
    "\010\010\uffa4\012\uffa4\051\uffa4\001\002\000\010\010\uffa6" +
    "\012\uffa6\051\240\001\002\000\020\011\145\032\137\040" +
    "\134\062\141\063\146\064\135\065\115\001\002\000\010" +
    "\010\uffa5\012\uffa5\051\uffa5\001\002\000\012\010\uffa3\012" +
    "\uffa3\050\243\051\uffa3\001\002\000\020\011\145\032\137" +
    "\040\134\062\141\063\146\064\135\065\115\001\002\000" +
    "\012\010\uffa2\012\uffa2\050\uffa2\051\uffa2\001\002\000\004" +
    "\012\246\001\002\000\024\006\uffc2\014\uffc2\015\uffc2\025" +
    "\uffc2\031\uffc2\033\uffc2\034\uffc2\036\uffc2\065\uffc2\001\002" +
    "\000\020\011\uff84\032\uff84\040\uff84\062\uff84\063\uff84\064" +
    "\uff84\065\uff84\001\002\000\020\011\uff80\032\uff80\040\uff80" +
    "\062\uff80\063\uff80\064\uff80\065\uff80\001\002\000\020\011" +
    "\uff7f\032\uff7f\040\uff7f\062\uff7f\063\uff7f\064\uff7f\065\uff7f" +
    "\001\002\000\020\011\uff83\032\uff83\040\uff83\062\uff83\063" +
    "\uff83\064\uff83\065\uff83\001\002\000\020\011\uff82\032\uff82" +
    "\040\uff82\062\uff82\063\uff82\064\uff82\065\uff82\001\002\000" +
    "\020\011\uff81\032\uff81\040\uff81\062\uff81\063\uff81\064\uff81" +
    "\065\uff81\001\002\000\020\011\145\032\137\040\134\062" +
    "\141\063\146\064\135\065\115\001\002\000\022\010\uffa0" +
    "\012\uffa0\016\152\040\154\050\uffa0\051\uffa0\052\150\053" +
    "\153\001\002\000\004\011\267\001\002\000\020\011\uff85" +
    "\032\uff85\040\uff85\062\uff85\063\uff85\064\uff85\065\uff85\001" +
    "\002\000\006\010\uffa8\012\uffa8\001\002\000\020\011\uff86" +
    "\032\uff86\040\uff86\062\uff86\063\uff86\064\uff86\065\uff86\001" +
    "\002\000\020\011\145\032\137\040\134\062\141\063\146" +
    "\064\135\065\115\001\002\000\020\011\uff87\032\uff87\040" +
    "\uff87\062\uff87\063\uff87\064\uff87\065\uff87\001\002\000\006" +
    "\010\uffa7\012\uffa7\001\002\000\016\010\uffa9\012\uffa9\016" +
    "\152\040\154\052\150\053\153\001\002\000\022\011\145" +
    "\012\uff8a\032\137\040\134\062\141\063\146\064\135\065" +
    "\115\001\002\000\004\012\271\001\002\000\004\010\272" +
    "\001\002\000\030\006\uffbd\007\uffbd\014\uffbd\015\uffbd\025" +
    "\uffbd\027\uffbd\031\uffbd\033\uffbd\034\uffbd\036\uffbd\065\uffbd" +
    "\001\002\000\026\006\uffc1\007\uffc1\014\uffc1\015\uffc1\025" +
    "\uffc1\031\uffc1\033\uffc1\034\uffc1\036\uffc1\065\uffc1\001\002" +
    "\000\030\006\uffc5\007\uffc5\014\uffc5\015\uffc5\025\uffc5\027" +
    "\275\031\uffc5\033\uffc5\034\uffc5\036\uffc5\065\uffc5\001\002" +
    "\000\024\006\114\014\125\015\130\025\132\031\122\033" +
    "\113\034\116\036\127\065\115\001\002\000\026\006\uffc0" +
    "\007\uffc0\014\uffc0\015\uffc0\025\uffc0\031\uffc0\033\uffc0\034" +
    "\uffc0\036\uffc0\065\uffc0\001\002\000\030\006\uffbc\007\uffbc" +
    "\014\uffbc\015\uffbc\025\uffbc\027\uffbc\031\uffbc\033\uffbc\034" +
    "\uffbc\036\uffbc\065\uffbc\001\002\000\006\010\uffaa\065\115" +
    "\001\002\000\026\017\264\020\173\022\175\052\150\053" +
    "\153\054\163\055\164\056\171\057\261\060\265\001\002" +
    "\000\006\010\uffab\012\uffab\001\002\000\004\010\304\001" +
    "\002\000\022\010\uffae\011\145\032\137\040\134\062\141" +
    "\063\146\064\135\065\115\001\002\000\004\010\307\001" +
    "\002\000\004\010\uffaf\001\002\000\006\012\uffaa\065\115" +
    "\001\002\000\004\012\311\001\002\000\024\006\uffbb\014" +
    "\uffbb\015\uffbb\025\uffbb\031\uffbb\033\uffbb\034\uffbb\036\uffbb" +
    "\065\uffbb\001\002\000\024\006\114\014\125\015\130\025" +
    "\132\031\122\033\113\034\116\036\127\065\115\001\002" +
    "\000\024\006\114\014\125\015\130\025\132\031\122\033" +
    "\113\034\116\036\127\065\115\001\002\000\030\006\uffba" +
    "\007\uffba\014\uffba\015\uffba\025\uffba\027\uffba\031\uffba\033" +
    "\uffba\034\uffba\036\uffba\065\uffba\001\002\000\004\027\316" +
    "\001\002\000\024\006\114\014\125\015\130\025\132\031" +
    "\122\033\113\034\116\036\127\065\115\001\002\000\026" +
    "\006\114\007\320\014\125\015\130\025\132\031\122\033" +
    "\113\034\116\036\127\065\115\001\002\000\030\006\uffb2" +
    "\007\uffb2\014\uffb2\015\uffb2\025\uffb2\027\uffb2\031\uffb2\033" +
    "\uffb2\034\uffb2\036\uffb2\065\uffb2\001\002\000\004\065\115" +
    "\001\002\000\010\012\323\020\173\022\175\001\002\000" +
    "\004\010\324\001\002\000\030\006\uffb4\007\uffb4\014\uffb4" +
    "\015\uffb4\025\uffb4\027\uffb4\031\uffb4\033\uffb4\034\uffb4\036" +
    "\uffb4\065\uffb4\001\002\000\014\005\uffc8\012\uffc8\013\uffc8" +
    "\020\332\065\uffc8\001\002\000\004\022\327\001\002\000" +
    "\004\022\330\001\002\000\004\065\331\001\002\000\004" +
    "\012\uffd1\001\002\000\004\021\343\001\002\000\012\005" +
    "\015\012\uffd0\013\334\065\014\001\002\000\006\005\015" +
    "\065\014\001\002\000\004\022\326\001\002\000\004\012" +
    "\uffcc\001\002\000\004\065\340\001\002\000\014\005\uffc9" +
    "\012\uffc9\013\uffc9\020\341\065\uffc9\001\002\000\004\021" +
    "\342\001\002\000\012\005\uffca\012\uffca\013\uffca\065\uffca" +
    "\001\002\000\012\005\uffc8\012\uffc8\013\uffc8\065\uffc8\001" +
    "\002\000\012\005\015\012\uffd0\013\334\065\014\001\002" +
    "\000\004\012\uffcd\001\002\000\004\011\uffd6\001\002\000" +
    "\004\011\350\001\002\000\010\005\015\012\uffd0\065\014" +
    "\001\002\000\004\012\352\001\002\000\010\005\uffce\006" +
    "\uffce\065\uffce\001\002\000\010\005\015\006\354\065\014" +
    "\001\002\000\026\006\uffd5\007\uffd5\014\uffd5\015\uffd5\025" +
    "\uffd5\031\uffd5\033\uffd5\034\uffd5\036\uffd5\065\uffd5\001\002" +
    "\000\026\006\uffb0\007\uffb0\014\uffb0\015\uffb0\025\uffb0\031" +
    "\uffb0\033\uffb0\034\uffb0\036\uffb0\065\uffb0\001\002\000\026" +
    "\006\114\007\357\014\125\015\130\025\132\031\122\033" +
    "\113\034\116\036\127\065\115\001\002\000\012\005\uffd4" +
    "\007\uffd4\037\uffd4\065\uffd4\001\002\000\004\006\uffe6\001" +
    "\002\000\004\006\uffe4\001\002\000\012\005\015\007\363" +
    "\037\074\065\014\001\002\000\004\002\000\001\002\000" +
    "\006\010\u0100\013\373\001\002\000\010\010\uffed\013\uffed" +
    "\020\376\001\002\000\004\010\375\001\002\000\006\010" +
    "\uffef\013\370\001\002\000\006\003\371\065\365\001\002" +
    "\000\004\013\373\001\002\000\004\010\ufff0\001\002\000" +
    "\006\003\371\065\365\001\002\000\004\010\uffee\001\002" +
    "\000\014\005\ufff2\006\ufff2\026\ufff2\030\ufff2\065\ufff2\001" +
    "\002\000\004\021\377\001\002\000\006\010\uffec\013\uffec" +
    "\001\002\000\014\005\ufff1\006\ufff1\026\ufff1\030\ufff1\065" +
    "\ufff1\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\052\006\001\001\000\002\001\001\000\004\066\007" +
    "\001\001\000\004\050\010\001\001\000\012\006\015\017" +
    "\017\024\016\056\011\001\001\000\006\022\366\023\365" +
    "\001\001\000\004\005\361\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\041\001\001\000\004\056\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\030\021\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\040\001\001\000\002" +
    "\001\001\000\004\015\045\001\001\000\002\001\001\000" +
    "\004\056\357\001\001\000\002\001\001\000\004\067\046" +
    "\001\001\000\002\001\001\000\004\033\050\001\001\000" +
    "\010\016\055\036\054\056\052\001\001\000\004\005\071" +
    "\001\001\000\006\054\061\055\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\075\056\072\001\001\000\002" +
    "\001\001\000\004\056\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\051\103\056\101\065\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\105\001\001" +
    "\000\006\006\107\056\011\001\001\000\004\072\110\001" +
    "\001\000\002\001\001\000\004\007\111\001\001\000\016" +
    "\011\123\025\122\035\116\046\125\047\117\053\120\001" +
    "\001\000\002\001\001\000\004\007\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\011\272\025\122\035" +
    "\116\046\273\047\117\053\120\001\001\000\002\001\001" +
    "\000\012\037\262\041\261\042\257\074\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\053" +
    "\137\057\142\060\135\061\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\053\137\057" +
    "\217\061\143\001\001\000\002\001\001\000\012\040\156" +
    "\041\154\063\155\076\215\001\001\000\004\056\211\001" +
    "\001\000\004\101\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\042\161\043\167\064\165\001\001\000" +
    "\002\001\001\000\012\053\137\057\142\060\146\061\143" +
    "\001\001\000\002\001\001\000\010\040\156\041\154\063" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\053\137\057\157\061\143\001\001\000\002" +
    "\001\001\000\010\042\161\043\167\064\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\053\137\061\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\077\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\012\200" +
    "\013\177\053\137\057\142\060\201\061\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\040\156\041\154" +
    "\063\155\001\001\000\012\053\137\057\142\060\203\061" +
    "\143\001\001\000\010\040\156\041\154\063\155\001\001" +
    "\000\002\001\001\000\012\053\137\057\142\060\206\061" +
    "\143\001\001\000\012\040\156\041\154\063\155\100\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\053\137\057\142\060\213\061\143\001\001" +
    "\000\010\040\156\041\154\063\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\042\161" +
    "\043\167\064\165\001\001\000\002\001\001\000\012\053" +
    "\137\057\142\060\222\061\143\001\001\000\012\031\223" +
    "\040\156\041\154\063\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\026\233\034\234\044" +
    "\235\053\137\057\142\060\232\061\143\001\001\000\012" +
    "\040\156\041\154\062\254\063\155\001\001\000\004\073" +
    "\244\001\001\000\004\045\241\001\001\000\004\032\236" +
    "\001\001\000\002\001\001\000\016\034\234\044\240\053" +
    "\137\057\142\060\232\061\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\034\243\053\137\057\142\060" +
    "\232\061\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\053\137\057\142\060\255\061\143\001" +
    "\001\000\010\040\156\041\154\063\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\053\137\057\142\060\265\061\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\040\156\041" +
    "\154\063\155\001\001\000\016\012\200\013\267\053\137" +
    "\057\142\060\201\061\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\025\122\035\116\046\276\047\275\053" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\301\027\302\053\300\001\001\000\010\037\262\041" +
    "\261\042\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\026\305\030\304\034\234\044\235\053\137\057" +
    "\142\060\232\061\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\025\301\027\307\053\300\001\001\000" +
    "\002\001\001\000\004\075\311\001\001\000\012\025\122" +
    "\035\312\046\313\053\120\001\001\000\012\025\122\035" +
    "\312\046\314\053\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\025\122\035\312\046\276\053\120\001" +
    "\001\000\016\011\123\025\122\035\116\046\125\047\117" +
    "\053\120\001\001\000\002\001\001\000\004\053\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\332\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\051\335\056\334\001\001\000\004\056\336\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\343\001\001\000\006\051\344\056\334\001\001" +
    "\000\002\001\001\000\004\070\346\001\001\000\002\001" +
    "\001\000\010\051\103\056\101\065\350\001\001\000\002" +
    "\001\001\000\004\004\352\001\001\000\006\006\107\056" +
    "\011\001\001\000\004\071\354\001\001\000\004\007\355" +
    "\001\001\000\016\011\123\025\122\035\116\046\125\047" +
    "\117\053\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\075\056\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\366\023\371\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\366" +
    "\023\373\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	MyTab.init(); //Universe obseg

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s=this.getScanner().next_token();
	if(s!=null && s.value!=null)
		log.info(s.toString()+" "+s.value.toString());
	return s;

    }


	
	boolean errorDetected=false;
	Logger log=Logger.getLogger(getClass());
	public void report_fatal_error(String message,Object info)throws java.lang.Exception{
		done_parsing();
		report_error(message,info);
	}
	public void syntax_error(Symbol cur_token){
		report_error("\nSintaksna greska",cur_token);
	}
	public void unrecovered_syntax_error(Symbol cur_token)throws java.lang.Exception{
		report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti",cur_token);
	}
	public void report_error(String message,Object info){
		errorDetected=true;
		StringBuilder msg=new StringBuilder(message);
		if(info instanceof Symbol)
			msg.append(" na liniji ").append(((Symbol)info).left);
		log.error(msg.toString());
	}
	public void report_info(String message,Object info){
		StringBuilder msg=new StringBuilder(message);
		if(info instanceof Symbol)
			msg.append(" na liniji ").append(((Symbol)info).left);
		log.info(msg.toString());
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	Obj currentMethod = null;
	Obj _this;
	Obj currentClass;
	
	Struct currentType, currentMethType;
	Struct varType = null;
	Struct newClass=null;
	
	boolean main=false;
	boolean returnFound=false;
	boolean in_class = false; 
	boolean in_method = false;
	boolean in_for=false;
	boolean ok=true;
	
	int printCallCount;
	int array_count = 0;	
	int var_count = 0;
	int con_count = 0;
	int const_value=0;
	int mainDeclarations = 0;
	int formParsNum=0;

	boolean vtSet = false;
	Map<String, Obj> redefiningMap = new HashMap<String, Obj>(); 
	SymbolDataStructure extendsSymbols = null;
	
	Scope globalScope = null;
	Scope functionScope=null;
	Scope classScope=null;
	//counter-i
	int global_scope=0;
	
	Stack<Obj> callingStack = new Stack<Obj>();
	Stack<Integer> actParsStack = new Stack<Integer>();
			

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // MulopRight ::= MODEQ 
            {
              Object RESULT =null;
		RESULT=Code.rem; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // MulopRight ::= DIVEQ 
            {
              Object RESULT =null;
		RESULT=Code.div; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // MulopRight ::= MULEQ 
            {
              Object RESULT =null;
		RESULT=Code.mul; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // MulopLeft ::= MODI 
            {
              Object RESULT =null;
		RESULT=Code.rem; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // MulopLeft ::= DIVI 
            {
              Object RESULT =null;
		RESULT=Code.div; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // MulopLeft ::= MULI 
            {
              Object RESULT =null;
		RESULT=Code.mul; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Mulop ::= MulopRight 
            {
              Integer RESULT =null;
		int mrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object mr = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT=(Integer)mr; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Mulop ::= MulopLeft 
            {
              Integer RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object ml = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT=(Integer)ml; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // AddopRight ::= MINUSEQ 
            {
              Object RESULT =null;
		RESULT=Code.sub; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // AddopRight ::= PLUSEQ 
            {
              Object RESULT =null;
		RESULT=Code.add; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // AddopLeft ::= MINUS 
            {
              Object RESULT =null;
		RESULT=Code.sub; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // AddopLeft ::= PLUS 
            {
              Object RESULT =null;
		RESULT=Code.add; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Addop ::= AddopRight 
            {
              Integer RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT=(Integer)ar; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Addop ::= AddopLeft 
            {
              Integer RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT=(Integer)al; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Relop ::= LOWEQ 
            {
              Integer RESULT =null;
		RESULT=Code.le; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Relop ::= LOWER 
            {
              Integer RESULT =null;
		RESULT=Code.lt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Relop ::= GREATEQ 
            {
              Integer RESULT =null;
		RESULT=Code.ge; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Relop ::= GREATER 
            {
              Integer RESULT =null;
		RESULT=Code.gt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Relop ::= NOTEQ 
            {
              Integer RESULT =null;
		RESULT=Code.ne; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Relop ::= EQEQ 
            {
              Integer RESULT =null;
		RESULT=Code.eq; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Assignop ::= MulopRight 
            {
              Object RESULT =null;
		int mrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object mr = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT=(int)mr; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Assignop ::= AddopRight 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		RESULT=(int)ar; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Assignop ::= EQUAL 
            {
              Object RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT=(int)Code.eq; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ActPars ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		    	int ap = actParsStack.pop();
				ap++;
				actParsStack.push(ap);
				if(!callingStack.isEmpty() && callingStack.peek().getKind() == Obj.Meth) {
					if(actParsStack.peek() > callingStack.peek().getLevel()) {
						parser.report_error("Semanticka greska na liniji " + eleft + ": broj formalnih i stvarnih parametara funkcije mora biti isti!", null);
					}
					
					else  {
						Collection<Obj> locals = callingStack.peek().getLocalSymbols();
						Iterator it = locals.iterator();
						Obj fp = null;
						
						for(int i=0; i<actParsStack.peek(); i++) {
							if(it.hasNext()) {
								fp = (Obj)it.next();
									if(it.hasNext()) {
										fp = (Obj)it.next();
									}
									else {
										fp = null;
										break;
									}
							}
						}
					
						if(fp != null && e.getKind()!=fp.getKind()) {
							parser.report_error("Semanticka greska na liniji " + eleft + ": formalan i stvaran parametar moraju biti kompatibilnog tipa!", null);
						}	
					}	
				}		
		    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ActPars ::= ActPars COMMA Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		    	int ap = actParsStack.pop();
				ap++;
				actParsStack.push(ap);
				if(!callingStack.isEmpty() && callingStack.peek().getKind() == Obj.Meth) {
					if(actParsStack.peek() > callingStack.peek().getLevel()) {
						parser.report_error("Semanticka greska na liniji " + eleft + ": broj formalnih i stvarnih parametara funkcije mora biti isti!", null);
					}
					
					else  {
						Collection<Obj> locals = callingStack.peek().getLocalSymbols();
						Iterator it = locals.iterator();
						Obj fp = null;
						
						for(int i=0; i<actParsStack.peek(); i++) {
							if(it.hasNext()) {
								fp = (Obj)it.next();
									if(it.hasNext()) {
										fp = (Obj)it.next();
									}
									else {
										fp = null;
										break;
									}
							}
						}
					
						if(fp != null && e.getKind()!=fp.getKind()) {
							parser.report_error("Semanticka greska na liniji " + eleft + ": formalan i stvaran parametar moraju biti kompatibilnog tipa!", null);
						}	
					}	
				}		
		    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ActualPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ActualPars ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Factor ::= Designator 
            {
              Struct RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	Code.load(d);
		 	RESULT=d.getType();
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Factor ::= LPAREN Expr RPAREN 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		 	RESULT=t;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Factor ::= NEW Type 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		  	Obj obj=new Obj(Obj.Var, "t", t);
		  	RESULT = obj.getType();
		  	if(t.getKind() != Struct.Class) {
			   		parser.report_error("Semanticka greska na liniji " + tleft + ": Tip mora biti klasa!", null);
			   		RESULT = MyTab.noType;
			}
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Factor ::= NEW Type LMEDBRACE Expr RMEDBRACE 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		 	Struct arrayType = new Struct(Struct.Array);
			arrayType.setElementType(t);
			Obj obj=new Obj(Obj.Var, "t", arrayType);
		 	RESULT =obj.getType();
		 	if(e.getKind()!=Struct.Int){
		 	parser.report_error("Greska na liniji: "+eleft+". Tip promenljive u nizu mora biti Int.",null);
		 	RESULT=MyTab.noType;
		 	}
		 	else{
		 			Code.put(Code.newarray);	//POD PRETPOSTAVKOM DA SE U OKVIRU OBRADE NETERMINALA EXPR NA STEK STAVIO POTREBAN OBJEKAT KOJI PREDSTAVLJA VELICINU NIZA
				   	
				   	if(t.getKind() == Struct.Char)
				   		Code.put(0);
				   	else
				   		Code.put(1);
		 	}
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Factor ::= Designator NT$11 LPAREN ActualPars RPAREN 
            {
              Struct RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			
			if(Obj.Meth == func.getKind()) {
				parser.report_info("Pronadjen poziv funkcije "+func.getName()+" na liniji: "+funcleft,null);
				int formalPars = func.getLevel();
				if(formalPars > actParsStack.peek()) {
					parser.report_error("Semanticka greska na liniji " + funcleft + ": broj stvarnih i formalnih parametara mora biti isti!", null);
				}
			else {
				int destAdr = func.getAdr() - Code.pc;	//func.getAdr() DAJE ADRESU PRVE INSTRUKCIJE U FJI
				Code.put(Code.call);
				Code.put2(destAdr);	
				}
			}
			else {
				parser.report_error("Greska na liniji: "+funcleft+" ime: "+func.getName()+" nije funkcija.",null);
				RESULT=MyTab.noType;
			}
			actParsStack.pop();
			callingStack.pop();
			RESULT = func.getType();
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$11 ::= 
            {
              Struct RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

		 	callingStack.push(func);
			actParsStack.push(0);
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Factor ::= BOOL 
            {
              Struct RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			
		 	Obj c = new Obj(Obj.Con, "", MyTab.boolType);
		   	if(b.equals("true"))
		   		c.setAdr(1);
		   	else 
		   		c.setAdr(0);
		   	Code.load(c);
		 	RESULT=new Struct(Struct.Bool);
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Factor ::= CHAR 
            {
              Struct RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		 	Obj c = new Obj(Obj.Con, "", MyTab.charType);
		   	c.setAdr(ch);
		   	Code.load(c);
		 	RESULT=new Struct(Struct.Char);
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Factor ::= NUMBER 
            {
              Struct RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
		 	 Obj c=new Obj(Obj.Con,"",MyTab.intType);
		 	 c.setAdr(n.intValue());
		 	 Code.load(c);
			 RESULT=new Struct(Struct.Int);
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Designator ::= Designator LMEDBRACE NT$9 Expr NT$10 RMEDBRACE 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			   	RESULT = new Obj(Obj.Elem, "elem", o.getType().getElemType());
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$10 ::= 
            {
              Obj RESULT =(Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

			   	if(e.getKind()!=MyStruct.Int) {
				  		parser.report_error("Semanticka greska na liniji " + eleft + " izraz u uglastim zagradama mora biti tipa int!", null);
				  		RESULT=MyTab.noObj;
				  	}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$9 ::= 
            {
              Obj RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

			   	   	Obj ime=MyTab.find(o.getName());
			   	   	if(ime==MyTab.noObj)
			   	   	{
			   	   		parser.report_error("Greska na liniji "  + oleft + ":niz nije deklarisan.",null);
			   	   		RESULT=MyTab.noObj;
			   	   	}
			   	    if (o.getType().getKind()==MyStruct.Array) { 
				   		RESULT = new Obj(Obj.Elem, "", o.getType().getElemType());
				   		Code.load(o);
				   		if(MyTab.currentScope() == functionScope) {
			   					if( functionScope.findSymbol(o.getName()) != null ) {
			   						parser.report_info("Koriscenje lokalnog niza " + o.getName() + " na liniji " + oleft, null);
			   					}
			   					else {
			   						parser.report_info("Koriscenje globalnog niza " + o.getName() + " na liniji " + oleft, null);
			   					}
			   				}
			   		} else {
			   			parser.report_error("Greska na liniji "  + oleft + ":tip nije niz",null);
			   			RESULT=MyTab.noObj;
			   		}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		   
	   		   		Obj simbol = MyTab.find(name);
			   		
			   		if(simbol == MyTab.noObj) 
			   			parser.report_error("Semanticka greska na liniji: " + nameleft + ", simbol " + name + " ne postoji u tabeli simbola!", null);
			   			
			   		else if(simbol.getKind() == Obj.Con) {
			   			parser.report_info("Koriscenje konstante " + name + " na liniji: " + nameleft, null);
			   		}
			   		else if(simbol.getKind() == Obj.Var||(simbol.getKind() == Obj.Type && simbol.getType().getKind() == Struct.Class)) {
			   			if(MyTab.currentScope() == functionScope) {
			   					if( functionScope.findSymbol(name) != null ) {
			   						parser.report_info("Koriscenje lokalne promenljive " + name + " na liniji " + nameleft, null);
			   					}
			   					else {
			   						parser.report_info("Koriscenje globalne promenljive " + name + " na liniji " + nameleft, null);
			   					}
			   				}
			   		}
			   		else if(simbol.getKind() == Obj.Meth) {
			   			if(MyTab.currentScope() == functionScope) {
			   				parser.report_info("Koriscenje globalne funkcije " + name + " na liniji " + nameleft, null);
						   	/*if(func.getName().equalsIgnoreCase("chr")){
								if(a.equals(Struct.Int)){
									parser.report_error("Greska na liniji: "+funcleft+". Funkcija chr mora da ima Int kao parametar.",null);
									RESULT=MyTab.noType;
								}
							}
							if(func.getName().equalsIgnoreCase("ord")){
								if(a.equals(Struct.Char)){
									parser.report_error("Greska na liniji: "+funcleft+". Funkcija ord mora da ima Char kao parametar.",null);
									RESULT=MyTab.noType;
								}
							}
							if(func.getName().equalsIgnoreCase("len")){
								if(a.equals(Struct.Array)){
									parser.report_error("Greska na liniji: "+funcleft+". Funkcija len mora da ima niz kao parametar.",null);
									RESULT=MyTab.noType;
								}
							
			   				}*/
			   				
			   			}
			   		}
			   		RESULT = simbol;
	   		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Designator ::= Designator DOT IDENT 
            {
              Obj RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			
			  		if(d.getType().getKind() != Struct.Class) {
			   			parser.report_error("Semanticka greska na liniji " + dleft + ": ime " + d.getName() + " nije klasa!", null);
			   			RESULT = MyTab.noObj;
			   		}
			   		else {
			   			Obj ident = d.getType().getMembersTable().searchKey(i);
			   			if(ident == null) {
			   				parser.report_error("Semanticka greska na liniji " + ileft + ": ime " + i + " ne pripada klasi " + d.getName() + " !", null);
			   				RESULT = MyTab.noObj;
			   			}
			   			else {
			   				if(ident.getKind() == Obj.Fld) {
			   					parser.report_info("Koriscenje polja " + i + " na liniji " + ileft, null);
			   				}
			   				else if(ident.getKind() == Obj.Meth) { 
			   					parser.report_info(ident.getLevel()+"Koriscenje metode " + i + " na liniji " + ileft, null);
			   					
			   				}
			   				RESULT = ident;
			   			}
			   		}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Term ::= Term Mulop Factor 
            {
              Struct RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 if(t1.getKind()!=t2.getKind()) {
			parser.report_error("Greska na liniji: "+t1left+" nekompatibilni tipovi u izrazu.",null);
			RESULT=MyTab.noType;
		 }
		 if(t1.getKind()!=Struct.Int||t2.getKind()!=Struct.Int){
		 	parser.report_error("Greska na liniji: "+t1left+". Tip promenljive u izrazu mora biti Int.",null);
		 	RESULT=MyTab.noType;
		 }
		 Code.put(op.intValue());
		 RESULT = t1;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Term ::= Factor 
            {
              Struct RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct f1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 RESULT=f1; 
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= Term 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		RESULT=t;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= MINUS Term 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		if(t.getKind()!=Struct.Int){
			parser.report_error("Greska na liniji:"+tleft+". Promenljiva u izrazu mora biti tipa Int.",null);
			RESULT=MyTab.noType;
		}
		else{
			Code.put(Code.neg);
			RESULT=t;
		}
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= Expr Addop Term 
            {
              Struct RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			if(e.getKind()!=t.getKind()){
				parser.report_error("Greska na liniji: "+tleft+" nekompatibilni tipovi u izrazu.",null);
				RESULT =MyTab.noType;
			}
			if(e.getKind()!=MyStruct.Int){
				parser.report_error("Greska na liniji: "+eleft+". Izraz pre operacije mora biti tipa int.",null);
				RESULT=MyTab.noType;
			}
			if(t.getKind()!=MyStruct.Int){
				parser.report_error("Greska na liniji: "+tleft+". Izraz mora biti tipa int.",null);
				RESULT=MyTab.noType;
			}
			Code.put(op.intValue());
			RESULT=e;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct e1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			 	if(e1.getKind()!=e2.getKind()) {
		 			parser.report_error("Nekompatibilni tipovi na liniji " + e1left,null);
		 		}
		 		RESULT=op;
		 	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CondFactList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CondFactList ::= CondFactList AND CondFact 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					RESULT=li;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CondTerm ::= CondFact CondFactList 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				RESULT=0;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CondTermList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CondTermList ::= CondTermList OR CondTerm 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					RESULT=c;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Condition ::= CondTerm CondTermList 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			 	RESULT=0;
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DesignatorStatement ::= Designator MINUSMINUS 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							if(dest!=null) {
							if(dest.getKind()!=Struct.Int) 
		 						parser.report_error("Promenljiva: "+dest+" mora biti tipa int. - Greska na liniji " + destleft,null);
							}
							else {
								if(dest.getKind() == Obj.Elem) {
								Code.put(Code.dup2);
							}
							
							Code.load(dest);
							
							Code.loadConst(1);
							Code.put(Code.sub); 
							Code.store(dest);
							}
							RESULT=dest;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DesignatorStatement ::= Designator PLUSPLUS 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							if(dest.getType().getKind()!=Struct.Array&&dest.getType().getKind()!=Struct.Int&&dest.getType().getKind()!=Struct.Char&&dest.getType().getKind()!=Struct.Bool&&dest.getType().getKind()!=Struct.Class){
								parser.report_error( "Tip kome se dodeljuje mora biti promenljiva, element niza ili polje unutar objekta. Greska na liniji " + destleft,null);
		 						RESULT=MyTab.noType;
							}
							if(dest!=null) {
							if(dest.getKind()!=Struct.Int) 
		 						parser.report_error("Promenljiva: "+dest+" mora biti tipa int. - Greska na liniji " + destleft,null);
							}
							else {
								if(dest.getKind() == Obj.Elem) {
								Code.put(Code.dup2);
							}
							
							Code.load(dest);
							Code.loadConst(1);
							Code.put((int)Code.add); 
							Code.store(dest);
							}
							RESULT=dest;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DesignatorStatement ::= Designator Assignop Expr 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							Obj ex=MyTab.find(e.toString());
							if(dest.getType().getKind()!=Struct.Array&&dest.getType().getKind()!=Struct.Int&&dest.getType().getKind()!=Struct.Char&&dest.getType().getKind()!=Struct.Bool&&dest.getType().getKind()!=Struct.Class){
								parser.report_error( "Tip kome se dodeljuje mora biti promenljiva, element niza ili polje unutar objekta. Greska na liniji " + destleft,null);
		 						RESULT=MyTab.noType;
							}
							else
							if (e.getKind()!=dest.getType().getKind()) {
		 						parser.report_error( "Ovaj tip se ne moze dodeliti promenjivoj tipa: " + dest.getType().getKind() + " - Greska na liniji " + destleft,null);
		 						RESULT=MyTab.noType;
		 						}
		 					if((Integer)op!=Code.eq){
		 					Code.load(dest);
		 					Code.put((int)op);
		 					}
		 					Code.store(dest);
							RESULT=dest;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DesignatorStatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DesignatorStatementList ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NumConstList ::= 
            {
              Object RESULT =null;
		RESULT=1;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumConstList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NumConstList ::= COMMA NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		RESULT=n;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumConstList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ConditionList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ConditionList ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Matched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Matched ::= PRINT LPAREN Expr NumConstList RPAREN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int numCleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int numCright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object numC = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				if (e.getKind()!=MyStruct.Int&&e.getKind()!=MyStruct.Char&&e.getKind()!=MyStruct.Bool)
					parser.report_error("Greska na liniji "+ eleft + ". Izraz mora biti integer, boolean ili char.",null);
				if(e.getKind()==MyStruct.Int){
					Code.loadConst((int)numC);
					Code.put(Code.print);
				}
				if(e.getKind()==MyStruct.Char){
					Code.loadConst((int)numC);
					Code.put(Code.bprint);
				}
				if(e.getKind()==MyStruct.Bool){
					
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				if (des.getKind()!=Struct.Int&&des.getKind()!=Struct.Char&&des.getKind()!=Struct.Bool)
					parser.report_error("Greska na liniji "+ desleft + ". Izraz mora biti integer, boolean ili char.",null);
				else{	
					if(des.getKind() == Struct.Int) {
								Code.put(Code.read);	//ZA READ NEMA NIKAKVIH ARGUMENATA, ZATO NE STAVLJAM NISTA NA STEK
								Code.store(des); 			
					}
					else if(des.getKind() == Struct.Char) {
								Code.put(Code.bread);
								Code.store(des);
					}
					else if(des.getKind() == Struct.Bool) {
								Code.put(Code.read);
								Code.store(des);
					}
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Matched ::= RETURN SEMI 
            {
              Object RESULT =null;
		int linijaleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int linijaright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object linija = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if (currentMethType != MyTab.noType)
					parser.report_error("Greska na liniji "+ linijaleft + ":metod ne sme imati return bez izraza jer nije void!",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Matched ::= RETURN Expr NT$8 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$8 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
	
				returnFound=true;
				if(in_method=false){
					parser.report_error("Greska na liniji: "+tleft+". Iskaz RETURN se moze koristiti samo unutar metoda i funkcija.",null);
				}
				if(currentMethType==MyTab.noType){
					parser.report_error("Greska na liniji: "+tleft+". Povratni tip funkcije je VOID i ne moze imati vrednost u return iskazu.",null);
				}
				if(currentMethType.getKind()!=t.getKind()){
					parser.report_error("Greska na liniji: "+tleft+". Tip izraza u return naredbi se ne slaze sa tipom povratne vrednosti funkcije.",null);
				
				}
				Code.put(Code.exit);
				Code.put(Code.return_);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Matched ::= CONTINUE SEMI 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(in_for==false)
					parser.report_error("Greska na liniji: "+cleft+". Continue mora biti unutar for petlje.",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Matched ::= BREAK SEMI 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(in_for==false)
					parser.report_error("Greska na liniji: "+bleft+". Break mora biti unutar for petlje.",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Matched ::= FOR LPAREN DesignatorStatementList SEMI ConditionList SEMI DesignatorStatementList RPAREN NT$7 Matched 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				in_for=false;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$7 ::= 
            {
              Object RESULT =null;

				in_for=true;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Matched ::= If Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Matched ::= Designator NT$6 LPAREN ActualPars RPAREN SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
			
			if(Obj.Meth == func.getKind()){
				parser.report_info("Pronadjen poziv funkcije "+func.getName()+" na liniji: "+funcleft,null);
				int formalPars = func.getLevel();
				if(formalPars > actParsStack.peek()) {	//U ActParsList smo obradili <
					parser.report_error("Semanticka greska na liniji " + funcleft + ": broj stvarnih i formalnih parametara mora biti isti!", null);
				}
				else {	//AKO JE SVE ISPRAVNO SEMANTICKI
				
							int destAdr = func.getAdr() - Code.pc;	//func.getAdr() DAJE ADRESU PRVE INSTRUKCIJE U FJI
							Code.put(Code.call);
							Code.put2(destAdr);	//put2 STAVLJA RELATIVAN SKOK
							if(!func.getType().equals(MyTab.noType)) {
								Code.put(Code.pop);
							}
							
				}
				}
			else {
				parser.report_error("Greska na liniji: "+funcleft+" ime: "+func.getName()+" nije funkcija.",null);
				RESULT=MyTab.noType;
				}
			callingStack.pop();
			actParsStack.pop();
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$6 ::= 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

				callingStack.push(func); 
				actParsStack.push(0);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Matched ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Unmatched ::= If Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Unmatched ::= If Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // If ::= IF LPAREN Condition NT$5 RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("If",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$5 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

				if(cond.equals(Struct.Bool)){
					parser.report_error("Greska na liniji: "+condleft+". Uslov mora biti boolean tipa.",null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int vTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String vType = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			Obj typeNode = MyTab.find(vType);
			if(typeNode != MyTab.noObj) {
				if(typeNode.getKind() == Obj.Type) {
					currentType = typeNode.getType();
					
					//OVDE PROVERI DA LI JE U PITANJU KLASA DA BI PRIKAZALA KORISCENJE
					if(currentType.getKind() == Struct.Class)
						parser.report_info("Koriscenje klase " + vType + " kao tipa na liniji " + vTypeleft, null);
					
					RESULT = currentType;
				}
				else {
					parser.report_error("Ime " + vType + " nije tip!" , null);
					RESULT = MyTab.noType;
				}
			}
			else {
				parser.report_error("Semanticka greska na liniji " + vTypeleft + ":" + " Nije pronadjen tip " + vType + "!" , null);
				RESULT = MyTab.noType;
			}
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Type ::= VOID 
            {
              Struct RESULT =null;
		
			RESULT=MyTab.noType;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FormParamList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FormParamList ::= FormParamList COMMA Type IDENT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					parser.report_info("Parametar funkcije: "+name+" na liniji "+nameleft,null);
					if(MyTab.currentScope.findSymbol(name)!=null)
						{
							parser.report_error("Vec postoji promenljiva sa imenom: " + name,null);
						}
					else {
						Obj temp = MyTab.insert(Obj.Var, name, currentType);
						formParsNum++;
						RESULT=f;
						}
			
				  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FormParamList ::= FormParamList COMMA Type IDENT LMEDBRACE RMEDBRACE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					parser.report_info("Parametar funkcije: "+name+" na liniji "+nameleft,null);
				if(MyTab.currentScope.findSymbol(name)!=null)
					{
						parser.report_error("Vec postoji promenljiva sa imenom: " + name,null);
					}
				else {
					Struct arrayType=new Struct(Struct.Array);
					arrayType.setElementType(currentType);
					Obj temp = MyTab.insert(Obj.Var, name, arrayType);
					formParsNum++;
					}
			
				  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FormPars ::= VarArgs 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormPars ::= Type IDENT FormParamList VarArgs 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				parser.report_info("Parametar funkcije: "+name+" na liniji "+nameleft,null);
				if(MyTab.currentScope.findSymbol(name)!=null)
					{
						parser.report_error("Vec postoji promenljiva sa imenom: " + name,null);
					}
				else {
					Obj temp = MyTab.insert(Obj.Var, name, currentType);
					formParsNum++;
					}
			
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormPars ::= Type IDENT LMEDBRACE RMEDBRACE FormParamList VarArgs 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
				parser.report_info("Parametar funkcije: "+name+" na liniji "+nameleft,null);
				if(MyTab.currentScope.findSymbol(name)!=null)
					{
						parser.report_error("Vec postoji promenljiva sa imenom: " + name,null);
					}
				else {
					Struct arrayType=new Struct(Struct.Array);
					arrayType.setElementType(currentType);
					Obj temp = MyTab.insert(Obj.Var, name, arrayType);
					formParsNum++;
					}
			
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VarArgs ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarArgs",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VarArgs ::= Type DOT DOT DOT IDENT 
            {
              Object RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct typeName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarArgs",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MethodDecl ::= STATIC Type IDENT LPAREN FormPars RPAREN VarDeclList LBRACE NT$4 StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		 
				if(!returnFound && retType != MyTab.noType)
					parser.report_error("Semanticka greska na liniji: "+methNameleft+". Funkcija: "+methName+" nema return iskaz.",null);
				MyTab.chainLocalSymbols(currentMethod);
				returnFound=false;
				currentMethod=null;	
				currentMethType=null;
				global_scope--;
				MyTab.closeScope();
				functionScope=null;
				in_method=false;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$4 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
  
				if(!in_class==true)
					parser.report_error("Greska na liniji: "+retTypeleft+". Staticka funkcija: "+methName+" mora biti unutar klase.",null);
				in_method=true;
				currentMethod=MyTab.insert(Obj.Meth,methName,currentType);
				currentMethType=retType;
				MyTab.openScope();
				functionScope=MyTab.currentScope();
				global_scope++;
				parser.report_info("Obradjuje se metoda: "+methName+" na liniji "+methNameleft,null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodDecl ::= Type IDENT NT$2 LPAREN FormPars RPAREN VarDeclList LBRACE NT$3 StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		 
				if(in_class) 
					  		_this = MyTab.insert(Obj.Var, "this", MyTab.noType);
				if(!returnFound && retType != MyTab.noType)
					parser.report_error("Semanticka greska na liniji: "+methNameleft+". Funkcija: "+methName+" nema return iskaz.",null);
				MyTab.chainLocalSymbols(currentMethod);
				currentMethod.setLocals(MyTab.currentScope.getLocals());
				MyTab.closeScope();
				Code.put(Code.exit);
				Code.put(Code.return_);
				if(currentMethType!=MyTab.noType && returnFound==false){
					Code.put(Code.trap);
					Code.put(1);
				}
				global_scope--;
				functionScope=null;
				main=false;
				returnFound=false;
				in_method=false;
				currentMethType=null;
				formParsNum=0;
				currentMethod=null;	
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;

				currentMethod.setLevel(formParsNum);
				functionScope=MyTab.currentScope();
				global_scope++;
				Code.put(Code.enter);
				Code.put(formParsNum);
				Code.put(functionScope.getnVars()); //broj promenljivih u trenutnom scope-u.
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$2 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					Obj funkcija=MyTab.find(methName);
					if(funkcija==MyTab.noObj){
						parser.report_info("Obradjuje se metoda: "+methName+" na liniji "+methNameleft,null);
						currentMethod=MyTab.insert(Obj.Meth,methName,retType);
						if(methName.equalsIgnoreCase("main")){
							Code.mainPc=Code.pc;
							main=true;
							}
						currentMethType=currentType;
						MyTab.openScope();
						in_method=true;
						//currentMethod.setAdr(Code.pc);
						}
					else {
						parser.report_error("Semanticka greska na liniji " + methNameleft + " : Ime funkcije vec postoji!", null);
					}
					
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				   RESULT=m;
				  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Field ::= IDENT LMEDBRACE RMEDBRACE 
            {
              Obj RESULT =null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
			//proveri da li ima kolizije
			Obj var = MyTab.currentScope().findSymbol(vName);
			if(var != null) {
				if(newClass.getElemType() !=null && newClass.getElemType().getMembersTable().searchKey(vName) == null)
					
					parser.report_error("Semanticka greska na liniji " + vNameleft + " : Ime promenljive vec postoji!", null);
				
				else {
					MyTab.currentScope().getLocals().deleteKey(vName);
					
					Struct arrayType = new Struct(Struct.Array);
					arrayType.setElementType(currentType);
					MyTab.insert(Obj.Fld, vName, arrayType);
					
					MyTab.chainLocalSymbols(newClass);
					
					parser.report_info("Deklarisan niz kao polje " + vName + " na liniji " + vNameleft, null);
				}
			}
			else if(currentType != null) {
				Struct arrayType = new Struct(Struct.Array);
				arrayType.setElementType(currentType);
				MyTab.insert(Obj.Fld, vName, arrayType);
				
				MyTab.chainLocalSymbols(newClass);
				
				parser.report_info("Deklarisan niz kao polje " + vName + " na liniji " + vNameleft, null);
			}
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Field",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Field ::= IDENT 
            {
              Obj RESULT =null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 

			Obj var = MyTab.currentScope().findSymbol(vName);
			
			if(var != null) {
			
				if(newClass.getElemType() !=null && newClass.getElemType().getMembersTable().searchKey(vName) == null)
					
					parser.report_error("Semanticka greska na liniji " + vNameleft + " : Ime promenljive vec postoji!", null);
				
				else {
					MyTab.currentScope().getLocals().deleteKey(vName);
					
					MyTab.insert(Obj.Fld, vName, currentType);
				
					MyTab.chainLocalSymbols(newClass);
					
					parser.report_info("Deklarisano polje " + vName + " tipa " + currentType + " na liniji " + vNameleft, null);
				}
			}
			else if(currentType != null) {
				MyTab.insert(Obj.Fld, vName, currentType);
				
				MyTab.chainLocalSymbols(newClass);
				
				parser.report_info("Deklarisano polje " + vName + " tipa " + currentType + " na liniji " + vNameleft, null);
			}
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Field",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FieldDeclList ::= Field 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FieldDeclList ::= FieldDeclList COMMA Field 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassVarDecl ::= Type error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassVarDecl ::= error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassVarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
				 parser.report_error("Uspesan oporavak od greske na liniji: "+eleft+".",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassVarDecl ::= Type FieldDeclList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassVarDeclList ::= ClassVarDeclList ClassVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Extends ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Extends",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Extends ::= EXTENDS error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Extends",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Extends ::= error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Extends",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Extends ::= EXTENDS Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(t.getKind() != Struct.Class) {
					parser.report_error("Semanticka greska na liniji " + tleft + ": Tip za extends mora biti klasa! ", null);
				}
				else {
					
					newClass.setElementType(t);	//POSTAVIMO KO MU JE NATKLASA!!!
					
					extendsSymbols = t.getMembersTable();
					
					
					MyTab.chainLocalSymbols(newClass);
					RESULT=t;
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Extends",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassName ::= IDENT 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			  	Obj classNode = MyTab.find(className);
			  	if(classNode != MyTab.noObj) {
			  		parser.report_error("Semanticka greska na liniji " + classNameleft + " : Ime klase se vec koristi! ", null);
			  		RESULT = MyTab.noObj;
			  		ok = false;
			  	}
			  	else {				
			  		newClass = new Struct(Struct.Class);
				  	
				  	Obj obj = MyTab.insert(Obj.Type, className, newClass);				  	
				  	
				  	RESULT=className;
				  	MyTab.openScope();
				  	global_scope++;
				  	classScope = MyTab.currentScope();
				  	
				  	Obj vtPtr = MyTab.insert(Obj.Fld, "vtPtr", MyTab.intType);
				  					  	
				  	MyTab.chainLocalSymbols(newClass);
				  	
				  	parser.report_info("Obradjuje se klasa " + className + " na liniji " + classNameleft, null);
				  	ok = true;
					
				}
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassName",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OptionalMethods ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalMethods",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OptionalMethods ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalMethods",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ClassDecl ::= CLASS ClassName Extends NT$1 LBRACE ClassVarDeclList OptionalMethods RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		 
					
				MyTab.chainLocalSymbols(newClass);
				
			  	if(true) {		//if(ok)							  
			  		Obj obj = new Obj(Obj.Var, "#vt_finish" + globalScope.getnVars(), MyTab.intType);
			  		globalScope.addToLocals(obj);
			  		obj.setLevel(0);
			  		global_scope--;
			  		MyTab.closeScope();
			  		vtSet = false;
			  		parser.report_info("Definisana klasa " + c + " na liniji " + cleft, null);
			  	}
			  	
			  	classScope = null;
			  	newClass = null;
			  	extendsSymbols = null;
			  	
			  	redefiningMap.clear();
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$1 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

			  	//PRVO UBACUJEMO POLJA POTKLASE
			  	//DRUGO UBACUJEMO POLJA NATKLASE
			  	//TRECE UBACUJEMO METODE POTKLASE
			  	//CETVRTO UBACUJEMO METODE NATKLASE
			  				  	
			  	if(extendsSymbols!=null) {
				  	for(Obj s: extendsSymbols.symbols()) {
				  			if(s.getKind() == Obj.Fld) {	//POLJE
				  				if(MyTab.currentScope().findSymbol(s.getName()) == null) {
				  					Obj obj = MyTab.insert(s.getKind(), s.getName(), s.getType());
				  				}
				  			}
				  			else if(s.getKind() == Obj.Meth) {
				  				if(MyTab.currentScope().findSymbol(s.getName()) == null) {
				
									Obj currentMeth = MyTab.insert(s.getKind(), s.getName(), s.getType());
										
									currentMeth.setLevel(s.getLevel());
									currentMeth.setAdr(s.getAdr());
										
									MyTab.openScope();
									global_scope++;	
									Collection<Obj> locals = s.getLocalSymbols();
									Iterator it = locals.iterator();
										
									for(int i=0; i<s.getLevel(); i++) {
										if(it.hasNext()) {
											MyTab.currentScope().addToLocals((Obj)it.next());
										}
									}
									MyTab.chainLocalSymbols(currentMeth);
									global_scope--;
									MyTab.closeScope();
									
									//UBACIVANJE U VIRTUELNU TABELU
									String name = currentMeth.getName().toString();
									for(int i=0; i<name.length(); i++) {	
										Obj obj = new Obj(Obj.Var, "#" + globalScope.getnVars() + name.charAt(i), MyTab.charType);
										
										globalScope.addToLocals(obj);
										
										if(!vtSet) {
											Obj vtPtr = MyTab.currentScope().findSymbol("vtPtr");
											
											vtPtr.setFpPos(obj.getAdr());
										}
										obj.setLevel(0);
									}
									
									//DA SE ZNA DA JE KRAJ IMENA
									Obj obj = new Obj(Obj.Var, "#" + globalScope.getnVars() + "-1", MyTab.intType);
									globalScope.addToLocals(obj);
									obj.setLevel(0);
									obj = new Obj(Obj.Var, "#adr_" + name.toString() + globalScope.getnVars() + "-" + currentMeth.getAdr(), MyTab.intType);
									globalScope.addToLocals(obj);
									//OVDE MI TREBA OBJ.GETADR ZBOG REDEFFINISANJA
									redefiningMap.put(currentMeth.getName(), obj);
									obj.setLevel(0);
								}
				  			}
				  	}
					
					MyTab.chainLocalSymbols(newClass);
				}
				
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Var ::= IDENT LMEDBRACE RMEDBRACE 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
			Obj var = MyTab.find(name);
			if(var != MyTab.noObj) {
				parser.report_error("Semanticka greska na liniji " + nameleft + " : Ime promenljive vec postoji!", null);
			}
			else if(currentType != null) {
				Struct arrayType = new Struct(Struct.Array);
				arrayType.setElementType(currentType);
				MyTab.insert(Obj.Var, name, arrayType);
				parser.report_info("Deklarisan niz " + name + " na liniji " + nameleft, null);
			}
			if(global_scope==0)
			array_count++;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Var ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			
			Obj var = MyTab.find(name);
			if(var != MyTab.noObj) {
				parser.report_error("Semanticka greska na liniji " + nameleft + " : Ime promenljive vec postoji!", null);
			}
			else if(currentType != null) {
				MyTab.insert(Obj.Var, name, currentType);
				parser.report_info("Deklarisana promenljiva " + name + " na liniji " + nameleft, null);
			}
			if(global_scope==0)
			var_count++;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarList ::= error COMMA VarList 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			parser.report_info("Uspesan oporavak od greske pri definisanju globalne promenljive na liniji " + cleft,null); 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarList ::= Var 
            {
              Object RESULT =null;
		
			if(main)
			mainDeclarations++;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarList ::= Var COMMA VarList 
            {
              Object RESULT =null;
		
			if(main)
			mainDeclarations++;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		   		currentType=null;
		  		parser.report_info("Uspesan oporavak od greske pri definisanju globalne promenljive na liniji " + sleft,null); 
	  	   	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDecl ::= Type VarList SEMI 
            {
              Object RESULT =null;
		
				currentType=null;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Const ::= BOOL 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(bool.equals("true"))
				const_value = 1;
				else 
				const_value = 0;
				RESULT = MyTab.boolType; 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Const ::= CHAR 
            {
              Object RESULT =null;
		int chrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int chrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character chr = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				const_value=(int)chr;
				RESULT = MyTab.charType; 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Const ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				const_value=num;
				RESULT = MyTab.intType;  
				
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IdentList ::= Const 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT=o;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IdentList ::= IdentList COMMA IDENT EQUAL Const 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(MyTab.currentScope.findSymbol(name) != null)
				  		parser.report_error("Greska na liniji: "+nameleft+". Vec postoji identifikator sa imenom: " + name,null);
				  	else {
				  		Obj temp = MyTab.insert(Obj.Con, name, currentType);
				  		temp.setAdr(const_value);
				  		if(!o.equals(currentType))
				  			parser.report_error("Greska na liniji: " + nameleft+" . Tip koji se dodeljuje ne odgovara tipu kome se dodeljuje. ",null);
				  		parser.report_info("Deklarisana globalna konstanta " +name + " na liniji " + nameleft, null);
				  	}
				  if(global_scope==0)
				  con_count++;
				  RESULT=o;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST error SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			  	parser.report_info("Uspesan oporavak od greske na liniji " + sleft + " pri definisanju konstante.",null); 
		  	  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstDecl ::= CONST Type IDENT EQUAL IdentList SEMI 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				  	if(MyTab.currentScope.findSymbol(name) != null)
				  		parser.report_error("Greska na liniji: "+nameleft+". Vec postoji identifikator sa imenom: " + name,null);
				  	else {
				  		Obj temp = MyTab.insert(Obj.Con, name, currentType);
				  		temp.setAdr(const_value);
				  		if(!o.equals(currentType))
				  			parser.report_error("Greska na liniji: " + nameleft+" . Tip koji se dodeljuje ne odgovara tipu kome se dodeljuje. ",null);
				  		parser.report_info("Deklarisana globalna konstanta " + name + " na liniji " + nameleft, null);
				  	}
				  	if(global_scope==0)
					con_count++;
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SomeDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SomeDeclList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SomeDeclList ::= SomeDeclList ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SomeDeclList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SomeDeclList ::= SomeDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SomeDeclList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SomeDeclList ::= SomeDeclList ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SomeDeclList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			
			globalScope=MyTab.currentScope();
			
			Obj len = MyTab.find("len");
			len.setAdr(Code.pc);
			Code.put(Code.enter);
			Code.put(1);
			Code.put(1);
			Code.put(Code.load);
			Code.put(0);
			Code.put(Code.arraylength);
			Code.put(Code.exit);
			Code.put(Code.return_);
			 
			Obj chr = MyTab.find("chr");
			chr.setAdr(Code.pc);
			Code.put(Code.enter);
			Code.put(1);
			Code.put(1);
			Code.put(Code.load);
			Code.put(0);
			Code.put(Code.exit);
			Code.put(Code.return_);
			  
			Obj ord = MyTab.find("ord");
			ord.setAdr(Code.pc);
			Code.put(Code.enter);
			Code.put(1);
			Code.put(1);
			Code.put(Code.load);
			Code.put(0);
			Code.put(Code.exit);
			Code.put(Code.return_);
			RESULT= MyTab.insert(Obj.Prog,pName,MyTab.noType);
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROG ProgName NT$0 SomeDeclList LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
				Code.dataSize=MyTab.currentScope().getnVars();	
				MyTab.chainLocalSymbols(p);
				MyTab.closeScope();
				
				for(Obj s : p.getLocalSymbols())
					if(s.getKind() == Obj.Var)
						if(s.getType().getKind() == Struct.Array)
							array_count++;
						else
							var_count++;
					else if(s.getKind() == Obj.Con)
						con_count++;
				
				parser.report_info("Broj globalnih prostih promenjivih:" +var_count,null);
				parser.report_info("Broj globalnih nizova:" + array_count,null);
				parser.report_info("Broj globalnih konstanti:" + con_count,null);
				parser.report_info("Broj deklaracija promenljivih u main-u:" + mainDeclarations,null);	
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

				MyTab.openScope();
				
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

