
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 25 13:37:35 CEST 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.io.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.util.MyTab;
import rs.ac.bg.etf.pp1.util.MyStruct;
import rs.etf.pp1.symboltable.concepts.*;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 25 13:37:35 CEST 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\210\000\002\002\010\000\002\002\004\000\002\052" +
    "\003\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\002\000\002\014\011\000\002\016\007\000" +
    "\002\016\002\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\034\011\000\002\034\010\000\002\034" +
    "\006\000\002\034\007\000\002\035\007\000\002\035\005" +
    "\000\002\035\002\000\002\006\006\000\002\006\010\000" +
    "\002\017\006\000\002\017\002\000\002\030\004\000\002" +
    "\030\002\000\002\066\002\000\002\021\011\000\002\067" +
    "\002\000\002\021\013\000\002\047\005\000\002\047\002" +
    "\000\002\005\004\000\002\005\002\000\002\070\002\000" +
    "\002\003\014\000\002\071\002\000\002\003\015\000\002" +
    "\051\007\000\002\051\002\000\002\004\004\000\002\004" +
    "\002\000\002\064\010\000\002\064\006\000\002\064\003" +
    "\000\002\010\010\000\002\010\006\000\002\010\002\000" +
    "\002\020\004\000\002\020\002\000\002\054\003\000\002" +
    "\054\003\000\002\012\003\000\002\012\003\000\002\072" +
    "\002\000\002\033\007\000\002\046\004\000\002\046\006" +
    "\000\002\045\004\000\002\045\007\000\002\045\006\000" +
    "\002\073\002\000\002\045\014\000\002\045\004\000\002" +
    "\045\004\000\002\074\002\000\002\045\006\000\002\045" +
    "\004\000\002\045\007\000\002\045\010\000\002\045\005" +
    "\000\002\007\004\000\002\007\002\000\002\025\003\000" +
    "\002\025\002\000\002\026\004\000\002\026\002\000\002" +
    "\024\003\000\002\024\002\000\002\022\005\000\002\022" +
    "\004\000\002\022\004\000\002\023\004\000\002\027\005" +
    "\000\002\027\002\000\002\043\004\000\002\044\005\000" +
    "\002\044\002\000\002\031\005\000\002\031\003\000\002" +
    "\056\004\000\002\056\003\000\002\057\005\000\002\057" +
    "\003\000\002\055\003\000\002\055\005\000\002\053\005" +
    "\000\002\053\003\000\002\075\002\000\002\053\007\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\006\000\002\060\005\000\002\060\005\000\002\060" +
    "\003\000\002\032\005\000\002\032\002\000\002\013\003" +
    "\000\002\013\002\000\002\065\005\000\002\065\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\062\003" +
    "\000\002\062\003\000\002\037\003\000\002\037\003\000" +
    "\002\040\003\000\002\040\003\000\002\063\003\000\002" +
    "\063\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\004\004\005\001\002\000\004\002\u0105\001" +
    "\002\000\004\065\006\001\002\000\014\005\uffff\006\uffff" +
    "\026\uffff\030\uffff\065\uffff\001\002\000\014\005\ufffb\006" +
    "\ufffb\026\ufffb\030\ufffb\065\ufffb\001\002\000\014\005\014" +
    "\006\012\026\020\030\021\065\013\001\002\000\004\065" +
    "\371\001\002\000\012\005\uffe0\007\uffe0\037\uffe0\065\uffe0" +
    "\001\002\000\064\010\uffce\012\uffce\013\uffce\016\uffce\020" +
    "\uffce\021\uffce\022\uffce\023\uffce\024\uffce\040\uffce\041\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce" +
    "\065\uffce\001\002\000\064\010\uffcf\012\uffcf\013\uffcf\016" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\065\uffcf\001\002\000\014\005\ufffd\006\ufffd\026" +
    "\ufffd\030\ufffd\065\ufffd\001\002\000\014\005\ufffc\006\ufffc" +
    "\026\ufffc\030\ufffc\065\ufffc\001\002\000\014\005\ufffe\006" +
    "\ufffe\026\ufffe\030\ufffe\065\ufffe\001\002\000\004\065\037" +
    "\001\002\000\006\005\014\065\013\001\002\000\004\065" +
    "\023\001\002\000\004\017\024\001\002\000\010\062\025" +
    "\063\030\064\026\001\002\000\006\010\ufff7\013\ufff7\001" +
    "\002\000\006\010\ufff5\013\ufff5\001\002\000\006\010\ufff8" +
    "\013\ufff8\001\002\000\006\010\ufff6\013\ufff6\001\002\000" +
    "\006\010\033\013\032\001\002\000\004\065\034\001\002" +
    "\000\014\005\ufffa\006\ufffa\026\ufffa\030\ufffa\065\ufffa\001" +
    "\002\000\004\017\035\001\002\000\010\062\025\063\030" +
    "\064\026\001\002\000\006\010\ufff9\013\ufff9\001\002\000" +
    "\006\006\uffe7\035\040\001\002\000\004\065\361\001\002" +
    "\000\004\006\042\001\002\000\014\005\uffe8\006\uffe8\007" +
    "\uffe8\037\uffe8\065\uffe8\001\002\000\014\005\014\006\044" +
    "\007\uffe2\037\047\065\013\001\002\000\012\005\uffe0\007" +
    "\uffe0\037\uffe0\065\uffe0\001\002\000\004\007\074\001\002" +
    "\000\004\065\065\001\002\000\006\005\014\065\013\001" +
    "\002\000\014\005\uffe9\006\uffe9\007\uffe9\037\uffe9\065\uffe9" +
    "\001\002\000\004\065\052\001\002\000\010\010\uffee\013" +
    "\uffee\020\053\001\002\000\004\021\062\001\002\000\006" +
    "\010\056\013\055\001\002\000\004\065\057\001\002\000" +
    "\014\005\ufff1\006\ufff1\007\ufff1\037\ufff1\065\ufff1\001\002" +
    "\000\010\010\uffef\013\uffef\020\060\001\002\000\004\021" +
    "\061\001\002\000\006\010\ufff0\013\ufff0\001\002\000\006" +
    "\010\uffee\013\uffee\001\002\000\006\010\064\013\055\001" +
    "\002\000\014\005\ufff4\006\ufff4\007\ufff4\037\ufff4\065\ufff4" +
    "\001\002\000\010\010\uffee\013\uffee\020\066\001\002\000" +
    "\004\021\071\001\002\000\006\010\070\013\055\001\002" +
    "\000\014\005\ufff2\006\ufff2\007\ufff2\037\ufff2\065\ufff2\001" +
    "\002\000\006\010\uffee\013\uffee\001\002\000\006\010\073" +
    "\013\055\001\002\000\014\005\ufff3\006\ufff3\007\ufff3\037" +
    "\ufff3\065\ufff3\001\002\000\014\005\uffe6\006\uffe6\026\uffe6" +
    "\030\uffe6\065\uffe6\001\002\000\012\005\014\007\100\037" +
    "\077\065\013\001\002\000\004\065\350\001\002\000\006" +
    "\005\014\065\013\001\002\000\004\007\uffe3\001\002\000" +
    "\012\005\uffe1\007\uffe1\037\uffe1\065\uffe1\001\002\000\004" +
    "\065\103\001\002\000\004\011\uffdd\001\002\000\004\011" +
    "\105\001\002\000\010\005\014\012\uffda\065\013\001\002" +
    "\000\006\022\330\065\327\001\002\000\004\012\uffd5\001" +
    "\002\000\004\012\111\001\002\000\010\005\uffd8\006\uffd8" +
    "\065\uffd8\001\002\000\010\005\014\006\113\065\013\001" +
    "\002\000\026\006\uffb9\007\uffb9\014\uffb9\015\uffb9\025\uffb9" +
    "\031\uffb9\033\uffb9\034\uffb9\036\uffb9\065\uffb9\001\002\000" +
    "\010\005\uffd9\006\uffd9\065\uffd9\001\002\000\026\006\117" +
    "\007\134\014\130\015\133\025\135\031\125\033\116\034" +
    "\122\036\132\065\120\001\002\000\004\011\323\001\002" +
    "\000\026\006\uffb9\007\uffb9\014\uffb9\015\uffb9\025\uffb9\031" +
    "\uffb9\033\uffb9\034\uffb9\036\uffb9\065\uffb9\001\002\000\072" +
    "\010\uffa0\011\uffa0\012\uffa0\013\uffa0\016\uffa0\017\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050" +
    "\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0" +
    "\057\uffa0\060\uffa0\001\002\000\024\006\117\014\130\015" +
    "\133\025\135\031\125\033\116\034\122\036\132\065\120" +
    "\001\002\000\004\011\275\001\002\000\026\006\uffcc\007" +
    "\uffcc\014\uffcc\015\uffcc\025\uffcc\031\uffcc\033\uffcc\034\uffcc" +
    "\036\uffcc\065\uffcc\001\002\000\030\011\270\017\266\020" +
    "\177\022\201\052\167\053\171\054\157\055\160\056\165" +
    "\057\263\060\267\001\002\000\004\011\235\001\002\000" +
    "\026\006\uffba\007\uffba\014\uffba\015\uffba\025\uffba\031\uffba" +
    "\033\uffba\034\uffba\036\uffba\065\uffba\001\002\000\004\010" +
    "\234\001\002\000\004\011\225\001\002\000\026\006\uffcd" +
    "\007\uffcd\014\uffcd\015\uffcd\025\uffcd\031\uffcd\033\uffcd\034" +
    "\uffcd\036\uffcd\065\uffcd\001\002\000\004\010\224\001\002" +
    "\000\022\010\146\011\151\032\142\040\137\062\144\063" +
    "\152\064\141\065\120\001\002\000\012\005\uffdc\007\uffdc" +
    "\037\uffdc\065\uffdc\001\002\000\004\010\136\001\002\000" +
    "\030\006\uffc2\007\uffc2\014\uffc2\015\uffc2\025\uffc2\027\uffc2" +
    "\031\uffc2\033\uffc2\034\uffc2\036\uffc2\065\uffc2\001\002\000" +
    "\016\011\151\032\142\062\144\063\152\064\141\065\120" +
    "\001\002\000\004\010\uffc0\001\002\000\056\010\uff9b\012" +
    "\uff9b\013\uff9b\016\uff9b\021\uff9b\023\uff9b\024\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047" +
    "\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b" +
    "\056\uff9b\001\002\000\006\005\014\065\013\001\002\000" +
    "\064\010\uff97\011\200\012\uff97\013\uff97\016\uff97\020\177" +
    "\021\uff97\022\201\023\uff97\024\uff97\040\uff97\041\uff97\042" +
    "\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97" +
    "\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97\001" +
    "\002\000\056\010\uff9d\012\uff9d\013\uff9d\016\uff9d\021\uff9d" +
    "\023\uff9d\024\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044" +
    "\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d" +
    "\053\uff9d\054\uff9d\055\uff9d\056\uff9d\001\002\000\042\010" +
    "\uffa6\012\uffa6\013\uffa6\016\170\021\uffa6\023\uffa6\024\uffa6" +
    "\040\172\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051" +
    "\uffa6\052\167\053\171\001\002\000\030\006\uffbe\007\uffbe" +
    "\014\uffbe\015\uffbe\025\uffbe\027\uffbe\031\uffbe\033\uffbe\034" +
    "\uffbe\036\uffbe\065\uffbe\001\002\000\056\010\uffa4\012\uffa4" +
    "\013\uffa4\016\uffa4\021\uffa4\023\uffa4\024\uffa4\040\uffa4\041" +
    "\163\042\155\043\161\044\uffa4\045\uffa4\046\uffa4\047\uffa4" +
    "\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\157\055\160\056" +
    "\165\001\002\000\056\010\uffa3\012\uffa3\013\uffa3\016\uffa3" +
    "\021\uffa3\023\uffa3\024\uffa3\040\uffa3\041\uffa3\042\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3" +
    "\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\001\002\000" +
    "\020\011\151\032\142\040\137\062\144\063\152\064\141" +
    "\065\120\001\002\000\056\010\uff9c\012\uff9c\013\uff9c\016" +
    "\uff9c\021\uff9c\023\uff9c\024\uff9c\040\uff9c\041\uff9c\042\uff9c" +
    "\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051" +
    "\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\001\002" +
    "\000\004\012\154\001\002\000\056\010\uff98\012\uff98\013" +
    "\uff98\016\uff98\021\uff98\023\uff98\024\uff98\040\uff98\041\uff98" +
    "\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050" +
    "\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98" +
    "\001\002\000\016\011\uff7e\032\uff7e\062\uff7e\063\uff7e\064" +
    "\uff7e\065\uff7e\001\002\000\016\011\uff80\032\uff80\062\uff80" +
    "\063\uff80\064\uff80\065\uff80\001\002\000\020\011\uff7c\032" +
    "\uff7c\040\uff7c\062\uff7c\063\uff7c\064\uff7c\065\uff7c\001\002" +
    "\000\020\011\uff7b\032\uff7b\040\uff7b\062\uff7b\063\uff7b\064" +
    "\uff7b\065\uff7b\001\002\000\016\011\uff7d\032\uff7d\062\uff7d" +
    "\063\uff7d\064\uff7d\065\uff7d\001\002\000\016\011\151\032" +
    "\142\062\144\063\152\064\141\065\120\001\002\000\016" +
    "\011\uff7f\032\uff7f\062\uff7f\063\uff7f\064\uff7f\065\uff7f\001" +
    "\002\000\016\011\uff81\032\uff81\062\uff81\063\uff81\064\uff81" +
    "\065\uff81\001\002\000\020\011\uff7a\032\uff7a\040\uff7a\062" +
    "\uff7a\063\uff7a\064\uff7a\065\uff7a\001\002\000\056\010\uffa2" +
    "\012\uffa2\013\uffa2\016\uffa2\021\uffa2\023\uffa2\024\uffa2\040" +
    "\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2" +
    "\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055" +
    "\uffa2\056\uffa2\001\002\000\020\011\uff83\032\uff83\040\uff83" +
    "\062\uff83\063\uff83\064\uff83\065\uff83\001\002\000\016\011" +
    "\uff85\032\uff85\062\uff85\063\uff85\064\uff85\065\uff85\001\002" +
    "\000\020\011\uff82\032\uff82\040\uff82\062\uff82\063\uff82\064" +
    "\uff82\065\uff82\001\002\000\016\011\uff84\032\uff84\062\uff84" +
    "\063\uff84\064\uff84\065\uff84\001\002\000\016\011\uff86\032" +
    "\uff86\062\uff86\063\uff86\064\uff86\065\uff86\001\002\000\016" +
    "\011\151\032\142\062\144\063\152\064\141\065\120\001" +
    "\002\000\016\011\uff87\032\uff87\062\uff87\063\uff87\064\uff87" +
    "\065\uff87\001\002\000\056\010\uffa5\012\uffa5\013\uffa5\016" +
    "\uffa5\021\uffa5\023\uffa5\024\uffa5\040\uffa5\041\163\042\155" +
    "\043\161\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\054\157\055\160\056\165\001\002" +
    "\000\020\011\uff9f\032\uff9f\040\uff9f\062\uff9f\063\uff9f\064" +
    "\uff9f\065\uff9f\001\002\000\022\011\151\012\uff93\032\142" +
    "\040\137\062\144\063\152\064\141\065\120\001\002\000" +
    "\004\065\202\001\002\000\072\010\uffa1\011\uffa1\012\uffa1" +
    "\013\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\024\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1" +
    "\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053" +
    "\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\001\002" +
    "\000\004\012\210\001\002\000\006\012\uff91\013\206\001" +
    "\002\000\004\012\uff94\001\002\000\020\011\151\032\142" +
    "\040\137\062\144\063\152\064\141\065\120\001\002\000" +
    "\004\012\uff92\001\002\000\056\010\uff9a\012\uff9a\013\uff9a" +
    "\016\uff9a\021\uff9a\023\uff9a\024\uff9a\040\uff9a\041\uff9a\042" +
    "\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a" +
    "\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\001" +
    "\002\000\020\011\151\032\142\040\137\062\144\063\152" +
    "\064\141\065\120\001\002\000\004\021\213\001\002\000" +
    "\072\010\uff9e\011\uff9e\012\uff9e\013\uff9e\016\uff9e\017\uff9e" +
    "\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\040\uff9e\041" +
    "\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e" +
    "\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056" +
    "\uff9e\057\uff9e\060\uff9e\001\002\000\060\010\uff95\012\uff95" +
    "\013\uff95\016\uff95\020\215\021\uff95\023\uff95\024\uff95\040" +
    "\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95" +
    "\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055" +
    "\uff95\056\uff95\001\002\000\020\011\151\032\142\040\137" +
    "\062\144\063\152\064\141\065\120\001\002\000\056\010" +
    "\uff99\012\uff99\013\uff99\016\uff99\021\uff99\023\uff99\024\uff99" +
    "\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046" +
    "\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99" +
    "\055\uff99\056\uff99\001\002\000\004\021\220\001\002\000" +
    "\056\010\uff96\012\uff96\013\uff96\016\uff96\021\uff96\023\uff96" +
    "\024\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045" +
    "\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96" +
    "\054\uff96\055\uff96\056\uff96\001\002\000\004\010\222\001" +
    "\002\000\030\006\uffbf\007\uffbf\014\uffbf\015\uffbf\025\uffbf" +
    "\027\uffbf\031\uffbf\033\uffbf\034\uffbf\036\uffbf\065\uffbf\001" +
    "\002\000\042\010\uffa7\012\uffa7\013\uffa7\016\170\021\uffa7" +
    "\023\uffa7\024\uffa7\040\172\044\uffa7\045\uffa7\046\uffa7\047" +
    "\uffa7\050\uffa7\051\uffa7\052\167\053\171\001\002\000\030" +
    "\006\uffc1\007\uffc1\014\uffc1\015\uffc1\025\uffc1\027\uffc1\031" +
    "\uffc1\033\uffc1\034\uffc1\036\uffc1\065\uffc1\001\002\000\020" +
    "\011\151\032\142\040\137\062\144\063\152\064\141\065" +
    "\120\001\002\000\006\012\uffb5\013\227\001\002\000\004" +
    "\062\233\001\002\000\004\012\231\001\002\000\004\010" +
    "\232\001\002\000\030\006\uffbc\007\uffbc\014\uffbc\015\uffbc" +
    "\025\uffbc\027\uffbc\031\uffbc\033\uffbc\034\uffbc\036\uffbc\065" +
    "\uffbc\001\002\000\004\012\uffb6\001\002\000\030\006\uffc7" +
    "\007\uffc7\014\uffc7\015\uffc7\025\uffc7\027\uffc7\031\uffc7\033" +
    "\uffc7\034\uffc7\036\uffc7\065\uffc7\001\002\000\020\011\151" +
    "\032\142\040\137\062\144\063\152\064\141\065\120\001" +
    "\002\000\026\010\uffa8\012\uffa8\023\253\024\252\044\260" +
    "\045\256\046\255\047\254\050\uffa8\051\uffa8\001\002\000" +
    "\004\012\uffcb\001\002\000\012\010\uffaa\012\uffaa\050\uffaa" +
    "\051\uffaa\001\002\000\010\010\uffad\012\uffad\051\uffad\001" +
    "\002\000\010\010\uffaf\012\uffaf\051\243\001\002\000\020" +
    "\011\151\032\142\040\137\062\144\063\152\064\141\065" +
    "\120\001\002\000\010\010\uffae\012\uffae\051\uffae\001\002" +
    "\000\012\010\uffac\012\uffac\050\246\051\uffac\001\002\000" +
    "\020\011\151\032\142\040\137\062\144\063\152\064\141" +
    "\065\120\001\002\000\012\010\uffab\012\uffab\050\uffab\051" +
    "\uffab\001\002\000\004\012\251\001\002\000\024\006\uffca" +
    "\014\uffca\015\uffca\025\uffca\031\uffca\033\uffca\034\uffca\036" +
    "\uffca\065\uffca\001\002\000\020\011\uff89\032\uff89\040\uff89" +
    "\062\uff89\063\uff89\064\uff89\065\uff89\001\002\000\020\011" +
    "\uff8b\032\uff8b\040\uff8b\062\uff8b\063\uff8b\064\uff8b\065\uff8b" +
    "\001\002\000\020\011\uff88\032\uff88\040\uff88\062\uff88\063" +
    "\uff88\064\uff88\065\uff88\001\002\000\020\011\uff8a\032\uff8a" +
    "\040\uff8a\062\uff8a\063\uff8a\064\uff8a\065\uff8a\001\002\000" +
    "\020\011\uff8c\032\uff8c\040\uff8c\062\uff8c\063\uff8c\064\uff8c" +
    "\065\uff8c\001\002\000\020\011\151\032\142\040\137\062" +
    "\144\063\152\064\141\065\120\001\002\000\020\011\uff8d" +
    "\032\uff8d\040\uff8d\062\uff8d\063\uff8d\064\uff8d\065\uff8d\001" +
    "\002\000\012\010\uffa9\012\uffa9\050\uffa9\051\uffa9\001\002" +
    "\000\020\011\uff8e\032\uff8e\040\uff8e\062\uff8e\063\uff8e\064" +
    "\uff8e\065\uff8e\001\002\000\006\010\uffb1\012\uffb1\001\002" +
    "\000\020\011\uff8f\032\uff8f\040\uff8f\062\uff8f\063\uff8f\064" +
    "\uff8f\065\uff8f\001\002\000\020\011\151\032\142\040\137" +
    "\062\144\063\152\064\141\065\120\001\002\000\020\011" +
    "\uff90\032\uff90\040\uff90\062\uff90\063\uff90\064\uff90\065\uff90" +
    "\001\002\000\006\010\uffb0\012\uffb0\001\002\000\022\011" +
    "\151\012\uff93\032\142\040\137\062\144\063\152\064\141" +
    "\065\120\001\002\000\004\012\272\001\002\000\004\010" +
    "\273\001\002\000\030\006\uffc6\007\uffc6\014\uffc6\015\uffc6" +
    "\025\uffc6\027\uffc6\031\uffc6\033\uffc6\034\uffc6\036\uffc6\065" +
    "\uffc6\001\002\000\006\010\uffb2\012\uffb2\001\002\000\006" +
    "\010\uffb3\065\120\001\002\000\026\017\266\020\177\022" +
    "\201\052\167\053\171\054\157\055\160\056\165\057\263" +
    "\060\267\001\002\000\006\010\uffb4\012\uffb4\001\002\000" +
    "\004\010\301\001\002\000\022\010\uffb7\011\151\032\142" +
    "\040\137\062\144\063\152\064\141\065\120\001\002\000" +
    "\004\010\304\001\002\000\004\010\uffb8\001\002\000\006" +
    "\012\uffb3\065\120\001\002\000\004\012\306\001\002\000" +
    "\024\006\uffc4\014\uffc4\015\uffc4\025\uffc4\031\uffc4\033\uffc4" +
    "\034\uffc4\036\uffc4\065\uffc4\001\002\000\024\006\117\014" +
    "\130\015\133\025\135\031\125\033\116\034\122\036\132" +
    "\065\120\001\002\000\024\006\117\014\130\015\133\025" +
    "\135\031\125\033\116\034\122\036\132\065\120\001\002" +
    "\000\030\006\uffc3\007\uffc3\014\uffc3\015\uffc3\025\uffc3\027" +
    "\uffc3\031\uffc3\033\uffc3\034\uffc3\036\uffc3\065\uffc3\001\002" +
    "\000\004\027\313\001\002\000\024\006\117\014\130\015" +
    "\133\025\135\031\125\033\116\034\122\036\132\065\120" +
    "\001\002\000\030\006\uffc5\007\uffc5\014\uffc5\015\uffc5\025" +
    "\uffc5\027\uffc5\031\uffc5\033\uffc5\034\uffc5\036\uffc5\065\uffc5" +
    "\001\002\000\026\006\uffc9\007\uffc9\014\uffc9\015\uffc9\025" +
    "\uffc9\031\uffc9\033\uffc9\034\uffc9\036\uffc9\065\uffc9\001\002" +
    "\000\030\006\uffcd\007\uffcd\014\uffcd\015\uffcd\025\uffcd\027" +
    "\317\031\uffcd\033\uffcd\034\uffcd\036\uffcd\065\uffcd\001\002" +
    "\000\024\006\117\014\130\015\133\025\135\031\125\033" +
    "\116\034\122\036\132\065\120\001\002\000\026\006\uffc8" +
    "\007\uffc8\014\uffc8\015\uffc8\025\uffc8\031\uffc8\033\uffc8\034" +
    "\uffc8\036\uffc8\065\uffc8\001\002\000\026\006\117\007\322" +
    "\014\130\015\133\025\135\031\125\033\116\034\122\036" +
    "\132\065\120\001\002\000\030\006\uffbb\007\uffbb\014\uffbb" +
    "\015\uffbb\025\uffbb\027\uffbb\031\uffbb\033\uffbb\034\uffbb\036" +
    "\uffbb\065\uffbb\001\002\000\004\065\120\001\002\000\010" +
    "\012\325\020\177\022\201\001\002\000\004\010\326\001" +
    "\002\000\030\006\uffbd\007\uffbd\014\uffbd\015\uffbd\025\uffbd" +
    "\027\uffbd\031\uffbd\033\uffbd\034\uffbd\036\uffbd\065\uffbd\001" +
    "\002\000\014\005\uffd2\012\uffd2\013\uffd2\020\334\065\uffd2" +
    "\001\002\000\004\022\331\001\002\000\004\022\332\001" +
    "\002\000\004\065\333\001\002\000\004\012\uffdb\001\002" +
    "\000\004\021\345\001\002\000\012\005\014\012\uffda\013" +
    "\336\065\013\001\002\000\006\005\014\065\013\001\002" +
    "\000\004\022\330\001\002\000\004\012\uffd6\001\002\000" +
    "\004\065\342\001\002\000\014\005\uffd3\012\uffd3\013\uffd3" +
    "\020\343\065\uffd3\001\002\000\004\021\344\001\002\000" +
    "\012\005\uffd4\012\uffd4\013\uffd4\065\uffd4\001\002\000\012" +
    "\005\uffd2\012\uffd2\013\uffd2\065\uffd2\001\002\000\012\005" +
    "\014\012\uffda\013\336\065\013\001\002\000\004\012\uffd7" +
    "\001\002\000\004\011\uffdf\001\002\000\004\011\352\001" +
    "\002\000\010\005\014\012\uffda\065\013\001\002\000\004" +
    "\012\354\001\002\000\010\005\uffd8\006\uffd8\065\uffd8\001" +
    "\002\000\010\005\014\006\356\065\013\001\002\000\026" +
    "\006\uffb9\007\uffb9\014\uffb9\015\uffb9\025\uffb9\031\uffb9\033" +
    "\uffb9\034\uffb9\036\uffb9\065\uffb9\001\002\000\026\006\117" +
    "\007\360\014\130\015\133\025\135\031\125\033\116\034" +
    "\122\036\132\065\120\001\002\000\012\005\uffde\007\uffde" +
    "\037\uffde\065\uffde\001\002\000\004\006\uffe5\001\002\000" +
    "\004\006\363\001\002\000\014\005\uffe8\006\uffe8\007\uffe8" +
    "\037\uffe8\065\uffe8\001\002\000\014\005\014\006\044\007" +
    "\uffe2\037\047\065\013\001\002\000\004\007\366\001\002" +
    "\000\014\005\uffe4\006\uffe4\026\uffe4\030\uffe4\065\uffe4\001" +
    "\002\000\012\005\014\007\370\037\077\065\013\001\002" +
    "\000\004\002\001\001\002\000\010\010\uffea\013\uffea\020" +
    "\372\001\002\000\004\021\u0102\001\002\000\006\010\375" +
    "\013\374\001\002\000\004\065\376\001\002\000\014\005" +
    "\uffed\006\uffed\026\uffed\030\uffed\065\uffed\001\002\000\010" +
    "\010\uffd0\013\uffd0\020\377\001\002\000\004\021\u0101\001" +
    "\002\000\006\010\uffeb\013\uffeb\001\002\000\006\010\uffd1" +
    "\013\uffd1\001\002\000\006\010\uffea\013\uffea\001\002\000" +
    "\006\010\u0104\013\374\001\002\000\014\005\uffec\006\uffec" +
    "\026\uffec\030\uffec\065\uffec\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\052\006\001\001\000\002\001\001\000\004\050\007" +
    "\001\001\000\012\006\014\014\016\021\015\054\010\001" +
    "\001\000\002\001\001\000\004\005\366\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\035\001\001\000\002\001\001\000\004\066\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\042" +
    "\001\001\000\010\034\047\047\044\054\045\001\001\000" +
    "\004\005\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\100\054\075" +
    "\001\001\000\002\001\001\000\004\054\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\071\103\001\001\000\002\001\001\000\010\051\106\054" +
    "\105\064\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\111\001\001\000\006\006" +
    "\113\054\010\001\001\000\004\007\114\001\001\000\002" +
    "\001\001\000\016\012\125\022\126\033\120\045\130\046" +
    "\122\053\123\001\001\000\002\001\001\000\004\007\320" +
    "\001\001\000\002\001\001\000\016\012\314\022\126\033" +
    "\120\045\315\046\122\053\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\036\264\040\263\041\261\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\053\142\055\146\056\137\057\144\060\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\053\142\055\146\057\222\060\147\001\001\000\004" +
    "\074\220\001\001\000\002\001\001\000\004\054\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\037\174" +
    "\040\172\062\173\001\001\000\002\001\001\000\010\041" +
    "\155\042\163\063\161\001\001\000\002\001\001\000\014" +
    "\053\142\055\146\056\152\057\144\060\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\053\142\060\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\053" +
    "\142\055\175\060\147\001\001\000\002\001\001\000\010" +
    "\041\155\042\163\063\161\001\001\000\004\075\210\001" +
    "\001\000\020\013\202\053\142\055\146\056\203\057\144" +
    "\060\147\065\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\053\142\055\146\056\203\057\144\060\147\065" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\053\142\055\146\056\211\057\144\060\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\215\001\001" +
    "\000\014\053\142\055\146\056\216\057\144\060\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\037\174\040" +
    "\172\062\173\001\001\000\002\001\001\000\014\053\142" +
    "\055\146\056\225\057\144\060\147\001\001\000\004\026" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\023\236\031\237\043\240\053\142\055\146" +
    "\056\235\057\144\060\147\001\001\000\004\061\256\001" +
    "\001\000\004\072\247\001\001\000\004\044\244\001\001" +
    "\000\004\027\241\001\001\000\002\001\001\000\020\031" +
    "\237\043\243\053\142\055\146\056\235\057\144\060\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\031" +
    "\246\053\142\055\146\056\235\057\144\060\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\053\142\055\146\056" +
    "\260\057\144\060\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\053\142\055\146\056\273\057\144\060\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\270\053\142\055\146\056\203\057\144\060\147\065\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\276\024\277\053\275" +
    "\001\001\000\010\036\264\040\263\041\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\023\302\025\301" +
    "\031\237\043\240\053\142\055\146\056\235\057\144\060" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\276\024\304\053\275\001\001\000\002\001\001\000" +
    "\004\073\306\001\001\000\012\022\126\033\307\045\310" +
    "\053\123\001\001\000\012\022\126\033\307\045\311\053" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\126\033\307\045\313\053\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\022\126" +
    "\033\120\045\313\046\317\053\123\001\001\000\002\001" +
    "\001\000\016\012\125\022\126\033\120\045\130\046\122" +
    "\053\123\001\001\000\002\001\001\000\004\053\323\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\334\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\051\337\054\336\001\001\000\004\054\340\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\345\001\001\000\006\051\346\054\336\001\001" +
    "\000\002\001\001\000\004\070\350\001\001\000\002\001" +
    "\001\000\010\051\106\054\105\064\352\001\001\000\002" +
    "\001\001\000\004\004\354\001\001\000\006\006\113\054" +
    "\010\001\001\000\004\007\356\001\001\000\016\012\125" +
    "\022\126\033\120\045\130\046\122\053\123\001\001\000" +
    "\002\001\001\000\004\067\361\001\001\000\002\001\001" +
    "\000\004\030\363\001\001\000\010\034\047\047\364\054" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\100\054\075\001\001\000\002\001\001\000\004\017" +
    "\372\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\377\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\u0102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	MyTab.init(); //Universe obseg

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s=this.getScanner().next_token();
	if(s!=null && s.value!=null)
		log.info(s.toString()+" "+s.value.toString());
	return s;

    }


	int printCallCount;
	boolean errorDetected=false;
	Logger log=Logger.getLogger(getClass());
	public void report_fatal_error(String message,Object info)throws java.lang.Exception{
		done_parsing();
		report_error(message,info);
	}
	public void syntax_error(Symbol cur_token){
		report_error("\nSintaksna greska",cur_token);
	}
	public void unrecovered_syntax_error(Symbol cur_token)throws java.lang.Exception{
		report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti",cur_token);
	}
	public void report_error(String message,Object info){
		errorDetected=true;
		StringBuilder msg=new StringBuilder(message);
		if(info instanceof Symbol)
			msg.append(" na liniji ").append(((Symbol)info).left);
		log.error(msg.toString());
	}
	public void report_info(String message,Object info){
		StringBuilder msg=new StringBuilder(message);
		if(info instanceof Symbol)
			msg.append(" na liniji ").append(((Symbol)info).left);
		log.info(msg.toString());
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	Obj currentMethod = null;
	Struct currentType, currentMethType;
	boolean returnFound=false;
	boolean in_class = false; 
	boolean in_method = false;
	boolean in_for=false;
	Obj _this;
	
	Obj currentClass;

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // MulopRight ::= MODEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // MulopRight ::= DIVEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // MulopRight ::= MULEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // MulopLeft ::= MODI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // MulopLeft ::= DIVI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // MulopLeft ::= MULI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Mulop ::= MulopRight 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Mulop ::= MulopLeft 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // AddopRight ::= MINUSEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // AddopRight ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // AddopLeft ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // AddopLeft ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Addop ::= AddopRight 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Addop ::= AddopLeft 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Relop ::= LOWEQ 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Relop ::= LOWER 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Relop ::= GREATEQ 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Relop ::= GREATER 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Relop ::= NOTEQ 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Relop ::= EQEQ 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Assignop ::= MulopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Assignop ::= AddopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Assignop ::= EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ActPars ::= Expr 
            {
              Stack<MyStruct> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		    	RESULT = new Stack<MyStruct>();  
		    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ActPars ::= Expr COMMA ActPars 
            {
              Stack<MyStruct> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Stack<MyStruct> ap = (Stack<MyStruct>)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		    	RESULT = ap;  
		    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ActualPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ActualPars ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // BraceExprList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BraceExprList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // BraceExprList ::= LMEDBRACE Expr RMEDBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BraceExprList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Factor ::= Designator 
            {
              Struct RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	RESULT=d.getType();
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Factor ::= LPAREN Expr RPAREN 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		 	RESULT=t;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Factor ::= NEW Type BraceExprList 
            {
              Struct RESULT =null;
		
		 	RESULT = MyTab.referenceType;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Factor ::= Designator LPAREN ActualPars RPAREN 
            {
              Struct RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
			if(Obj.Meth == func.getKind()) {
				parser.report_info("Pronadjen poziv funkcije "+func.getName()+" na liniji: "+funcleft,null);
				RESULT=func.getType();
				}
			else
				parser.report_error("Greska na liniji: "+funcleft+" ime: "+func.getName()+" nije funkcija.",null);
				RESULT=MyTab.noType;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Factor ::= BOOL 
            {
              Struct RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			
		 	RESULT = MyTab.boolType;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Factor ::= CHAR 
            {
              Struct RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		 	RESULT=MyTab.charType;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Factor ::= NUMBER 
            {
              Struct RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
		 	 
			 parser.report_info("PREPOZNAT JE BROJ: "+n,null);
			 RESULT=MyTab.intType;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Designator ::= Designator LMEDBRACE NT$7 Expr RMEDBRACE 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$7 ::= 
            {
              Obj RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

			   	   	Obj ime=MyTab.find(o.getName());
			   	    if (ime.getKind()==MyStruct.Class) { 
				   		RESULT = new Obj(Obj.Elem, "", o.getType().getElemType());
			   		} else {
			   			parser.report_error("Greska na liniji "  + oleft + ":tip nije niz",null);
			   		}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		   
	   		   		String s = name;
	   		   		int try_no=0;
	   		   		do {
	   		   			RESULT = MyTab.find(s);
	   		   			s = "super." + s;
	   		   		} while(RESULT  == MyTab.noObj && try_no++<10);
	   		   		
	   		   		
	   		   		parser.report_info("Koriscenje identifikatora " +  RESULT.getKind() + " " + name + " na liniji " +  nameleft,null);
	   		   		
	   		   		if(RESULT == MyTab.noObj)
	   		   			parser.report_error("Greska na liniji "  + nameleft + ":promenjiva " + name + " nije deklarisana",null);
	   		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Designator ::= Designator DOT IDENT 
            {
              Obj RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			
			  		for(Obj fld : o.getLocalSymbols())
			  			if(fld.getName().equals(id)) {
			  				RESULT = o;
			  				break;
			  			}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Term ::= Term Mulop Factor 
            {
              Struct RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 if(!t1.compatibleWith(t2)) {
		 					parser.report_error("Greska na liniji: "+t1left+" nekompatibilni tipovi u izrazu.",null);
		 				}
		 				RESULT = t1;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Term ::= Factor 
            {
              Struct RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct f1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		parser.report_info("^^^^" + MyTab.intType.getKind(), null);
		
		if(!f1.equals(MyTab.intType))
			parser.report_error("Greska na liniji: "+f1left+". Factor izraz mora biti tipa int umesto tipa: "+f1.getKind()+".",null);
		 RESULT=f1; 
		 
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // AddopTermList ::= Term 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(t.getKind()!=MyStruct.Int)
						parser.report_error("Greska na liniji: "+tleft+". Izraz mora biti tipa int.",null);
					RESULT=t;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // AddopTermList ::= AddopTermList Addop Term 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(!te.compatibleWith(t)){
						parser.report_error("Greska na liniji: "+tleft+" nekompatibilni tipovi u izrazu.",null);
						RESULT =MyTab.noType;
						}
					 if(!te.equals(MyTab.intType))
						parser.report_error("Greska na liniji: "+teleft+". Izraz pre operacije mora biti tipa int.",null);
					 if(!t.equals(MyTab.intType))
					 	parser.report_error("Greska na liniji: "+teleft+". Izraz posle operacije mora biti tipa int.",null);
					RESULT=te;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= AddopTermList 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		RESULT=te; 
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= MINUS AddopTermList 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			RESULT=te;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct e1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			 	if(!e1.compatibleWith(e2)) {
		 			parser.report_error("Nekompatibilni tipovi na liniji " + e1left,null);
		 		}
		 		RESULT=MyTab.boolType;
		 	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CondFactList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CondFactList ::= CondFactList AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CondTerm ::= CondFact CondFactList 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				RESULT=cond;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CondTermList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CondTermList ::= CondTermList OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Condition ::= CondTerm CondTermList 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			 	RESULT=cond;
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DesignatorStatement ::= Designator MINUSMINUS 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
							if(dest!=null) {
							if(!dest.equals(MyTab.intType)) 
		 						parser.report_error("Promenljiva: "+dest+" mora biti tipa int. - Greska na liniji " + destleft,null);
							}
							else {
								parser.report_error("Ne postoji izraz koji se umanjuje. - Greska na liniji " + destleft,null);
							}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DesignatorStatement ::= Designator PLUSPLUS 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
							if(dest!=null) {
							if(!dest.equals(MyTab.intType)) 
		 						parser.report_error("Promenljiva: "+dest+" mora biti tipa int. - Greska na liniji " + destleft,null);
							}
							else {
								parser.report_error("Ne postoji izraz koji se uvecava. - Greska na liniji " + destleft,null);
							}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DesignatorStatement ::= Designator Assignop Expr 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							if(!e.equals(MyTab.noObj)) {
							if(dest.equals(MyTab.noObj)) 
		 						parser.report_error("Promenljiva nije deklarisana. - Greska na liniji " + destleft,null);
		 					
							else if (!e.assignableTo(dest.getType())) 
		 						parser.report_error( "Ovaj tip se ne moze dodeliti promenjivoj tipa: " + dest.getType().getKind() + " - Greska na liniji " + destleft,null);
		 					
							}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DesignatorStatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DesignatorStatementList ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NumConstList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumConstList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NumConstList ::= COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumConstList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ConditionList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ConditionList ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Matched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Matched ::= PRINT LPAREN Expr NumConstList RPAREN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				if (!e.equals(MyTab.boolType)&&!e.equals(MyTab.intType)&&!e.equals(MyTab.charType))
					parser.report_error("Greska na liniji "+ eleft + ". Izraz mora biti integer, boolean ili char.",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				if (!des.getType().equals(MyTab.boolType)&&!des.getType().equals(MyTab.intType)&&!des.getType().equals(MyTab.charType))
					parser.report_error("Greska na liniji "+ desleft + ". Izraz mora biti integer, boolean ili char.",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Matched ::= RETURN SEMI 
            {
              Object RESULT =null;
		int linijaleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int linijaright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object linija = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if (currentMethType != MyTab.noType)
					parser.report_error("Greska na liniji "+ linijaleft + ":metod ne sme imati return bez izraza jer nije void!",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Matched ::= RETURN Expr NT$6 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$6 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
	
				returnFound=true;
				if(currentMethType==MyTab.noType){
					parser.report_error("Greska na liniji: "+tleft+". Povratni tip funkcije je VOID i ne moze imati vrednost u return iskazu.",null);
				}
				if(!currentMethType.compatibleWith(t)){
					parser.report_error("Greska na liniji: "+tleft+". Tip izraza u return naredbi se ne slaze sa tipom povratne vrednosti funkcije.",null);
				
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Matched ::= CONTINUE SEMI 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(in_for==false)
					parser.report_error("Greska na liniji: "+cleft+". Continue mora biti unutar for petlje.",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Matched ::= BREAK SEMI 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(in_for==false)
					parser.report_error("Greska na liniji: "+bleft+". Break mora biti unutar for petlje.",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Matched ::= FOR LPAREN DesignatorStatementList SEMI ConditionList SEMI DesignatorStatementList RPAREN NT$5 Matched 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				in_for=false;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$5 ::= 
            {
              Object RESULT =null;

				in_for=true;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Matched ::= If Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Matched ::= Designator LPAREN ActualPars RPAREN SEMI 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
			if(Obj.Meth == func.getKind()){
				parser.report_info("Pronadjen poziv funkcije "+func.getName()+" na liniji: "+funcleft,null);
				RESULT=func.getType();
				}
			else {
				parser.report_error("Greska na liniji: "+funcleft+" ime: "+func.getName()+" nije funkcija.",null);
				RESULT=MyTab.noType;
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Matched ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Unmatched ::= If Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Unmatched ::= If Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // If ::= IF LPAREN Condition NT$4 RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("If",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$4 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

				if(!cond.equals(MyTab.boolType)){
					parser.report_error("Greska na liniji: "+condleft+". Uslov mora biti boolean tipa.",null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			Obj typeNode = MyTab.find(typeName);
				if(typeNode==MyTab.noObj){
					parser.report_error("Greska na liniji: "+typeNameleft+" .Nije pronadjen tip "+typeName+" u tabeli simbola",null);
					currentType=MyTab.noType;
					RESULT = MyTab.noType;
					}
				else{
					if(Obj.Type == typeNode.getKind()){
						currentType=typeNode.getType();
						RESULT = typeNode.getType();
				
					}
				else{
						parser.report_error("Greska na liniji "+typeNameleft+"Ime: "+typeName+" ne predstavlja tip.",typeNode);
						currentType=MyTab.noType;
						RESULT = MyTab.noType;
					}
				}
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Type ::= VOID 
            {
              Struct RESULT =null;
		
			RESULT=MyTab.noType;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MedBraceList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MedBraceList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MedBraceList ::= LMEDBRACE RMEDBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MedBraceList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FormParamList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FormParamList ::= FormParamList COMMA Type IDENT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					parser.report_info("Parametar funkcije: "+name+" na liniji "+nameleft,null);
					if(MyTab.currentScope.findSymbol(name)!=null)
						{
							parser.report_error("Vec postoji promenljiva sa imenom: " + name,null);
						}
					else {
						Obj temp = MyTab.insert(Obj.Var, name, currentType);
						RESULT=f;
						}
			
				  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FormParamList ::= FormParamList COMMA Type IDENT LMEDBRACE RMEDBRACE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					parser.report_info("Parametar funkcije: "+name+" na liniji "+nameleft,null);
					if(MyTab.currentScope.findSymbol(name)!=null)
						{
							parser.report_error("Vec postoji promenljiva sa imenom: " + name,null);
						}
					else {
						Obj temp = MyTab.insert(Obj.Var, name, MyTab.referenceType);
						RESULT=f;
						}
			
				  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FormPars ::= VarArgs 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FormPars ::= Type IDENT FormParamList VarArgs 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				parser.report_info("Parametar funkcije: "+name+" na liniji "+nameleft,null);
				if(MyTab.currentScope.findSymbol(name)!=null)
					{
						parser.report_error("Vec postoji promenljiva sa imenom: " + name,null);
					}
				else {
					Obj temp = MyTab.insert(Obj.Var, name, currentType);
					}
			
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FormPars ::= Type IDENT LMEDBRACE RMEDBRACE FormParamList VarArgs 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
				parser.report_info("Parametar funkcije: "+name+" na liniji "+nameleft,null);
				if(MyTab.currentScope.findSymbol(name)!=null)
					{
						parser.report_error("Vec postoji promenljiva sa imenom: " + name,null);
					}
				else {
					Obj temp = MyTab.insert(Obj.Var, name, MyTab.referenceType);
					}
			
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VarArgs ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarArgs",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VarArgs ::= Type DOT DOT DOT IDENT 
            {
              Object RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct typeName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarArgs",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodDecl ::= STATIC Type IDENT NT$3 LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		 
				if(!returnFound && retType != MyTab.noType)
					parser.report_error("Semanticka greska na liniji: "+methNameleft+". Funkcija: "+methName+" nema return iskaz.",null);
				MyTab.chainLocalSymbols(currentMethod);
				returnFound=false;
				currentMethod=null;	
				currentMethType=null;
				MyTab.closeScope();
				in_method=false;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$3 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
  
				if(!in_class==true)
					parser.report_error("Greska na liniji: "+retTypeleft+". Staticka funkcija: "+methName+" mora biti unutar klase.",null);
				in_method=true;
				currentMethod=MyTab.insert(Obj.Meth,methName,retType);
				currentMethType=retType;
				MyTab.openScope();
				parser.report_info("Obradjuje se metoda: "+methName+" na liniji "+methNameleft,null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MethodDecl ::= Type IDENT NT$2 LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		 
				if(in_class) 
					  		_this = MyTab.insert(Obj.Var, "this", MyTab.noType);
				if(!returnFound && retType != MyTab.noType)
					parser.report_error("Semanticka greska na liniji: "+methNameleft+". Funkcija: "+methName+" nema return iskaz.",null);
				MyTab.chainLocalSymbols(currentMethod);
				returnFound=false;
				currentMethod=null;	
				currentMethType=null;
				MyTab.closeScope();
				in_method=false;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$2 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

				in_method=true;
				currentMethod=MyTab.insert(Obj.Meth,methName,retType);
				currentMethType=retType;
				MyTab.openScope();
				parser.report_info("Obradjuje se metoda: "+methName+" na liniji "+methNameleft,null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				   RESULT=m;
				  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AnotherList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AnotherList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AnotherList ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AnotherList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDecl ::= CLASS IDENT EXTENDS IDENT NT$1 LBRACE ClassVarDeclList AnotherList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
			 	MyTab.chainLocalSymbols(currentClass.getType());
				in_class = false;
			 	MyTab.closeScope();
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$1 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

			 	
			 	currentClass=MyTab.insert(Obj.Type, name, new MyStruct(MyStruct.Class));
			 	MyTab.openScope();
			 	parser.report_info("Deklarisana klasa " + name + " na liniji " + nameleft,null);
			 	in_class = true;
			 	Obj temp=MyTab.find(tip);
			 	if(temp.equals(!temp.equals(MyStruct.Class))||temp.equals(MyTab.noObj)){
			 		parser.report_error("Greska na liniji: " + nameleft+ " . Tip iz koga se izvodi nije definisan.",null);
			 	}
			 	RESULT=currentClass;
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDecl ::= CLASS IDENT NT$0 LBRACE ClassVarDeclList AnotherList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
			 	MyTab.chainLocalSymbols(currentClass.getType());
				in_class = false;
			 	MyTab.closeScope();
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$0 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
	
			 	currentClass= MyTab.insert(Obj.Type, name, new MyStruct(MyStruct.Class));
			 	MyTab.openScope();
			 	parser.report_info("Deklarisana klasa " + name + " na liniji " + nameleft,null);
			  	in_class = true;
			  	RESULT=currentClass;
			 
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ClassVarDeclList ::= ClassVarDeclList ClassVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ExtIdentList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtIdentList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ExtIdentList ::= ExtIdentList COMMA IDENT MedBraceList 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					parser.report_info("Deklarisana promenljiva "+varName+" na liniji "+varNameleft,null);
					if(MyTab.currentScope.findSymbol(varName)!=null){
						parser.report_error("Vec postoji promenljiva sa imenom: " + varName,null);
					}else {
						Obj temp = MyTab.insert(in_class && !in_method ? Obj.Fld : Obj.Var, varName, currentType);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtIdentList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDecl ::= Type IDENT LMEDBRACE RMEDBRACE ExtIdentList SEMI 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
			parser.report_info("Deklarisana promenljiva "+varName+" na liniji "+varNameleft,null);
			if(MyTab.currentScope.findSymbol(varName)!=null)
				{
					parser.report_error("Vec postoji promenljiva sa imenom: " + varName,null);
				}
			else {
				Obj temp = MyTab.insert(in_class && !in_method ? Obj.Type : Obj.Type, varName, MyTab.referenceType);
				}
			
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= Type IDENT ExtIdentList SEMI 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			parser.report_info(varType.getKind() + " Deklarisana promenljiva "+varName+" na liniji "+varNameleft,null);
			if(MyTab.currentScope.findSymbol(varName)!=null)
				{
					parser.report_error("Greska na liniji: "+varNameleft+".Vec postoji promenljiva sa imenom: " + varName,null);
				}
			else {
				Obj temp = MyTab.insert(in_class && !in_method ? Obj.Fld : Obj.Var, varName, varType);
				}
			
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IdentIdentList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentIdentList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdentIdentList ::= IdentIdentList COMMA IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					parser.report_info(" Deklarisana promenljiva "+varName+" tipa: "+currentType.getKind()+" na liniji "+varNameleft,null);
					if(MyTab.currentScope.findSymbol(varName)!=null)
						{
							parser.report_error("Greska na liniji: "+varNameleft+".Vec postoji promenljiva sa imenom: " + varName,null);
						}
					else {
						Obj temp = MyTab.insert(in_class && !in_method ? Obj.Fld : Obj.Var, varName, currentType);
						}
					
			      
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentIdentList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdentIdentList ::= IdentIdentList COMMA IDENT LMEDBRACE RMEDBRACE 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					parser.report_info(" Deklarisana promenljiva "+varName+" na liniji "+varNameleft,null);
					if(MyTab.currentScope.findSymbol(varName)!=null)
						{
							parser.report_error("Greska na liniji: "+varNameleft+".Vec postoji promenljiva sa imenom: " + varName,null);
						}
					else {
						Obj temp = MyTab.insert(in_class && !in_method ? Obj.Fld : Obj.Var, varName, MyTab.referenceType);
						}
				  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentIdentList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ClassVarDecl ::= STATIC Type IDENT IdentIdentList SEMI 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					parser.report_info(varType.getKind() + " Deklarisana promenljiva "+varName+" na liniji "+varNameleft,null);
					if(MyTab.currentScope.findSymbol(varName)!=null)
						{
							parser.report_error("Greska na liniji: "+varNameleft+".Vec postoji promenljiva sa imenom: " + varName,null);
						}
					else {
						Obj temp = MyTab.insert(in_class && !in_method ? Obj.Fld : Obj.Var, varName, varType);
						}
					
			    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ClassVarDecl ::= Type IDENT IdentIdentList SEMI 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					parser.report_info(varType.getKind() + " Deklarisana promenljiva "+varName+" na liniji "+varNameleft,null);
					if(MyTab.currentScope.findSymbol(varName)!=null)
						{
							parser.report_error("Greska na liniji: "+varNameleft+".Vec postoji promenljiva sa imenom: " + varName,null);
						}
					else {
						Obj temp = MyTab.insert(in_class && !in_method ? Obj.Fld : Obj.Var, varName, varType);
						}
					
			    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ClassVarDecl ::= Type IDENT LMEDBRACE RMEDBRACE IdentIdentList SEMI 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
					parser.report_info(varType.getKind() + " Deklarisana promenljiva "+varName+" na liniji "+varNameleft,null);
					if(MyTab.currentScope.findSymbol(varName)!=null)
						{
							parser.report_error("Greska na liniji: "+varNameleft+".Vec postoji promenljiva sa imenom: " + varName,null);
						}
					else {
						Obj temp = MyTab.insert(in_class && !in_method ? Obj.Fld : Obj.Var, varName, MyTab.referenceType);
						}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ClassVarDecl ::= STATIC Type IDENT LMEDBRACE RMEDBRACE IdentIdentList SEMI 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
					parser.report_info(varType.getKind() + " Deklarisana promenljiva "+varName+" na liniji "+varNameleft,null);
					if(MyTab.currentScope.findSymbol(varName)!=null)
						{
							parser.report_error("Greska na liniji: "+varNameleft+".Vec postoji promenljiva sa imenom: " + varName,null);
						}
					else {
						Obj temp = MyTab.insert(in_class && !in_method ? Obj.Fld : Obj.Var, varName, MyTab.referenceType);
						}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstList ::= BOOL 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = MyTab.boolType; 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstList ::= CHAR 
            {
              Object RESULT =null;
		int chrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int chrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character chr = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = MyTab.charType;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstList ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = MyTab.intType;  
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IdentList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IdentList ::= IdentList COMMA IDENT EQUAL ConstList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ConstDecl ::= CONST Type IDENT EQUAL ConstList IdentList SEMI 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				  	if(MyTab.currentScope.findSymbol(name) != null)
				  		parser.report_error("Greska na liniji: "+nameleft+". Vec postoji identifikator sa imenom: " + name,null);
				  	else {
				  		Obj temp = MyTab.insert(Obj.Con, name, currentType);
				  		if(!o.equals(currentType))
				  			parser.report_error("Greska na liniji: " + nameleft+" . Tip koji se dodeljuje ne odgovara tipu kome se dodeljuje. ",null);
				  	}
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SomeDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SomeDeclList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SomeDeclList ::= SomeDeclList ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SomeDeclList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SomeDeclList ::= SomeDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SomeDeclList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SomeDeclList ::= SomeDeclList ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SomeDeclList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			RESULT= MyTab.insert(Obj.Prog,pName,MyTab.noType);
			MyTab.openScope();
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgName SomeDeclList LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
				MyTab.chainLocalSymbols(p);
				MyTab.closeScope();
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

