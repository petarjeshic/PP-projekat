
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 27 14:18:57 CEST 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.io.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.util.MyTab;
import rs.ac.bg.etf.pp1.util.MyStruct;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.structure.SymbolDataStructure;
import java.util.Stack;
import java.util.Collection;
import java.util.Iterator;
import java.util.HashMap;
import java.util.Map;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 27 14:18:57 CEST 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\215\000\002\002\010\000\002\002\004\000\002\051" +
    "\003\000\002\047\004\000\002\047\004\000\002\047\004" +
    "\000\002\047\002\000\002\016\011\000\002\016\005\000" +
    "\002\020\007\000\002\020\002\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\006\005\000\002\006" +
    "\005\000\002\022\005\000\002\022\003\000\002\022\005" +
    "\000\002\021\003\000\002\021\005\000\002\066\002\000" +
    "\002\023\012\000\002\015\005\000\002\015\002\000\002" +
    "\013\003\000\002\014\004\000\002\014\003\000\002\014" +
    "\004\000\002\014\002\000\002\032\004\000\002\032\002" +
    "\000\002\035\005\000\002\035\005\000\002\035\003\000" +
    "\002\035\004\000\002\053\005\000\002\053\003\000\002" +
    "\054\003\000\002\054\005\000\002\005\004\000\002\005" +
    "\002\000\002\067\002\000\002\003\014\000\002\070\002" +
    "\000\002\003\015\000\002\050\007\000\002\050\002\000" +
    "\002\004\004\000\002\004\002\000\002\064\010\000\002" +
    "\064\006\000\002\064\003\000\002\010\010\000\002\010" +
    "\006\000\002\010\002\000\002\055\003\000\002\055\003" +
    "\000\002\011\003\000\002\011\003\000\002\071\002\000" +
    "\002\034\007\000\002\046\004\000\002\046\006\000\002" +
    "\045\004\000\002\045\007\000\002\045\006\000\002\072" +
    "\002\000\002\045\014\000\002\045\004\000\002\045\004" +
    "\000\002\073\002\000\002\045\006\000\002\045\004\000" +
    "\002\045\007\000\002\045\010\000\002\045\005\000\002" +
    "\007\004\000\002\007\002\000\002\027\003\000\002\027" +
    "\002\000\002\030\004\000\002\030\002\000\002\026\003" +
    "\000\002\026\002\000\002\024\005\000\002\024\004\000" +
    "\002\024\004\000\002\025\004\000\002\031\005\000\002" +
    "\031\002\000\002\043\004\000\002\044\005\000\002\044" +
    "\002\000\002\033\005\000\002\033\003\000\002\057\005" +
    "\000\002\057\004\000\002\057\003\000\002\056\003\000" +
    "\002\056\005\000\002\052\005\000\002\052\003\000\002" +
    "\074\002\000\002\075\002\000\002\052\010\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\006" +
    "\000\002\060\007\000\002\060\004\000\002\060\005\000" +
    "\002\060\003\000\002\012\003\000\002\012\002\000\002" +
    "\065\005\000\002\065\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\062\003\000\002\062\003\000\002" +
    "\037\003\000\002\037\003\000\002\040\003\000\002\040" +
    "\003\000\002\063\003\000\002\063\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\004\004\005\001\002\000\004\002\375\001" +
    "\002\000\004\065\006\001\002\000\014\005\uffff\006\uffff" +
    "\026\uffff\030\uffff\065\uffff\001\002\000\014\005\ufffb\006" +
    "\ufffb\026\ufffb\030\ufffb\065\ufffb\001\002\000\014\005\014" +
    "\006\012\026\020\030\021\065\013\001\002\000\006\003" +
    "\360\065\361\001\002\000\012\005\uffd8\007\uffd8\037\uffd8" +
    "\065\uffd8\001\002\000\070\003\uffc8\006\uffc8\010\uffc8\012" +
    "\uffc8\013\uffc8\016\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\065\uffc8\001\002\000\070\003" +
    "\uffc9\006\uffc9\010\uffc9\012\uffc9\013\uffc9\016\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\065" +
    "\uffc9\001\002\000\014\005\ufffd\006\ufffd\026\ufffd\030\ufffd" +
    "\065\ufffd\001\002\000\014\005\ufffc\006\ufffc\026\ufffc\030" +
    "\ufffc\065\ufffc\001\002\000\014\005\ufffe\006\ufffe\026\ufffe" +
    "\030\ufffe\065\ufffe\001\002\000\004\065\042\001\002\000" +
    "\010\003\023\005\014\065\013\001\002\000\004\065\025" +
    "\001\002\000\004\010\024\001\002\000\014\005\ufff9\006" +
    "\ufff9\026\ufff9\030\ufff9\065\ufff9\001\002\000\004\017\026" +
    "\001\002\000\010\062\027\063\032\064\030\001\002\000" +
    "\006\010\ufff6\013\ufff6\001\002\000\006\010\ufff4\013\ufff4" +
    "\001\002\000\006\010\ufff7\013\ufff7\001\002\000\006\010" +
    "\ufff5\013\ufff5\001\002\000\006\010\035\013\034\001\002" +
    "\000\004\065\036\001\002\000\014\005\ufffa\006\ufffa\026" +
    "\ufffa\030\ufffa\065\ufffa\001\002\000\004\017\037\001\002" +
    "\000\010\062\027\063\032\064\030\001\002\000\006\010" +
    "\ufff8\013\ufff8\001\002\000\010\003\044\006\uffe4\035\043" +
    "\001\002\000\010\003\uffe8\006\uffe8\035\uffe8\001\002\000" +
    "\010\003\355\005\014\065\013\001\002\000\004\006\uffe6" +
    "\001\002\000\004\006\uffec\001\002\000\004\006\047\001" +
    "\002\000\014\003\uffe2\005\uffe2\006\uffe2\007\uffe2\065\uffe2" +
    "\001\002\000\014\003\053\005\014\006\051\007\uffe9\065" +
    "\013\001\002\000\012\005\uffd8\007\uffd8\037\uffd8\065\uffd8" +
    "\001\002\000\006\003\060\065\062\001\002\000\014\003" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\065\uffdf\001\002\000\014" +
    "\003\uffe3\005\uffe3\006\uffe3\007\uffe3\065\uffe3\001\002\000" +
    "\004\007\056\001\002\000\014\005\uffeb\006\uffeb\026\uffeb" +
    "\030\uffeb\065\uffeb\001\002\000\006\010\uffdc\013\uffdc\001" +
    "\002\000\016\003\uffde\005\uffde\006\uffde\007\uffde\010\070" +
    "\065\uffde\001\002\000\006\010\066\013\065\001\002\000" +
    "\010\010\uffdb\013\uffdb\020\063\001\002\000\004\021\064" +
    "\001\002\000\006\010\uffda\013\uffda\001\002\000\004\065" +
    "\062\001\002\000\014\003\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\065\uffe1\001\002\000\006\010\uffdd\013\uffdd\001\002\000" +
    "\014\003\uffe0\005\uffe0\006\uffe0\007\uffe0\065\uffe0\001\002" +
    "\000\012\005\014\007\074\037\073\065\013\001\002\000" +
    "\004\065\343\001\002\000\006\005\014\065\013\001\002" +
    "\000\004\007\uffea\001\002\000\012\005\uffd9\007\uffd9\037" +
    "\uffd9\065\uffd9\001\002\000\004\065\077\001\002\000\004" +
    "\011\uffd5\001\002\000\004\011\101\001\002\000\010\005" +
    "\014\012\uffd2\065\013\001\002\000\006\022\323\065\322" +
    "\001\002\000\004\012\105\001\002\000\004\012\uffcd\001" +
    "\002\000\010\005\uffd0\006\uffd0\065\uffd0\001\002\000\010" +
    "\005\014\006\107\065\013\001\002\000\026\006\uffb3\007" +
    "\uffb3\014\uffb3\015\uffb3\025\uffb3\031\uffb3\033\uffb3\034\uffb3" +
    "\036\uffb3\065\uffb3\001\002\000\010\005\uffd1\006\uffd1\065" +
    "\uffd1\001\002\000\026\006\113\007\130\014\124\015\127" +
    "\025\131\031\121\033\112\034\115\036\126\065\114\001" +
    "\002\000\004\011\316\001\002\000\026\006\uffb3\007\uffb3" +
    "\014\uffb3\015\uffb3\025\uffb3\031\uffb3\033\uffb3\034\uffb3\036" +
    "\uffb3\065\uffb3\001\002\000\072\010\uff9b\011\uff9b\012\uff9b" +
    "\013\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023" +
    "\uff9b\024\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b" +
    "\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053" +
    "\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\001\002" +
    "\000\004\011\275\001\002\000\024\006\113\014\124\015" +
    "\127\025\131\031\121\033\112\034\115\036\126\065\114" +
    "\001\002\000\026\006\uffc6\007\uffc6\014\uffc6\015\uffc6\025" +
    "\uffc6\031\uffc6\033\uffc6\034\uffc6\036\uffc6\065\uffc6\001\002" +
    "\000\030\011\263\017\261\020\172\022\174\052\147\053" +
    "\152\054\162\055\163\056\170\057\256\060\262\001\002" +
    "\000\004\011\230\001\002\000\004\010\227\001\002\000" +
    "\026\006\uffb4\007\uffb4\014\uffb4\015\uffb4\025\uffb4\031\uffb4" +
    "\033\uffb4\034\uffb4\036\uffb4\065\uffb4\001\002\000\004\011" +
    "\220\001\002\000\026\006\uffc7\007\uffc7\014\uffc7\015\uffc7" +
    "\025\uffc7\031\uffc7\033\uffc7\034\uffc7\036\uffc7\065\uffc7\001" +
    "\002\000\004\010\217\001\002\000\022\010\141\011\144" +
    "\032\135\040\133\062\140\063\145\064\134\065\114\001" +
    "\002\000\012\005\uffd4\007\uffd4\037\uffd4\065\uffd4\001\002" +
    "\000\004\010\132\001\002\000\030\006\uffbc\007\uffbc\014" +
    "\uffbc\015\uffbc\025\uffbc\027\uffbc\031\uffbc\033\uffbc\034\uffbc" +
    "\036\uffbc\065\uffbc\001\002\000\016\011\144\032\135\062" +
    "\140\063\145\064\134\065\114\001\002\000\056\010\uff95" +
    "\012\uff95\013\uff95\016\uff95\021\uff95\023\uff95\024\uff95\040" +
    "\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95" +
    "\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055" +
    "\uff95\056\uff95\001\002\000\006\005\014\065\013\001\002" +
    "\000\014\010\uffba\016\151\040\153\052\147\053\152\001" +
    "\002\000\064\010\uff90\011\173\012\uff90\013\uff90\016\uff90" +
    "\020\172\021\uff90\022\174\023\uff90\024\uff90\040\uff90\041" +
    "\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90" +
    "\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056" +
    "\uff90\001\002\000\056\010\uff97\012\uff97\013\uff97\016\uff97" +
    "\021\uff97\023\uff97\024\uff97\040\uff97\041\uff97\042\uff97\043" +
    "\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97" +
    "\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97\001\002\000" +
    "\030\006\uffb8\007\uffb8\014\uffb8\015\uffb8\025\uffb8\027\uffb8" +
    "\031\uffb8\033\uffb8\034\uffb8\036\uffb8\065\uffb8\001\002\000" +
    "\056\010\uff9f\012\uff9f\013\uff9f\016\uff9f\021\uff9f\023\uff9f" +
    "\024\uff9f\040\uff9f\041\166\042\160\043\164\044\uff9f\045" +
    "\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f" +
    "\054\162\055\163\056\170\001\002\000\056\010\uff9e\012" +
    "\uff9e\013\uff9e\016\uff9e\021\uff9e\023\uff9e\024\uff9e\040\uff9e" +
    "\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e" +
    "\056\uff9e\001\002\000\020\011\144\032\135\040\133\062" +
    "\140\063\145\064\134\065\114\001\002\000\056\010\uff96" +
    "\012\uff96\013\uff96\016\uff96\021\uff96\023\uff96\024\uff96\040" +
    "\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96" +
    "\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055" +
    "\uff96\056\uff96\001\002\000\014\012\150\016\151\040\153" +
    "\052\147\053\152\001\002\000\020\011\uff7e\032\uff7e\040" +
    "\uff7e\062\uff7e\063\uff7e\064\uff7e\065\uff7e\001\002\000\056" +
    "\010\uff91\012\uff91\013\uff91\016\uff91\021\uff91\023\uff91\024" +
    "\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91" +
    "\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054" +
    "\uff91\055\uff91\056\uff91\001\002\000\016\011\uff80\032\uff80" +
    "\062\uff80\063\uff80\064\uff80\065\uff80\001\002\000\020\011" +
    "\uff7d\032\uff7d\040\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d" +
    "\001\002\000\016\011\uff7f\032\uff7f\062\uff7f\063\uff7f\064" +
    "\uff7f\065\uff7f\001\002\000\016\011\uff81\032\uff81\062\uff81" +
    "\063\uff81\064\uff81\065\uff81\001\002\000\016\011\144\032" +
    "\135\062\140\063\145\064\134\065\114\001\002\000\016" +
    "\011\uff82\032\uff82\062\uff82\063\uff82\064\uff82\065\uff82\001" +
    "\002\000\056\010\uffa1\012\uffa1\013\uffa1\016\uffa1\021\uffa1" +
    "\023\uffa1\024\uffa1\040\uffa1\041\166\042\160\043\164\044" +
    "\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1" +
    "\053\uffa1\054\162\055\163\056\170\001\002\000\016\011" +
    "\uff79\032\uff79\062\uff79\063\uff79\064\uff79\065\uff79\001\002" +
    "\000\016\011\uff7b\032\uff7b\062\uff7b\063\uff7b\064\uff7b\065" +
    "\uff7b\001\002\000\020\011\uff77\032\uff77\040\uff77\062\uff77" +
    "\063\uff77\064\uff77\065\uff77\001\002\000\020\011\uff76\032" +
    "\uff76\040\uff76\062\uff76\063\uff76\064\uff76\065\uff76\001\002" +
    "\000\016\011\uff78\032\uff78\062\uff78\063\uff78\064\uff78\065" +
    "\uff78\001\002\000\016\011\144\032\135\062\140\063\145" +
    "\064\134\065\114\001\002\000\016\011\uff7a\032\uff7a\062" +
    "\uff7a\063\uff7a\064\uff7a\065\uff7a\001\002\000\016\011\uff7c" +
    "\032\uff7c\062\uff7c\063\uff7c\064\uff7c\065\uff7c\001\002\000" +
    "\020\011\uff75\032\uff75\040\uff75\062\uff75\063\uff75\064\uff75" +
    "\065\uff75\001\002\000\056\010\uff9d\012\uff9d\013\uff9d\016" +
    "\uff9d\021\uff9d\023\uff9d\024\uff9d\040\uff9d\041\uff9d\042\uff9d" +
    "\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051" +
    "\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\001\002" +
    "\000\020\011\uff9a\032\uff9a\040\uff9a\062\uff9a\063\uff9a\064" +
    "\uff9a\065\uff9a\001\002\000\022\011\144\012\uff8e\032\135" +
    "\040\133\062\140\063\145\064\134\065\114\001\002\000" +
    "\004\065\175\001\002\000\072\010\uff9c\011\uff9c\012\uff9c" +
    "\013\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023" +
    "\uff9c\024\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\001\002" +
    "\000\004\012\203\001\002\000\016\012\uff8c\013\201\016" +
    "\151\040\153\052\147\053\152\001\002\000\004\012\uff8f" +
    "\001\002\000\020\011\144\032\135\040\133\062\140\063" +
    "\145\064\134\065\114\001\002\000\004\012\uff8d\001\002" +
    "\000\056\010\uff94\012\uff94\013\uff94\016\uff94\021\uff94\023" +
    "\uff94\024\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94" +
    "\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053" +
    "\uff94\054\uff94\055\uff94\056\uff94\001\002\000\020\011\144" +
    "\032\135\040\133\062\140\063\145\064\134\065\114\001" +
    "\002\000\014\016\151\021\uff99\040\153\052\147\053\152" +
    "\001\002\000\004\021\207\001\002\000\072\010\uff98\011" +
    "\uff98\012\uff98\013\uff98\016\uff98\017\uff98\020\uff98\021\uff98" +
    "\022\uff98\023\uff98\024\uff98\040\uff98\041\uff98\042\uff98\043" +
    "\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98\051\uff98" +
    "\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98\060" +
    "\uff98\001\002\000\004\010\211\001\002\000\030\006\uffb9" +
    "\007\uffb9\014\uffb9\015\uffb9\025\uffb9\027\uffb9\031\uffb9\033" +
    "\uffb9\034\uffb9\036\uffb9\065\uffb9\001\002\000\060\010\uff92" +
    "\012\uff92\013\uff92\016\uff92\020\213\021\uff92\023\uff92\024" +
    "\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92" +
    "\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054" +
    "\uff92\055\uff92\056\uff92\001\002\000\020\011\144\032\135" +
    "\040\133\062\140\063\145\064\134\065\114\001\002\000" +
    "\014\016\151\021\215\040\153\052\147\053\152\001\002" +
    "\000\056\010\uff93\012\uff93\013\uff93\016\uff93\021\uff93\023" +
    "\uff93\024\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93" +
    "\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053" +
    "\uff93\054\uff93\055\uff93\056\uff93\001\002\000\056\010\uffa0" +
    "\012\uffa0\013\uffa0\016\uffa0\021\uffa0\023\uffa0\024\uffa0\040" +
    "\uffa0\041\166\042\160\043\164\044\uffa0\045\uffa0\046\uffa0" +
    "\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\162\055" +
    "\163\056\170\001\002\000\030\006\uffbb\007\uffbb\014\uffbb" +
    "\015\uffbb\025\uffbb\027\uffbb\031\uffbb\033\uffbb\034\uffbb\036" +
    "\uffbb\065\uffbb\001\002\000\020\011\144\032\135\040\133" +
    "\062\140\063\145\064\134\065\114\001\002\000\016\012" +
    "\uffaf\013\223\016\151\040\153\052\147\053\152\001\002" +
    "\000\004\012\225\001\002\000\004\062\224\001\002\000" +
    "\004\012\uffb0\001\002\000\004\010\226\001\002\000\030" +
    "\006\uffb6\007\uffb6\014\uffb6\015\uffb6\025\uffb6\027\uffb6\031" +
    "\uffb6\033\uffb6\034\uffb6\036\uffb6\065\uffb6\001\002\000\030" +
    "\006\uffc1\007\uffc1\014\uffc1\015\uffc1\025\uffc1\027\uffc1\031" +
    "\uffc1\033\uffc1\034\uffc1\036\uffc1\065\uffc1\001\002\000\020" +
    "\011\144\032\135\040\133\062\140\063\145\064\134\065" +
    "\114\001\002\000\036\010\uffa2\012\uffa2\016\151\023\251" +
    "\024\246\040\153\044\245\045\250\046\252\047\247\050" +
    "\uffa2\051\uffa2\052\147\053\152\001\002\000\004\012\uffc5" +
    "\001\002\000\012\010\uffa4\012\uffa4\050\uffa4\051\uffa4\001" +
    "\002\000\010\010\uffa7\012\uffa7\051\uffa7\001\002\000\010" +
    "\010\uffa9\012\uffa9\051\236\001\002\000\020\011\144\032" +
    "\135\040\133\062\140\063\145\064\134\065\114\001\002" +
    "\000\010\010\uffa8\012\uffa8\051\uffa8\001\002\000\012\010" +
    "\uffa6\012\uffa6\050\241\051\uffa6\001\002\000\020\011\144" +
    "\032\135\040\133\062\140\063\145\064\134\065\114\001" +
    "\002\000\012\010\uffa5\012\uffa5\050\uffa5\051\uffa5\001\002" +
    "\000\004\012\244\001\002\000\024\006\uffc4\014\uffc4\015" +
    "\uffc4\025\uffc4\031\uffc4\033\uffc4\034\uffc4\036\uffc4\065\uffc4" +
    "\001\002\000\020\011\uff88\032\uff88\040\uff88\062\uff88\063" +
    "\uff88\064\uff88\065\uff88\001\002\000\020\011\uff84\032\uff84" +
    "\040\uff84\062\uff84\063\uff84\064\uff84\065\uff84\001\002\000" +
    "\020\011\uff83\032\uff83\040\uff83\062\uff83\063\uff83\064\uff83" +
    "\065\uff83\001\002\000\020\011\uff87\032\uff87\040\uff87\062" +
    "\uff87\063\uff87\064\uff87\065\uff87\001\002\000\020\011\uff86" +
    "\032\uff86\040\uff86\062\uff86\063\uff86\064\uff86\065\uff86\001" +
    "\002\000\020\011\uff85\032\uff85\040\uff85\062\uff85\063\uff85" +
    "\064\uff85\065\uff85\001\002\000\020\011\144\032\135\040" +
    "\133\062\140\063\145\064\134\065\114\001\002\000\022" +
    "\010\uffa3\012\uffa3\016\151\040\153\050\uffa3\051\uffa3\052" +
    "\147\053\152\001\002\000\020\011\uff89\032\uff89\040\uff89" +
    "\062\uff89\063\uff89\064\uff89\065\uff89\001\002\000\006\010" +
    "\uffab\012\uffab\001\002\000\020\011\uff8a\032\uff8a\040\uff8a" +
    "\062\uff8a\063\uff8a\064\uff8a\065\uff8a\001\002\000\020\011" +
    "\144\032\135\040\133\062\140\063\145\064\134\065\114" +
    "\001\002\000\020\011\uff8b\032\uff8b\040\uff8b\062\uff8b\063" +
    "\uff8b\064\uff8b\065\uff8b\001\002\000\006\010\uffaa\012\uffaa" +
    "\001\002\000\022\011\144\012\uff8e\032\135\040\133\062" +
    "\140\063\145\064\134\065\114\001\002\000\004\012\265" +
    "\001\002\000\004\010\266\001\002\000\030\006\uffc0\007" +
    "\uffc0\014\uffc0\015\uffc0\025\uffc0\027\uffc0\031\uffc0\033\uffc0" +
    "\034\uffc0\036\uffc0\065\uffc0\001\002\000\016\010\uffac\012" +
    "\uffac\016\151\040\153\052\147\053\152\001\002\000\026" +
    "\006\uffc3\007\uffc3\014\uffc3\015\uffc3\025\uffc3\031\uffc3\033" +
    "\uffc3\034\uffc3\036\uffc3\065\uffc3\001\002\000\030\006\uffc7" +
    "\007\uffc7\014\uffc7\015\uffc7\025\uffc7\027\272\031\uffc7\033" +
    "\uffc7\034\uffc7\036\uffc7\065\uffc7\001\002\000\024\006\113" +
    "\014\124\015\127\025\131\031\121\033\112\034\115\036" +
    "\126\065\114\001\002\000\026\006\uffc2\007\uffc2\014\uffc2" +
    "\015\uffc2\025\uffc2\031\uffc2\033\uffc2\034\uffc2\036\uffc2\065" +
    "\uffc2\001\002\000\030\006\uffbf\007\uffbf\014\uffbf\015\uffbf" +
    "\025\uffbf\027\uffbf\031\uffbf\033\uffbf\034\uffbf\036\uffbf\065" +
    "\uffbf\001\002\000\006\010\uffad\065\114\001\002\000\026" +
    "\017\261\020\172\022\174\052\147\053\152\054\162\055" +
    "\163\056\170\057\256\060\262\001\002\000\006\010\uffae" +
    "\012\uffae\001\002\000\004\010\301\001\002\000\022\010" +
    "\uffb1\011\144\032\135\040\133\062\140\063\145\064\134" +
    "\065\114\001\002\000\004\010\304\001\002\000\004\010" +
    "\uffb2\001\002\000\006\012\uffad\065\114\001\002\000\004" +
    "\012\306\001\002\000\024\006\uffbe\014\uffbe\015\uffbe\025" +
    "\uffbe\031\uffbe\033\uffbe\034\uffbe\036\uffbe\065\uffbe\001\002" +
    "\000\024\006\113\014\124\015\127\025\131\031\121\033" +
    "\112\034\115\036\126\065\114\001\002\000\024\006\113" +
    "\014\124\015\127\025\131\031\121\033\112\034\115\036" +
    "\126\065\114\001\002\000\030\006\uffbd\007\uffbd\014\uffbd" +
    "\015\uffbd\025\uffbd\027\uffbd\031\uffbd\033\uffbd\034\uffbd\036" +
    "\uffbd\065\uffbd\001\002\000\004\027\313\001\002\000\024" +
    "\006\113\014\124\015\127\025\131\031\121\033\112\034" +
    "\115\036\126\065\114\001\002\000\026\006\113\007\315" +
    "\014\124\015\127\025\131\031\121\033\112\034\115\036" +
    "\126\065\114\001\002\000\030\006\uffb5\007\uffb5\014\uffb5" +
    "\015\uffb5\025\uffb5\027\uffb5\031\uffb5\033\uffb5\034\uffb5\036" +
    "\uffb5\065\uffb5\001\002\000\004\065\114\001\002\000\010" +
    "\012\320\020\172\022\174\001\002\000\004\010\321\001" +
    "\002\000\030\006\uffb7\007\uffb7\014\uffb7\015\uffb7\025\uffb7" +
    "\027\uffb7\031\uffb7\033\uffb7\034\uffb7\036\uffb7\065\uffb7\001" +
    "\002\000\014\005\uffca\012\uffca\013\uffca\020\327\065\uffca" +
    "\001\002\000\004\022\324\001\002\000\004\022\325\001" +
    "\002\000\004\065\326\001\002\000\004\012\uffd3\001\002" +
    "\000\004\021\340\001\002\000\012\005\014\012\uffd2\013" +
    "\331\065\013\001\002\000\006\005\014\065\013\001\002" +
    "\000\004\022\323\001\002\000\004\012\uffce\001\002\000" +
    "\004\065\335\001\002\000\014\005\uffcb\012\uffcb\013\uffcb" +
    "\020\336\065\uffcb\001\002\000\004\021\337\001\002\000" +
    "\012\005\uffcc\012\uffcc\013\uffcc\065\uffcc\001\002\000\012" +
    "\005\uffca\012\uffca\013\uffca\065\uffca\001\002\000\012\005" +
    "\014\012\uffd2\013\331\065\013\001\002\000\004\012\uffcf" +
    "\001\002\000\004\011\uffd7\001\002\000\004\011\345\001" +
    "\002\000\010\005\014\012\uffd2\065\013\001\002\000\004" +
    "\012\347\001\002\000\010\005\uffd0\006\uffd0\065\uffd0\001" +
    "\002\000\010\005\014\006\351\065\013\001\002\000\026" +
    "\006\uffb3\007\uffb3\014\uffb3\015\uffb3\025\uffb3\031\uffb3\033" +
    "\uffb3\034\uffb3\036\uffb3\065\uffb3\001\002\000\026\006\113" +
    "\007\353\014\124\015\127\025\131\031\121\033\112\034" +
    "\115\036\126\065\114\001\002\000\012\005\uffd6\007\uffd6" +
    "\037\uffd6\065\uffd6\001\002\000\004\006\uffe7\001\002\000" +
    "\004\006\uffe5\001\002\000\012\005\014\007\357\037\073" +
    "\065\013\001\002\000\004\002\001\001\002\000\006\010" +
    "\374\013\367\001\002\000\010\010\uffee\013\uffee\020\372" +
    "\001\002\000\004\010\371\001\002\000\006\010\ufff0\013" +
    "\364\001\002\000\006\003\365\065\361\001\002\000\004" +
    "\013\367\001\002\000\004\010\ufff1\001\002\000\006\003" +
    "\365\065\361\001\002\000\004\010\uffef\001\002\000\014" +
    "\005\ufff3\006\ufff3\026\ufff3\030\ufff3\065\ufff3\001\002\000" +
    "\004\021\373\001\002\000\006\010\uffed\013\uffed\001\002" +
    "\000\014\005\ufff2\006\ufff2\026\ufff2\030\ufff2\065\ufff2\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\051\006\001\001\000\002\001\001\000\004\047\007" +
    "\001\001\000\012\006\014\016\016\023\015\055\010\001" +
    "\001\000\006\021\362\022\361\001\001\000\004\005\355" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\040" +
    "\001\001\000\004\055\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\037\001\001\000\002\001\001\000\004\014\044" +
    "\001\001\000\002\001\001\000\004\055\353\001\001\000" +
    "\002\001\001\000\004\066\045\001\001\000\002\001\001" +
    "\000\004\032\047\001\001\000\010\015\054\035\053\055" +
    "\051\001\001\000\004\005\070\001\001\000\006\053\060" +
    "\054\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\074\055\071\001\001\000\002\001\001\000\004\055\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\070\077\001\001\000\002\001\001\000\010" +
    "\050\103\055\101\064\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\105\001\001" +
    "\000\006\006\107\055\010\001\001\000\004\007\110\001" +
    "\001\000\002\001\001\000\016\011\122\024\121\034\115" +
    "\045\124\046\116\052\117\001\001\000\002\001\001\000" +
    "\004\007\313\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\011\267\024\121\034\115\045\270\046\116\052" +
    "\117\001\001\000\002\001\001\000\010\036\257\040\256" +
    "\041\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\052\136\056\141\057\135\060\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\052\136\056\215\060\142\001\001\000\002\001" +
    "\001\000\004\055\211\001\001\000\012\037\155\040\153" +
    "\062\154\073\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\041\160\042\166\063\164" +
    "\001\001\000\002\001\001\000\012\052\136\056\141\057" +
    "\145\060\142\001\001\000\002\001\001\000\010\037\155" +
    "\040\153\062\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\052\136\056\156\060\142\001" +
    "\001\000\002\001\001\000\010\041\160\042\166\063\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\052\136" +
    "\060\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\074\203\001\001" +
    "\000\016\012\175\052\136\056\141\057\176\060\142\065" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\037\155\040\153\062\154\001\001\000" +
    "\002\001\001\000\014\052\136\056\141\057\176\060\142" +
    "\065\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\052\136\056\141\057\204\060\142\001\001\000\012" +
    "\037\155\040\153\062\154\075\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\052\136\056\141\057\213\060" +
    "\142\001\001\000\010\037\155\040\153\062\154\001\001" +
    "\000\002\001\001\000\010\041\160\042\166\063\164\001" +
    "\001\000\002\001\001\000\012\052\136\056\141\057\220" +
    "\060\142\001\001\000\012\030\221\037\155\040\153\062" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\025\231\033\232\043\233\052\136\056\141" +
    "\057\230\060\142\001\001\000\012\037\155\040\153\061" +
    "\252\062\154\001\001\000\004\071\242\001\001\000\004" +
    "\044\237\001\001\000\004\031\234\001\001\000\002\001" +
    "\001\000\016\033\232\043\236\052\136\056\141\057\230" +
    "\060\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\033\241\052\136\056\141\057\230\060\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\052" +
    "\136\056\141\057\253\060\142\001\001\000\010\037\155" +
    "\040\153\062\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\052\136\056\141\057\266" +
    "\060\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\012\263\052\136\056\141\057\176\060\142\065\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\037\155\040\153\062\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\024\121\034\115\045" +
    "\273\046\272\052\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\024\276\026\277\052\275\001\001\000" +
    "\010\036\257\040\256\041\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\025\302\027\301\033\232\043" +
    "\233\052\136\056\141\057\230\060\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\276\026\304\052" +
    "\275\001\001\000\002\001\001\000\004\072\306\001\001" +
    "\000\012\024\121\034\307\045\310\052\117\001\001\000" +
    "\012\024\121\034\307\045\311\052\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\024\121\034\307\045" +
    "\273\052\117\001\001\000\016\011\122\024\121\034\115" +
    "\045\124\046\116\052\117\001\001\000\002\001\001\000" +
    "\004\052\316\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\327\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\050\332\055\331\001\001\000" +
    "\004\055\333\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\340\001\001\000\006\050\341" +
    "\055\331\001\001\000\002\001\001\000\004\067\343\001" +
    "\001\000\002\001\001\000\010\050\103\055\101\064\345" +
    "\001\001\000\002\001\001\000\004\004\347\001\001\000" +
    "\006\006\107\055\010\001\001\000\004\007\351\001\001" +
    "\000\016\011\122\024\121\034\115\045\124\046\116\052" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\074\055\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\362\022\365\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\362\022\367" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	MyTab.init(); //Universe obseg

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s=this.getScanner().next_token();
	if(s!=null && s.value!=null)
		log.info(s.toString()+" "+s.value.toString());
	return s;

    }


	int printCallCount;
	boolean errorDetected=false;
	Logger log=Logger.getLogger(getClass());
	public void report_fatal_error(String message,Object info)throws java.lang.Exception{
		done_parsing();
		report_error(message,info);
	}
	public void syntax_error(Symbol cur_token){
		report_error("\nSintaksna greska",cur_token);
	}
	public void unrecovered_syntax_error(Symbol cur_token)throws java.lang.Exception{
		report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti",cur_token);
	}
	public void report_error(String message,Object info){
		errorDetected=true;
		StringBuilder msg=new StringBuilder(message);
		if(info instanceof Symbol)
			msg.append(" na liniji ").append(((Symbol)info).left);
		log.error(msg.toString());
	}
	public void report_info(String message,Object info){
		StringBuilder msg=new StringBuilder(message);
		if(info instanceof Symbol)
			msg.append(" na liniji ").append(((Symbol)info).left);
		log.info(msg.toString());
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	Obj currentMethod = null;
	Obj _this;
	Obj currentClass;
	
	Struct currentType, currentMethType;
	Struct varType = null;
	Struct newClass=null;
	
	boolean main=false;
	boolean returnFound=false;
	boolean in_class = false; 
	boolean in_method = false;
	boolean in_for=false;
	boolean ok=true;
	

	boolean vtSet = false;
	Map<String, Obj> redefiningMap = new HashMap<String, Obj>(); 
	SymbolDataStructure extendsSymbols = null;
	
	Scope globalScope = null;
	Scope functionScope=null;
	Scope classScope=null;
	//counter-i
	int global_scope=0;
	int array_count = 0;	
	int var_count = 0;
	int con_count = 0;
	int mainDeclarations = 0;			

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // MulopRight ::= MODEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // MulopRight ::= DIVEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // MulopRight ::= MULEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // MulopLeft ::= MODI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // MulopLeft ::= DIVI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // MulopLeft ::= MULI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Mulop ::= MulopRight 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Mulop ::= MulopLeft 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // AddopRight ::= MINUSEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // AddopRight ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // AddopLeft ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // AddopLeft ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Addop ::= AddopRight 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Addop ::= AddopLeft 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Relop ::= LOWEQ 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Relop ::= LOWER 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Relop ::= GREATEQ 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Relop ::= GREATER 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Relop ::= NOTEQ 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Relop ::= EQEQ 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Assignop ::= MulopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Assignop ::= AddopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Assignop ::= EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ActPars ::= Expr 
            {
              Stack<MyStruct> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		    	RESULT = new Stack<MyStruct>();  
		    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ActPars ::= Expr COMMA ActPars 
            {
              Stack<MyStruct> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Stack<MyStruct> ap = (Stack<MyStruct>)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		    	RESULT = ap;  
		    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ActualPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ActualPars ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Factor ::= Designator 
            {
              Struct RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	RESULT=d.getType();
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Factor ::= LPAREN Expr RPAREN 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		 	RESULT=t;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Factor ::= NEW Type 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		  	Obj obj=new Obj(Obj.Var, "t", t);
		  	RESULT = obj.getType();
		  	if(t.getKind() != Struct.Class) {
			   		parser.report_error("Semanticka greska na liniji " + tleft + ": Tip mora biti klasa!", null);
			   		RESULT = MyTab.noType;
			}
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Factor ::= NEW Type LMEDBRACE Expr RMEDBRACE 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		 	Struct arrayType = new Struct(Struct.Array);
			arrayType.setElementType(t);
			Obj obj=new Obj(Obj.Var, "t", arrayType);
		 	RESULT =obj.getType();
		 	if(e.getKind()!=Struct.Int){
		 	parser.report_error("Greska na liniji: "+eleft+". Tip promenljive u nizu mora biti Int.",null);
		 	RESULT=MyTab.noType;
		 	}
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Factor ::= Designator LPAREN ActualPars RPAREN 
            {
              Struct RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			if(Obj.Meth == func.getKind()) {
				parser.report_info("Pronadjen poziv funkcije "+func.getName()+" na liniji: "+funcleft,null);
				RESULT=func.getType();
				
				}
			else {
				parser.report_error("Greska na liniji: "+funcleft+" ime: "+func.getName()+" nije funkcija.",null);
				RESULT=MyTab.noType;
				}
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Factor ::= BOOL 
            {
              Struct RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			
		 	RESULT=new Struct(Struct.Bool);
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Factor ::= CHAR 
            {
              Struct RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		 	RESULT=new Struct(Struct.Char);
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Factor ::= NUMBER 
            {
              Struct RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
		 	 
			 RESULT=new Struct(Struct.Int);
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Designator ::= Designator LMEDBRACE NT$6 Expr NT$7 RMEDBRACE 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			   	RESULT = new Obj(Obj.Elem, "elem", o.getType().getElemType());
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$7 ::= 
            {
              Obj RESULT =(Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

			   	if(e.getKind()!=MyStruct.Int) {
				  		parser.report_error("Semanticka greska na liniji " + eleft + " izraz u uglastim zagradama mora biti tipa int!", null);
				  		RESULT=MyTab.noObj;
				  	}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$6 ::= 
            {
              Obj RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

			   	   	Obj ime=MyTab.find(o.getName());
			   	   	if(ime==MyTab.noObj)
			   	   	{
			   	   		parser.report_error("Greska na liniji "  + oleft + ":niz nije deklarisan.",null);
			   	   		RESULT=MyTab.noObj;
			   	   	}
			   	    if (o.getType().getKind()==MyStruct.Array) { 
				   		RESULT = new Obj(Obj.Elem, "", o.getType());
				   		if(MyTab.currentScope() == functionScope) {
			   					if( functionScope.findSymbol(o.getName()) != null ) {
			   						parser.report_info("Koriscenje lokalnog niza " + o + "-ova na liniji " + oleft, null);
			   					}
			   					else {
			   						parser.report_info("Koriscenje globalnog niza " + o + "-ova na liniji " + oleft, null);
			   					}
			   				}
			   		} else {
			   			parser.report_error("Greska na liniji "  + oleft + ":tip nije niz",null);
			   			RESULT=MyTab.noObj;
			   		}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		   
	   		   		Obj simbol = MyTab.find(name);
			   		
			   		if(simbol == MyTab.noObj) 
			   			parser.report_error("Semanticka greska na liniji: " + nameleft + ", simbol " + name + " ne postoji u tabeli simbola!", null);
			   			
			   		else if(simbol.getKind() == Obj.Con) {
			   			parser.report_info("Koriscenje konstante " + name + " na liniji: " + nameleft, null);
			   		}
			   		else if(simbol.getKind() == Obj.Var||(simbol.getKind() == Obj.Type && simbol.getType().getKind() == Struct.Class)) {
			   			if(MyTab.currentScope() == functionScope) {
			   					if( functionScope.findSymbol(name) != null ) {
			   						parser.report_info("Koriscenje lokalne promenljive " + name + " na liniji " + nameleft, null);
			   					}
			   					else {
			   						parser.report_info("Koriscenje globalne promenljive " + name + " na liniji " + nameleft, null);
			   					}
			   				}
			   		}
			   		else if(simbol.getKind() == Obj.Meth) {
			   			if(MyTab.currentScope() == functionScope) {
			   				parser.report_info("Koriscenje globalne funkcije " + name + " na liniji " + nameleft, null);
						   	/*if(func.getName().equalsIgnoreCase("chr")){
								if(a.equals(Struct.Int)){
									parser.report_error("Greska na liniji: "+funcleft+". Funkcija chr mora da ima Int kao parametar.",null);
									RESULT=MyTab.noType;
								}
							}
							if(func.getName().equalsIgnoreCase("ord")){
								if(a.equals(Struct.Char)){
									parser.report_error("Greska na liniji: "+funcleft+". Funkcija ord mora da ima Char kao parametar.",null);
									RESULT=MyTab.noType;
								}
							}
							if(func.getName().equalsIgnoreCase("len")){
								if(a.equals(Struct.Array)){
									parser.report_error("Greska na liniji: "+funcleft+". Funkcija len mora da ima niz kao parametar.",null);
									RESULT=MyTab.noType;
								}
							
			   				}*/
			   				
			   			}
			   		}
			   		RESULT = simbol;
	   		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Designator ::= Designator DOT IDENT 
            {
              Obj RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			
			  		if(d.getType().getKind() != Struct.Class) {
			   			parser.report_error("Semanticka greska na liniji " + dleft + ": ime " + d.getName() + " nije klasa!", null);
			   			RESULT = MyTab.noObj;
			   		}
			   		else {
			   			Obj ident = d.getType().getMembersTable().searchKey(i);
			   			if(ident == null) {
			   				parser.report_error("Semanticka greska na liniji " + ileft + ": ime " + i + " ne pripada klasi " + d.getName() + " !", null);
			   				RESULT = MyTab.noObj;
			   			}
			   			else {
			   				if(ident.getKind() == Obj.Fld) {
			   					parser.report_info("Koriscenje polja " + i + " na liniji " + ileft, null);
			   				}
			   				else if(ident.getKind() == Obj.Meth) { 
			   					parser.report_info(ident.getLevel()+"Koriscenje metode " + i + " na liniji " + ileft, null);
			   					
			   				}
			   				RESULT = ident;
			   			}
			   		}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Term ::= Term Mulop Factor 
            {
              Struct RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 if(t1.getKind()!=t2.getKind()) {
			parser.report_error("Greska na liniji: "+t1left+" nekompatibilni tipovi u izrazu.",null);
			RESULT=MyTab.noType;
		 }
		 if(t1.getKind()!=Struct.Int||t2.getKind()!=Struct.Int){
		 	parser.report_error("Greska na liniji: "+t1left+". Tip promenljive u izrazu mora biti Int.",null);
		 	RESULT=MyTab.noType;
		 }
		 RESULT = t1;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Term ::= Factor 
            {
              Struct RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct f1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 RESULT=f1; 
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= Term 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		RESULT=t;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= MINUS Term 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		if(t.getKind()!=Struct.Int){
			parser.report_error("Greska na liniji:"+tleft+". Promenljiva u izrazu mora biti tipa Int.",null);
			RESULT=MyTab.noType;
		}
		RESULT=t;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= Expr Addop Term 
            {
              Struct RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			if(e.getKind()!=t.getKind()){
				parser.report_error("Greska na liniji: "+tleft+" nekompatibilni tipovi u izrazu.",null);
				RESULT =MyTab.noType;
			}
			if(e.getKind()!=MyStruct.Int){
				parser.report_error("Greska na liniji: "+eleft+". Izraz pre operacije mora biti tipa int.",null);
				RESULT=MyTab.noType;
			}
			if(t.getKind()!=MyStruct.Int){
				parser.report_error("Greska na liniji: "+tleft+". Izraz mora biti tipa int.",null);
				RESULT=MyTab.noType;
			}
			RESULT=e;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct e1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			 	if(e1.getKind()!=e2.getKind()) {
		 			parser.report_error("Nekompatibilni tipovi na liniji " + e1left,null);
		 		}
		 		RESULT=op;
		 	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CondFactList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CondFactList ::= CondFactList AND CondFact 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					RESULT=li;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CondTerm ::= CondFact CondFactList 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				RESULT=0;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CondTermList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CondTermList ::= CondTermList OR CondTerm 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					RESULT=c;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Condition ::= CondTerm CondTermList 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			 	RESULT=0;
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DesignatorStatement ::= Designator MINUSMINUS 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
							if(dest!=null) {
							if(dest.getKind()!=Struct.Int) 
		 						parser.report_error("Promenljiva: "+dest+" mora biti tipa int. - Greska na liniji " + destleft,null);
							}
							else {
								parser.report_error("Ne postoji izraz koji se umanjuje. - Greska na liniji " + destleft,null);
							}
							RESULT=dest;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DesignatorStatement ::= Designator PLUSPLUS 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
							if(dest!=null) {
							if(dest.getKind()!=Struct.Int) 
		 						parser.report_error("Promenljiva: "+dest+" mora biti tipa int. - Greska na liniji " + destleft,null);
							}
							else {
								parser.report_error("Ne postoji izraz koji se uvecava. - Greska na liniji " + destleft,null);
							}
							RESULT=dest;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DesignatorStatement ::= Designator Assignop Expr 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							Obj ex=MyTab.find(e.toString());
							if(dest.getType().getKind()!=Struct.Array&&dest.getType().getKind()!=Struct.Int&&dest.getType().getKind()!=Struct.Char&&dest.getType().getKind()!=Struct.Bool&&dest.getType().getKind()!=Struct.Class){
								parser.report_error( "Tip kome se dodeljuje mora biti promenljiva, element niza ili polje unutar objekta. Greska na liniji " + destleft,null);
		 						RESULT=MyTab.noType;
							}
							if (e.getKind()!=dest.getType().getKind()) {
		 						parser.report_error( "Ovaj tip se ne moze dodeliti promenjivoj tipa: " + dest.getType().getKind() + " - Greska na liniji " + destleft,null);
		 						RESULT=MyTab.noType;
		 						}
							RESULT=dest;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DesignatorStatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DesignatorStatementList ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NumConstList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumConstList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NumConstList ::= COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumConstList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ConditionList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ConditionList ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Matched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Matched ::= PRINT LPAREN Expr NumConstList RPAREN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				if (!e.equals(MyTab.boolType)&&!e.equals(MyTab.intType)&&!e.equals(MyTab.charType))
					parser.report_error("Greska na liniji "+ eleft + ". Izraz mora biti integer, boolean ili char.",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				if (!des.getType().equals(MyTab.boolType)&&!des.getType().equals(MyTab.intType)&&!des.getType().equals(MyTab.charType))
					parser.report_error("Greska na liniji "+ desleft + ". Izraz mora biti integer, boolean ili char.",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Matched ::= RETURN SEMI 
            {
              Object RESULT =null;
		int linijaleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int linijaright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object linija = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if (currentMethType != MyTab.noType)
					parser.report_error("Greska na liniji "+ linijaleft + ":metod ne sme imati return bez izraza jer nije void!",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Matched ::= RETURN Expr NT$5 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$5 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
	
				returnFound=true;
				if(currentMethType==MyTab.noType){
					parser.report_error("Greska na liniji: "+tleft+". Povratni tip funkcije je VOID i ne moze imati vrednost u return iskazu.",null);
				}
				if(!currentMethType.compatibleWith(t)){
					parser.report_error("Greska na liniji: "+tleft+". Tip izraza u return naredbi se ne slaze sa tipom povratne vrednosti funkcije.",null);
				
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Matched ::= CONTINUE SEMI 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(in_for==false)
					parser.report_error("Greska na liniji: "+cleft+". Continue mora biti unutar for petlje.",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Matched ::= BREAK SEMI 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(in_for==false)
					parser.report_error("Greska na liniji: "+bleft+". Break mora biti unutar for petlje.",null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Matched ::= FOR LPAREN DesignatorStatementList SEMI ConditionList SEMI DesignatorStatementList RPAREN NT$4 Matched 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				in_for=false;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$4 ::= 
            {
              Object RESULT =null;

				in_for=true;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Matched ::= If Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Matched ::= Designator LPAREN ActualPars RPAREN SEMI 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
			if(Obj.Meth == func.getKind()){
				parser.report_info("Pronadjen poziv funkcije "+func.getName()+" na liniji: "+funcleft,null);
				RESULT=func.getType();
				}
			else {
				parser.report_error("Greska na liniji: "+funcleft+" ime: "+func.getName()+" nije funkcija.",null);
				RESULT=MyTab.noType;
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Matched ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Unmatched ::= If Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Unmatched ::= If Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // If ::= IF LPAREN Condition NT$3 RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("If",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$3 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

				if(cond.equals(Struct.Bool)){
					parser.report_error("Greska na liniji: "+condleft+". Uslov mora biti boolean tipa.",null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int vTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String vType = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			Obj typeNode = MyTab.find(vType);
			if(typeNode != MyTab.noObj) {
				if(typeNode.getKind() == Obj.Type) {
					currentType = typeNode.getType();
					
					//OVDE PROVERI DA LI JE U PITANJU KLASA DA BI PRIKAZALA KORISCENJE
					if(currentType.getKind() == Struct.Class)
						parser.report_info("Koriscenje klase " + vType + " kao tipa na liniji " + vTypeleft, null);
					
					RESULT = currentType;
				}
				else {
					parser.report_error("Ime " + vType + " nije tip!" , null);
					RESULT = MyTab.noType;
				}
			}
			else {
				parser.report_error("Semanticka greska na liniji " + vTypeleft + ":" + " Nije pronadjen tip " + vType + "!" , null);
				RESULT = MyTab.noType;
			}
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Type ::= VOID 
            {
              Struct RESULT =null;
		
			RESULT=MyTab.noType;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FormParamList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FormParamList ::= FormParamList COMMA Type IDENT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					parser.report_info("Parametar funkcije: "+name+" na liniji "+nameleft,null);
					if(MyTab.currentScope.findSymbol(name)!=null)
						{
							parser.report_error("Vec postoji promenljiva sa imenom: " + name,null);
						}
					else {
						Obj temp = MyTab.insert(Obj.Var, name, currentType);
						RESULT=f;
						}
			
				  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormParamList ::= FormParamList COMMA Type IDENT LMEDBRACE RMEDBRACE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					parser.report_info("Parametar funkcije: "+name+" na liniji "+nameleft,null);
					if(MyTab.currentScope.findSymbol(name)!=null)
						{
							parser.report_error("Vec postoji promenljiva sa imenom: " + name,null);
						}
					else {
						Obj temp = MyTab.insert(Obj.Var, name, MyTab.referenceType);
						RESULT=f;
						}
			
				  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormPars ::= VarArgs 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormPars ::= Type IDENT FormParamList VarArgs 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				parser.report_info("Parametar funkcije: "+name+" na liniji "+nameleft,null);
				if(MyTab.currentScope.findSymbol(name)!=null)
					{
						parser.report_error("Vec postoji promenljiva sa imenom: " + name,null);
					}
				else {
					Obj temp = MyTab.insert(Obj.Var, name, currentType);
					}
			
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormPars ::= Type IDENT LMEDBRACE RMEDBRACE FormParamList VarArgs 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
				parser.report_info("Parametar funkcije: "+name+" na liniji "+nameleft,null);
				if(MyTab.currentScope.findSymbol(name)!=null)
					{
						parser.report_error("Vec postoji promenljiva sa imenom: " + name,null);
					}
				else {
					Obj temp = MyTab.insert(Obj.Var, name, MyTab.referenceType);
					}
			
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VarArgs ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarArgs",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VarArgs ::= Type DOT DOT DOT IDENT 
            {
              Object RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct typeName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarArgs",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodDecl ::= STATIC Type IDENT NT$2 LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		 
				if(!returnFound && retType != MyTab.noType)
					parser.report_error("Semanticka greska na liniji: "+methNameleft+". Funkcija: "+methName+" nema return iskaz.",null);
				MyTab.chainLocalSymbols(currentMethod);
				returnFound=false;
				currentMethod=null;	
				currentMethType=null;
				global_scope--;
				MyTab.closeScope();
				functionScope=null;
				in_method=false;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$2 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
  
				if(!in_class==true)
					parser.report_error("Greska na liniji: "+retTypeleft+". Staticka funkcija: "+methName+" mora biti unutar klase.",null);
				in_method=true;
				currentMethod=MyTab.insert(Obj.Meth,methName,currentType);
				currentMethType=retType;
				MyTab.openScope();
				functionScope=MyTab.currentScope();
				global_scope++;
				parser.report_info("Obradjuje se metoda: "+methName+" na liniji "+methNameleft,null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodDecl ::= Type IDENT NT$1 LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		 
				if(in_class) 
					  		_this = MyTab.insert(Obj.Var, "this", MyTab.noType);
				if(!returnFound && retType != MyTab.noType)
					parser.report_error("Semanticka greska na liniji: "+methNameleft+". Funkcija: "+methName+" nema return iskaz.",null);
				MyTab.chainLocalSymbols(currentMethod);
				returnFound=false;
				currentMethod=null;	
				currentMethType=null;
				global_scope--;
				MyTab.closeScope();
				functionScope=null;
				main=false;
				in_method=false;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$1 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

				in_method=true;
				currentMethod=MyTab.insert(Obj.Meth,methName,currentType);
				if(methName.equalsIgnoreCase("main"))
				main=true;
				currentMethType=retType;
				MyTab.openScope();
				functionScope=MyTab.currentScope();
				global_scope++;
				parser.report_info("Obradjuje se metoda: "+methName+" na liniji "+methNameleft,null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				   RESULT=m;
				  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Field ::= IDENT LMEDBRACE RMEDBRACE 
            {
              Obj RESULT =null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
			//proveri da li ima kolizije
			Obj var = MyTab.currentScope().findSymbol(vName);
			if(var != null) {
				if(newClass.getElemType() !=null && newClass.getElemType().getMembersTable().searchKey(vName) == null)
					
					parser.report_error("Semanticka greska na liniji " + vNameleft + " : Ime promenljive vec postoji!", null);
				
				else {
					MyTab.currentScope().getLocals().deleteKey(vName);
					
					Struct arrayType = new Struct(Struct.Array);
					arrayType.setElementType(currentType);
					MyTab.insert(Obj.Fld, vName, arrayType);
					
					MyTab.chainLocalSymbols(newClass);
					
					parser.report_info("Deklarisan niz kao polje " + vName + " na liniji " + vNameleft, null);
				}
			}
			else if(currentType != null) {
				Struct arrayType = new Struct(Struct.Array);
				arrayType.setElementType(currentType);
				MyTab.insert(Obj.Fld, vName, arrayType);
				
				MyTab.chainLocalSymbols(newClass);
				
				parser.report_info("Deklarisan niz kao polje " + vName + " na liniji " + vNameleft, null);
			}
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Field",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Field ::= IDENT 
            {
              Obj RESULT =null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 

			Obj var = MyTab.currentScope().findSymbol(vName);
			
			if(var != null) {
			
				if(newClass.getElemType() !=null && newClass.getElemType().getMembersTable().searchKey(vName) == null)
					
					parser.report_error("Semanticka greska na liniji " + vNameleft + " : Ime promenljive vec postoji!", null);
				
				else {
					MyTab.currentScope().getLocals().deleteKey(vName);
					
					MyTab.insert(Obj.Fld, vName, currentType);
				
					MyTab.chainLocalSymbols(newClass);
					
					parser.report_info("Deklarisano polje " + vName + " tipa " + currentType + " na liniji " + vNameleft, null);
				}
			}
			else if(currentType != null) {
				MyTab.insert(Obj.Fld, vName, currentType);
				
				MyTab.chainLocalSymbols(newClass);
				
				parser.report_info("Deklarisano polje " + vName + " tipa " + currentType + " na liniji " + vNameleft, null);
			}
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Field",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FieldDeclList ::= Field 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FieldDeclList ::= FieldDeclList COMMA Field 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassVarDecl ::= Type error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassVarDecl ::= error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassVarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
				 parser.report_error("Uspesan oporavak od greske na liniji: "+eleft+".",null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassVarDecl ::= Type FieldDeclList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassVarDeclList ::= ClassVarDeclList ClassVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Extends ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Extends",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Extends ::= EXTENDS error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Extends",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Extends ::= error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Extends",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Extends ::= EXTENDS Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(t.getKind() != Struct.Class) {
					parser.report_error("Semanticka greska na liniji " + tleft + ": Tip za extends mora biti klasa! ", null);
				}
				else {
					
					newClass.setElementType(t);	//POSTAVIMO KO MU JE NATKLASA!!!
					
					extendsSymbols = t.getMembersTable();
					
					
					MyTab.chainLocalSymbols(newClass);
					RESULT=t;
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Extends",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassName ::= IDENT 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			  	Obj classNode = MyTab.find(className);
			  	if(classNode != MyTab.noObj) {
			  		parser.report_error("Semanticka greska na liniji " + classNameleft + " : Ime klase se vec koristi! ", null);
			  		RESULT = MyTab.noObj;
			  		ok = false;
			  	}
			  	else {				
			  		newClass = new Struct(Struct.Class);
				  	
				  	Obj obj = MyTab.insert(Obj.Type, className, newClass);				  	
				  	
				  	RESULT=className;
				  	MyTab.openScope();
				  	global_scope++;
				  	classScope = MyTab.currentScope();
				  	
				  	Obj vtPtr = MyTab.insert(Obj.Fld, "vtPtr", MyTab.intType);
				  					  	
				  	MyTab.chainLocalSymbols(newClass);
				  	
				  	parser.report_info("Obradjuje se klasa " + className + " na liniji " + classNameleft, null);
				  	ok = true;
					
				}
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassName",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OptionalMethods ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalMethods",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OptionalMethods ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalMethods",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ClassDecl ::= CLASS ClassName Extends NT$0 LBRACE ClassVarDeclList OptionalMethods RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		 
					
				MyTab.chainLocalSymbols(newClass);
				
			  	if(true) {		//if(ok)							  
			  		Obj obj = new Obj(Obj.Var, "#vt_finish" + globalScope.getnVars(), MyTab.intType);
			  		globalScope.addToLocals(obj);
			  		obj.setLevel(0);
			  		global_scope--;
			  		MyTab.closeScope();
			  		vtSet = false;
			  		parser.report_info("Definisana klasa " + c + " na liniji " + cleft, null);
			  	}
			  	
			  	classScope = null;
			  	newClass = null;
			  	extendsSymbols = null;
			  	
			  	redefiningMap.clear();
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$0 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

			  	//PRVO UBACUJEMO POLJA POTKLASE
			  	//DRUGO UBACUJEMO POLJA NATKLASE
			  	//TRECE UBACUJEMO METODE POTKLASE
			  	//CETVRTO UBACUJEMO METODE NATKLASE
			  				  	
			  	if(extendsSymbols!=null) {
				  	for(Obj s: extendsSymbols.symbols()) {
				  			if(s.getKind() == Obj.Fld) {	//POLJE
				  				if(MyTab.currentScope().findSymbol(s.getName()) == null) {
				  					Obj obj = MyTab.insert(s.getKind(), s.getName(), s.getType());
				  				}
				  			}
				  			else if(s.getKind() == Obj.Meth) {
				  				if(MyTab.currentScope().findSymbol(s.getName()) == null) {
				
									Obj currentMeth = MyTab.insert(s.getKind(), s.getName(), s.getType());
										
									currentMeth.setLevel(s.getLevel());
									currentMeth.setAdr(s.getAdr());
										
									MyTab.openScope();
									global_scope++;	
									Collection<Obj> locals = s.getLocalSymbols();
									Iterator it = locals.iterator();
										
									for(int i=0; i<s.getLevel(); i++) {
										if(it.hasNext()) {
											MyTab.currentScope().addToLocals((Obj)it.next());
										}
									}
									MyTab.chainLocalSymbols(currentMeth);
									global_scope--;
									MyTab.closeScope();
									
									//UBACIVANJE U VIRTUELNU TABELU
									String name = currentMeth.getName().toString();
									for(int i=0; i<name.length(); i++) {	
										Obj obj = new Obj(Obj.Var, "#" + globalScope.getnVars() + name.charAt(i), MyTab.charType);
										
										globalScope.addToLocals(obj);
										
										if(!vtSet) {
											Obj vtPtr = MyTab.currentScope().findSymbol("vtPtr");
											
											vtPtr.setFpPos(obj.getAdr());
										}
										obj.setLevel(0);
									}
									
									//DA SE ZNA DA JE KRAJ IMENA
									Obj obj = new Obj(Obj.Var, "#" + globalScope.getnVars() + "-1", MyTab.intType);
									globalScope.addToLocals(obj);
									obj.setLevel(0);
									obj = new Obj(Obj.Var, "#adr_" + name.toString() + globalScope.getnVars() + "-" + currentMeth.getAdr(), MyTab.intType);
									globalScope.addToLocals(obj);
									//OVDE MI TREBA OBJ.GETADR ZBOG REDEFFINISANJA
									redefiningMap.put(currentMeth.getName(), obj);
									obj.setLevel(0);
								}
				  			}
				  	}
					
					MyTab.chainLocalSymbols(newClass);
				}
				
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Var ::= IDENT LMEDBRACE RMEDBRACE 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
			Obj var = MyTab.find(name);
			if(var != MyTab.noObj) {
				parser.report_error("Semanticka greska na liniji " + nameleft + " : Ime promenljive vec postoji!", null);
			}
			else if(currentType != null) {
				Struct arrayType = new Struct(Struct.Array);
				arrayType.setElementType(currentType);
				MyTab.insert(Obj.Var, name, arrayType);
				parser.report_info("Deklarisan niz " + name + " na liniji " + nameleft, null);
			}
			if(global_scope==0)
			array_count++;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Var ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			
			Obj var = MyTab.find(name);
			if(var != MyTab.noObj) {
				parser.report_error("Semanticka greska na liniji " + nameleft + " : Ime promenljive vec postoji!", null);
			}
			else if(currentType != null) {
				MyTab.insert(Obj.Var, name, currentType);
				parser.report_info("Deklarisana promenljiva " + name + " na liniji " + nameleft, null);
			}
			if(global_scope==0)
			var_count++;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarList ::= error COMMA VarList 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			parser.report_info("Uspesan oporavak od greske pri definisanju globalne promenljive na liniji " + cleft,null); 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarList ::= Var 
            {
              Object RESULT =null;
		
			if(main)
			mainDeclarations++;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarList ::= Var COMMA VarList 
            {
              Object RESULT =null;
		
			if(main)
			mainDeclarations++;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		   		currentType=null;
		  		parser.report_info("Uspesan oporavak od greske pri definisanju globalne promenljive na liniji " + sleft,null); 
	  	   	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecl ::= Type VarList SEMI 
            {
              Object RESULT =null;
		
				currentType=null;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstList ::= BOOL 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = MyTab.boolType; 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstList ::= CHAR 
            {
              Object RESULT =null;
		int chrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int chrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character chr = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = MyTab.charType; 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstList ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = MyTab.intType;  
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IdentList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IdentList ::= IdentList COMMA IDENT EQUAL ConstList 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(MyTab.currentScope.findSymbol(name) != null)
				  		parser.report_error("Greska na liniji: "+nameleft+". Vec postoji identifikator sa imenom: " + name,null);
				  	else {
				  		Obj temp = MyTab.insert(Obj.Con, name, currentType);
				  		if(!o.equals(currentType))
				  			parser.report_error("Greska na liniji: " + nameleft+" . Tip koji se dodeljuje ne odgovara tipu kome se dodeljuje. ",null);
				  		parser.report_info("Deklarisana globalna konstanta " +name + " na liniji " + nameleft, null);
				  	}
				  if(global_scope==0)
				  con_count++;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstDecl ::= CONST error SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			  	parser.report_info("Uspesan oporavak od greske na liniji " + sleft + " pri definisanju konstante.",null); 
		  	  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ConstDecl ::= CONST Type IDENT EQUAL ConstList IdentList SEMI 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				  	if(MyTab.currentScope.findSymbol(name) != null)
				  		parser.report_error("Greska na liniji: "+nameleft+". Vec postoji identifikator sa imenom: " + name,null);
				  	else {
				  		Obj temp = MyTab.insert(Obj.Con, name, currentType);
				  		if(!o.equals(currentType))
				  			parser.report_error("Greska na liniji: " + nameleft+" . Tip koji se dodeljuje ne odgovara tipu kome se dodeljuje. ",null);
				  		parser.report_info("Deklarisana globalna konstanta " + name + " na liniji " + nameleft, null);
				  	}
				  	if(global_scope==0)
					con_count++;
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SomeDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SomeDeclList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SomeDeclList ::= SomeDeclList ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SomeDeclList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SomeDeclList ::= SomeDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SomeDeclList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SomeDeclList ::= SomeDeclList ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SomeDeclList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			RESULT= MyTab.insert(Obj.Prog,pName,MyTab.noType);
			globalScope=MyTab.currentScope();
			
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgName SomeDeclList LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
				MyTab.openScope();
				MyTab.chainLocalSymbols(p);
				MyTab.closeScope();
				
				for(Obj s : p.getLocalSymbols())
					if(s.getKind() == Obj.Var)
						if(s.getType().getKind() == Struct.Array)
							array_count++;
						else
							var_count++;
					else if(s.getKind() == Obj.Con)
						con_count++;
									
				parser.report_info("Broj globalnih prostih promenjivih:" + var_count,null);
				parser.report_info("Broj globalnih nizova:" + array_count,null);
				parser.report_info("Broj globalnih konstanti:" + con_count,null);
				parser.report_info("Broj deklaracija promenljivih u main-u:" + mainDeclarations,null);
				parser.report_info("global_scope:" + global_scope,null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

